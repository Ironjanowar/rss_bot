<feed xmlns="http://www.w3.org/2005/Atom">
<title>The Fly Phoenix Files</title>
<subtitle>Articles on Phoenix, LiveView, and Elixir from the Team at Fly</subtitle>
<id>https://fly.io/</id>
<link href="https://fly.io/"/>
<link href="https://fly.io/phoenix-files/feed.xml" rel="self"/>
<updated>2023-04-12T00:00:00+00:00</updated>
<author>
<name>Fly</name>
</author>
<entry>
<title>Phoenix LiveView Zipped Uploads</title>
<link rel="alternate" href="https://fly.io/phoenix-files/phoenix-liveview-zipped-uploads/"/>
<id>https://fly.io/phoenix-files/phoenix-liveview-zipped-uploads/</id>
<published>2023-04-12T00:00:00+00:00</published>
<updated>2023-04-12T18:03:09+00:00</updated>
<content type="html"><p class="lead"> We&#39;re Fly.io. We run apps for our users on hardware we host around the world. This post is about how your Phoenix LiveView can handle uploading an entire directory of nested files. Fly.io happens to be a great place to run Phoenix applications. Check out how to <a href="/docs/elixir/">get started</a>!</p><p>File and image uploads in LiveView are already easy and elegant. But what if the user wants to upload an entire directory with more nested directories and files? How should we handle that? Chris McCord walks us through what it takes to make that a good experience in LiveView.</p> <h2 id='problem' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#problem' aria-label='Anchor'></a>Problem</h2><p>LiveView makes interactive file uploads a breeze. A user can select multiple files to upload, one-by-one, and LiveView will dutifully upload the files in parallel, show previews, and even allow the user to prune their upload selections before you commit the uploads to their final destination. This flow works great, but sometimes we want to allow users to upload entire directories of nested files.</p> <p>How can we upload entire directories of files, including nested directories, in LiveView?</p> <h2 id='solution' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#solution' aria-label='Anchor'></a>Solution</h2><p>Fortunately, we have a great starting point with the file input&#39;s <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/webkitdirectory"><code>webkitdirectory attribute</code></a>, but we need a little more work to make this sing with LiveView.</p> <p>The <code>webkitdirectory</code> attribute allows the user to select entire directories for upload, but we don&#39;t want to send each file (potentially hundreds or thousands) as an individual upload entry. This is way more expensive for the server to handle as you need to consume each file one-by-one, and it also sends up more bandwidth than necessary.</p> <p>Instead, we can perform the following steps:</p> <ul> <li>Compress the files on the client into a zip archive. </li><li>Upload the single zip file to LiveView. </li></ul> <p>Once the zip file is uploaded, we will:</p> <ul> <li>Unpack the zip archive on the server. </li><li>Move the tree of files to their final location. </li></ul> <p>This approach saves on bandwidth and server resources by processing the files in a single step.</p> <aside class="right-sidenote"> <strong class='font-semibold text-navy'>CAUTION</strong>: There is an inherent risk accepting user controlled zip files. Please refer to the <a href="#discussion">Discussion</a> section for more on that.</aside><p>To handle zipping the files on the client, let&#39;s pull in the <a href="https://github.com/Stuk/jszip"><code>JSZip library</code></a>.</p> <p>From your phoenix project directory, vendor the jszip library to <code>assets/vendor</code> :</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight '><code>$ curl -o assets/vendor/jszip.js https://raw.githubusercontent.com/Stuk/jszip/main/dist/jszip.min.js % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 97630 100 97630 0 0 366k 0 --:--:-- --:--:-- --:--:-- 372k chris@m2a ~/playground/zip </code></pre></div><p>Next, import the <code>JSZip</code> object in your <code>assets/js/app.js</code> file:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight javascript'><code><span class="k">import</span> <span class="p">{</span><span class="nx">LiveSocket</span><span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">phoenix_live_view</span><span class="dl">"</span> <span class="k">import</span> <span class="nx">JSZip</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../vendor/jszip</span><span class="dl">"</span> </code></pre></div><p>We&#39;ll need a sprinkle of custom JavaScript to handle zipping the collection of files on the client, before passing it off to LiveView as the upload. We&#39;ll use a <a href="https://hexdocs.pm/phoenix_live_view/js-interop.html#client-hooks-via-phx-hook">Hook</a> for this. In your <code>assets/js/app.js</code> add the following hook:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight javascript'><code><span class="kd">let</span> <span class="nx">Hooks</span> <span class="o">=</span> <span class="p">{}</span> <span class="nx">Hooks</span><span class="p">.</span><span class="nx">ZipUpload</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">mounted</span><span class="p">(){</span> <span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">input</span><span class="dl">"</span><span class="p">,</span> <span class="nx">e</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">()</span> <span class="kd">let</span> <span class="nx">zip</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">JSZip</span><span class="p">()</span> <span class="nb">Array</span><span class="p">.</span><span class="k">from</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">files</span><span class="p">).</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">file</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="nx">zip</span><span class="p">.</span><span class="nx">file</span><span class="p">(</span><span class="nx">file</span><span class="p">.</span><span class="nx">webkitRelativePath</span> <span class="o">||</span> <span class="nx">file</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span> <span class="nx">file</span><span class="p">,</span> <span class="p">{</span><span class="na">binary</span><span class="p">:</span> <span class="kc">true</span><span class="p">})</span> <span class="p">})</span> <span class="nx">zip</span><span class="p">.</span><span class="nx">generateAsync</span><span class="p">({</span><span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">blob</span><span class="dl">"</span><span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="nx">blob</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">upload</span><span class="p">(</span><span class="dl">"</span><span class="s2">dir</span><span class="dl">"</span><span class="p">,</span> <span class="p">[</span><span class="nx">blob</span><span class="p">]))</span> <span class="p">})</span> <span class="p">}</span> <span class="p">}</span> </code></pre></div><p>Here we listen for the <code>input</code> event of the file input element, which means a directory has been selected. When fired, we create a new <code>JSZip</code> instance and add each file to the object. Once all files are added, we call <code>zip.generateAsync</code> to generate the zip archive and finish by calling the built-in <code>this.upload(&quot;dir&quot;, [blob])</code> to upload the zipped blob to LiveView.</p> <p>We also need to let our <code>liveSocket</code> instance know how to find the Hook. Update your <code>liveSocket</code> instantiation to look like this:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight javascript'><code><span class="kd">let</span> <span class="nx">liveSocket</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LiveSocket</span><span class="p">(</span><span class="dl">"</span><span class="s2">/live</span><span class="dl">"</span><span class="p">,</span> <span class="nx">Socket</span><span class="p">,</span> <span class="p">{</span> <span class="na">params</span><span class="p">:</span> <span class="p">{</span><span class="na">_csrf_token</span><span class="p">:</span> <span class="nx">csrfToken</span><span class="p">},</span> <span class="na">hooks</span><span class="p">:</span> <span class="nx">Hooks</span> <span class="p">})</span> </code></pre></div><figure class="post-cta"> <figcaption> <h1> Fly.io ❤️ Elixir</h1><p> Fly.io is a great way to run your Phoenix LiveView app close to your users. It&#39;s really easy to get started. You can be running in minutes.</p><p><a class="button bg-white text-violet-600 hover:bg-opacity-75 hover:text-violet-700 transition-colors" href="https://fly.io/docs/elixir/"> Deploy a Phoenix app today!&nbsp;&nbsp;<span class='opacity:50'>&rarr;</span> </a></p> </figcaption><div class="image-container"> <img src="/static/images/cta-rabbit.webp" srcset="/static/images/cta-rabbit@2x.webp 2x" alt=""></div></figure><p>Next, let&#39;s replace our landing page route with a new LiveView route in <code>lib/zip_web/router.ex</code>:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight diff'><code><span class="gd">- get "/", PageController, :home </span><span class="gi">+ live "/", UploadLive </span></code></pre></div><p>Now, let&#39;s create a new LiveView in <code>lib/zip_web/live/upload_live.ex</code> and key this in:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">defmodule</span> <span class="no">ZipWeb</span><span class="o">.</span><span class="no">UploadLive</span> <span class="k">do</span> <span class="kn">use</span> <span class="no">ZipWeb</span><span class="p">,</span> <span class="ss">:live_view</span> <span class="nv">@uploads_dir</span> <span class="no">Path</span><span class="o">.</span><span class="n">expand</span><span class="p">(</span><span class="s2">"../../../priv/uploads"</span><span class="p">,</span> <span class="n">__DIR__</span><span class="p">)</span> <span class="k">def</span> <span class="n">render</span><span class="p">(</span><span class="n">assigns</span><span class="p">)</span> <span class="k">do</span> <span class="sx">~H""</span><span class="s2">" &lt;form phx-change="</span><span class="n">files</span><span class="o">-</span><span class="n">selected</span><span class="s2">"&gt; &lt;p :if={@status}&gt;&lt;%= @status %&gt;&lt;/p&gt; &lt;div class={@status &amp;&amp; "</span><span class="n">hidden</span><span class="s2">"}&gt; &lt;.live_file_input upload={@uploads.dir} class="</span><span class="n">hidden</span><span class="s2">" /&gt; &lt;input id="</span><span class="n">dir</span><span class="s2">" type="</span><span class="n">file</span><span class="s2">" webkitdirectory={true} phx-hook="</span><span class="no">Zip</span><span class="s2">" /&gt; &lt;/div&gt; &lt;%= for entry &lt;- @uploads.dir.entries do %&gt; &lt;%= entry.progress %&gt;% &lt;% end %&gt; &lt;/form&gt; """</span> <span class="k">end</span> <span class="k">def</span> <span class="n">mount</span><span class="p">(</span><span class="n">_params</span><span class="p">,</span> <span class="n">_session</span><span class="p">,</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">socket</span> <span class="o">|&gt;</span> <span class="n">assign</span><span class="p">(</span><span class="ss">files:</span> <span class="p">[],</span> <span class="ss">status:</span> <span class="no">nil</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="n">allow_upload</span><span class="p">(</span><span class="ss">:dir</span><span class="p">,</span> <span class="ss">accept:</span> <span class="ss">:any</span><span class="p">,</span> <span class="ss">max_entries:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">auto_upload:</span> <span class="no">true</span><span class="p">,</span> <span class="ss">max_file_size:</span> <span class="mi">1_000_000_000</span><span class="p">,</span> <span class="ss">progress:</span> <span class="o">&amp;</span><span class="n">handle_progress</span><span class="o">/</span><span class="mi">3</span> <span class="p">)}</span> <span class="k">end</span> <span class="k">def</span> <span class="n">handle_event</span><span class="p">(</span><span class="s2">"files-selected"</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span> <span class="p">{</span><span class="ss">:noreply</span><span class="p">,</span> <span class="n">assign</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="ss">status:</span> <span class="s2">"compressing files..."</span><span class="p">)}</span> <span class="k">end</span> <span class="k">def</span> <span class="n">handle_progress</span><span class="p">(</span><span class="ss">:dir</span><span class="p">,</span> <span class="n">entry</span><span class="p">,</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span> <span class="k">raise</span> <span class="s2">"TODO"</span> <span class="k">end</span> <span class="k">end</span> </code></pre></div><p>We started with the skeleton of what we need to accept file uploads. First, we defined a template inside <code>render</code> that builds a basic upload form. It uses the <code>&lt;live_file_input/&gt;</code> component to build the necessary LiveView input, but we hide it with the <code>hidden</code> class because we&#39;ll be using our own input to build the zip file. Once we zip the file on the client with our Hook, we&#39;ll use the regular LiveView input to perform the upload.</p> <p>Our template is basic. When we have a <code>@status</code> assigned, it means our zipped upload is either in progress or complete, and we display a message to the user. Otherwise, we show the input and current file progress.</p> <p>Next, in <code>mount</code>, we start with an empty <code>status</code>, then we allow an upload for the user&#39;s directory. We mark it as <code>max_entries: 1</code> because we&#39;ll be taking all the files in the user&#39;s selected directory and zipping it as a single entry on the client. We also set <code>auto_upload: true</code> to the upload as soon as the directory is selected. Next, we allow up to a 1gb file size and finally tell LiveView to call our <code>handle_progess/3</code> callback on progress events.</p> <p>With this in place, we can check that our LiveView renders things appropriately:</p> <p><img src="/phoenix-files/2023-04-12/01-file-selection-prompt.png?card&amp;center" alt="File selection prompt display" /></p> <p>It&#39;s not much to look at yet, but we know we&#39;re on the right track. To complete the loop, we need to unzip the archive once it has been completely uploaded and move the contents to the final destination path:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">def</span> <span class="n">handle_progress</span><span class="p">(</span><span class="ss">:dir</span><span class="p">,</span> <span class="n">entry</span><span class="p">,</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span> <span class="k">if</span> <span class="n">entry</span><span class="o">.</span><span class="n">done?</span> <span class="k">do</span> <span class="no">File</span><span class="o">.</span><span class="n">mkdir_p!</span><span class="p">(</span><span class="nv">@uploads_dir</span><span class="p">)</span> <span class="p">[{</span><span class="n">dest</span><span class="p">,</span> <span class="n">_paths</span><span class="p">}]</span> <span class="o">=</span> <span class="n">consume_uploaded_entries</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="ss">:dir</span><span class="p">,</span> <span class="k">fn</span> <span class="p">%{</span><span class="ss">path:</span> <span class="n">path</span><span class="p">},</span> <span class="n">_entry</span> <span class="o">-&gt;</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="p">[{</span><span class="ss">:zip_comment</span><span class="p">,</span> <span class="p">[]},</span> <span class="p">{</span><span class="ss">:zip_file</span><span class="p">,</span> <span class="n">first</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">_</span><span class="p">}</span> <span class="o">|</span> <span class="n">_</span><span class="p">]}</span> <span class="o">=</span> <span class="ss">:zip</span><span class="o">.</span><span class="n">list_dir</span><span class="p">(</span><span class="sx">~c"#{path}"</span><span class="p">)</span> <span class="n">dest_path</span> <span class="o">=</span> <span class="no">Path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nv">@uploads_dir</span><span class="p">,</span> <span class="no">Path</span><span class="o">.</span><span class="n">basename</span><span class="p">(</span><span class="n">to_string</span><span class="p">(</span><span class="n">first</span><span class="p">)))</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">paths</span><span class="p">}</span> <span class="o">=</span> <span class="ss">:zip</span><span class="o">.</span><span class="n">unzip</span><span class="p">(</span><span class="sx">~c"#{path}"</span><span class="p">,</span> <span class="ss">cwd:</span> <span class="sx">~c"#{@uploads_dir}"</span><span class="p">)</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="p">{</span><span class="n">dest_path</span><span class="p">,</span> <span class="n">paths</span><span class="p">}}</span> <span class="k">end</span><span class="p">)</span> <span class="p">{</span><span class="ss">:noreply</span><span class="p">,</span> <span class="n">assign</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="ss">status:</span> <span class="s2">"</span><span class="se">\"</span><span class="si">#{</span><span class="no">Path</span><span class="o">.</span><span class="n">basename</span><span class="p">(</span><span class="n">dest</span><span class="p">)</span><span class="si">}</span><span class="se">\"</span><span class="s2"> uploaded!"</span><span class="p">)}</span> <span class="k">else</span> <span class="p">{</span><span class="ss">:noreply</span><span class="p">,</span> <span class="n">assign</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="ss">status:</span> <span class="s2">"uploading..."</span><span class="p">)}</span> <span class="k">end</span> <span class="k">end</span> </code></pre></div><p>Fortunately Erlang makes this part easy. The Erlang standard library includes a <a href="https://www.erlang.org/doc/man/zip.html"><code>:zip module</code></a>, which can unzip an archive to a final destination. In our <code>handle_progress</code> callback, we check if the zipped file is done being uploaded with <code>entry.done?</code>, if so we use LiveView&#39;s <code>consume_uploaded_entries</code> function to process the temporary files that have been uploaded.</p> <aside class="right-sidenote"> Note that the <a href="https://hexdocs.pm/elixir/Kernel.html#sigil_c/2"><code>~c</code></a> is the <a href="https://hexdocs.pm/elixir/Kernel.html#sigil_c/2">sigil</a> for a <code>charlist</code>, which is the String format that Erlang expects to receive.</aside><p>Inside the consume function, we have a complex pattern match on the results of the <code>:zip.list_dir(~c&quot;#{path}&quot;)</code> call. This match simply grabs the first file in the user&#39;s selection, which should be the root directory name. Next, we build a final destination path where we want to unzip the temporary file to. We complete the operation by calling <code>:zip.unzip</code> to move the files to the final location on disk.</p> <p>We return the <code>dest</code> path and update our socket assigns to show the new status.</p> <p>Let&#39;s see it all in action:</p> <p><img src="/phoenix-files/2023-04-12/02-zip-upload-demo.gif?card" alt="Animated gif showing browser selecting a directory, it compresses, then uploads to the server." /></p> <p>That&#39;s it!</p> <h2 id='discussion' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#discussion' aria-label='Anchor'></a>Discussion</h2><p>We see here that Elixir inherits powerful features through OTP like the <code>:zip</code> module. It&#39;s fun to dig into some of those features and see how we can use them.</p> <aside class="callout"> <p><strong class='font-semibold text-navy'>CAUTION:</strong> If you intend to accept user controlled zip archives, pause and give some consideration to some of the potential risks. In <a href="/phoenix-files/can-phoenix-safely-use-the-zip-module/">Can Phoenix Safely use the Zip Module?</a>, we explored some of the risks and were surprised by the answers.</p> <p>The lesson should be:</p> <ul> <li>a zip archive can be malicious </li><li>never trust user input </li></ul> </aside><p>This solution could work also well for uploading a directory of images, for generating business reports from a directory of CSV files, and many other uses!</p> </content>
</entry>
<entry>
<title>Elixir and Rust is a good mix</title>
<link rel="alternate" href="https://fly.io/phoenix-files/elixir-and-rust-is-a-good-mix/"/>
<id>https://fly.io/phoenix-files/elixir-and-rust-is-a-good-mix/</id>
<published>2023-04-11T00:00:00+00:00</published>
<updated>2023-04-12T18:03:09+00:00</updated>
<content type="html"><p class="lead"> This post is about using Rust with Elixir and how easily it can be done! If you want to deploy your Phoenix LiveView app right now, then check out how to <a href="/docs/elixir/">get started</a>. You could be up and running in minutes.</p><h2 id='problem' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#problem' aria-label='Anchor'></a>Problem</h2><p>We need to perform a CPU intensive or system level programming task and there are just no good solutions in <a href="https://hex.pm">hex.pm</a>, in this example let&#39;s pretend there <a href="https://fly.io/phoenix-files/resizing-images-using-elixir/">are no good ways to do image</a> processing with Elixir.</p> <p>As is often the case, there IS a high quality <a href="https://www.rust-lang.org/">Rust</a> library called <a href="https://github.com/image-rs/image">image</a> that claims to be just the solution! But shoot, our entire application is written in Elixir already, and we really don&#39;t know how to use <a href="https://www.rust-lang.org/">Rust</a> that well.</p> <p>How can Elixir turn to Rust code for high-performance operations?</p> <h2 id='solution' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#solution' aria-label='Anchor'></a>Solution</h2><p>Enter <a href="https://github.com/rusterlium/rustler">rustler</a>, this library is designed to make using Rust and its package ecosystem trivial. Let&#39;s dive in!</p> <p>Following the getting started guide, first add <a href="https://hex.pm/packages/rustler">rustler</a> to our <code>mix.exs</code> file:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="p">{</span><span class="ss">:rustler</span><span class="p">,</span> <span class="s2">"~&gt; 0.27.0"</span><span class="p">}</span> </code></pre></div><p>Once we run <code>mix deps.get</code> use the built-in mix task to generate our empty rust project:</p> <div class='highlight relative group cmd'><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight bash'><code>mix rustler.new </code></pre></div><div class='highlight relative group output'><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight '><code>This is the name of the Elixir module the NIF module will be registered to. Module name &gt; MyApp.RustImage This is the name used for the generated Rust crate. The default is most likely fine. Library name (myapp_rustimage) &gt; rust_image * creating native/rust_image/.cargo/config.toml * creating native/rust_image/README.md * creating native/rust_image/Cargo.toml * creating native/rust_image/src/lib.rs * creating native/rust_image/.gitignore Ready to go! See /Users/me/projects/my_app/native/rust_image/README.md for further instructions. </code></pre></div><p>You should go open up that <code>README.md</code>, but I&#39;ll save you the hassle, we need to make an Elixir module in <code>lib/my_app/rust_image.ex</code> that has the following contents:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">defmodule</span> <span class="no">MyApp</span><span class="o">.</span><span class="no">RustImage</span> <span class="k">do</span> <span class="kn">use</span> <span class="no">Rustler</span><span class="p">,</span> <span class="ss">otp_app:</span> <span class="ss">:my_app</span><span class="p">,</span> <span class="ss">crate:</span> <span class="s2">"rust_image"</span> <span class="c1"># When your NIF is loaded, it will override this function.</span> <span class="k">def</span> <span class="n">add</span><span class="p">(</span><span class="n">_a</span><span class="p">,</span> <span class="n">_b</span><span class="p">),</span> <span class="k">do</span><span class="p">:</span> <span class="ss">:erlang</span><span class="o">.</span><span class="n">nif_error</span><span class="p">(</span><span class="ss">:nif_not_loaded</span><span class="p">)</span> <span class="k">end</span> </code></pre></div><p>And from then on out we&#39;re ready to do some Rust. The default generator gives us an <code>add/2</code> function implemented in <code>native/rust_image/src/lib.rs</code> let&#39;s take a look</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight rust'><code><span class="nd">#[rustler::nif]</span> <span class="k">fn</span> <span class="nf">add</span><span class="p">(</span><span class="n">a</span><span class="p">:</span> <span class="nb">i64</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="nb">i64</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">i64</span> <span class="p">{</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="p">}</span> <span class="nn">rustler</span><span class="p">::</span><span class="nd">init!</span><span class="p">(</span><span class="s">"Elixir.MyApp.RustImage"</span><span class="p">,</span> <span class="p">[</span><span class="n">add</span><span class="p">]);</span> </code></pre></div><div class="callout"> <h4 id='what-is-a-nif' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#what-is-a-nif' aria-label='Anchor'></a>What Is a NIF?</h4><p>Native Implemented Functions are the BEAM&#39;s method of allowing processes to directly call native functions. They normally have a <em>ton</em> of boilerplate and you need to be serious about cleaning up your memory, handling errors and being safe. Luckily that&#39;s Rust&#39;s entire thing! For example here is the <a href="https://www.erlang.org/doc/tutorial/nif.html">Erlang NIF tutorial</a>. We didn&#39;t need to do any of that!</p> </div><p>Our hyper optimized code will add two integers of size i64 and return the result. Note the Rustler specific parts here:</p> <ul> <li><code>#[rustler::nif]</code> is a macro that tells Rustler to expose this function as a NIF. </li><li><code>rustler::init!(&quot;Elixir.MyApp.RustImage&quot;, [add]);</code> This initializes the Erlang NIF runtime so that the beam can put the <code>add/2</code> function on the <code>Elixir.MyApp.RustImage</code> module and replace the stub we left. </li></ul> <p>This is <em>amazing</em>. To see if this works, lets fire up <code>iex -S mix</code></p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight '><code>iex(1)&gt; MyApp.RustImage.add(100, 20) 120 </code></pre></div><p>If everything worked the first time, you should have seen cargo building the app in release mode and succeeding before opening the iex term. If you didn&#39;t already have Rust installed it would have shown an error, you can install Rust the <a href="https://rustup.rs/">usual way</a>.</p> <p>Rustler is even smart and will recompile automatically, leave iex open and change our <code>lib.rs</code></p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight rust'><code><span class="nd">#[rustler::nif]</span> <span class="k">fn</span> <span class="nf">add</span><span class="p">(</span><span class="n">a</span><span class="p">:</span> <span class="nb">i64</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="nb">i64</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">i64</span> <span class="p">{</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">}</span> </code></pre></div><p>Save and then open that running iex session again:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="n">iex</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">r</span><span class="p">(</span><span class="no">MyApp</span><span class="o">.</span><span class="no">RustImage</span><span class="p">)</span> <span class="o">...</span> <span class="n">truncated</span> <span class="n">output</span> <span class="n">of</span> <span class="n">cargo</span> <span class="n">doing</span> <span class="n">it</span><span class="s1">'s thing an maybe some beam warnings {:reloaded, [MyApp.RustImage]} iex(3)&gt; MyApp.RustImage.add(1,1) 3 </span></code></pre></div><p>Incredible! We get the same workflow and nice bits of working with Elixir, with minimal fussing about with Rust.</p> <h3 id='images' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#images' aria-label='Anchor'></a>Images</h3><p>First add our image dependency to our <code>Cargo.toml</code> file:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight toml'><code><span class="nn">[dependencies]</span> <span class="py">rustler</span> <span class="p">=</span> <span class="s">"0.27.0"</span> <span class="py">image</span> <span class="p">=</span> <span class="s">"0.24.6"</span> </code></pre></div><p>Then alter our <code>lib.rs</code> to create a function that accepts an <code>input</code> path, an <code>output</code> path and <code>quality</code> and changes any image to a JPEG with our set quality.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight rust'><code><span class="k">use</span> <span class="nn">image</span><span class="p">::</span><span class="nn">io</span><span class="p">::</span><span class="n">Reader</span> <span class="k">as</span> <span class="n">ImageReader</span><span class="p">;</span> <span class="k">use</span> <span class="nn">image</span><span class="p">::</span><span class="nn">codecs</span><span class="p">::</span><span class="nn">jpeg</span><span class="p">::</span><span class="n">JpegEncoder</span><span class="p">;</span> <span class="k">use</span> <span class="nn">std</span><span class="p">::</span><span class="nn">fs</span><span class="p">::</span><span class="n">File</span><span class="p">;</span> <span class="nd">#[rustler::nif]</span> <span class="k">fn</span> <span class="nf">jpg</span><span class="p">(</span><span class="n">input</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span> <span class="n">output</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span> <span class="n">quality</span><span class="p">:</span> <span class="nb">i64</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">Result</span><span class="o">&lt;</span><span class="nb">String</span><span class="p">,</span> <span class="nb">String</span><span class="o">&gt;</span> <span class="p">{</span> <span class="k">let</span> <span class="n">img</span> <span class="o">=</span> <span class="nn">ImageReader</span><span class="p">::</span><span class="nf">open</span><span class="p">(</span><span class="o">&amp;</span><span class="n">input</span><span class="p">)</span><span class="nf">.unwrap</span><span class="p">()</span><span class="nf">.decode</span><span class="p">()</span><span class="nf">.unwrap</span><span class="p">();</span> <span class="k">let</span> <span class="n">out_file</span> <span class="o">=</span> <span class="nn">std</span><span class="p">::</span><span class="nn">fs</span><span class="p">::</span><span class="nn">File</span><span class="p">::</span><span class="nf">create</span><span class="p">(</span><span class="o">&amp;</span><span class="n">output</span><span class="p">)</span><span class="nf">.unwrap</span><span class="p">();</span> <span class="k">let</span> <span class="k">mut</span> <span class="n">jpg</span> <span class="o">=</span> <span class="nn">JpegEncoder</span><span class="p">::</span><span class="nf">new_with_quality</span><span class="p">(</span><span class="o">&amp;</span><span class="n">out_file</span><span class="p">,</span> <span class="n">quality</span> <span class="k">as</span> <span class="nb">u8</span><span class="p">);</span> <span class="n">jpg</span><span class="nf">.encode_image</span><span class="p">(</span><span class="o">&amp;</span><span class="n">img</span><span class="p">)</span><span class="nf">.unwrap</span><span class="p">();</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">output</span><span class="nf">.to_string</span><span class="p">())</span> <span class="p">}</span> <span class="c1">// add code...</span> <span class="nn">rustler</span><span class="p">::</span><span class="nd">init!</span><span class="p">(</span><span class="s">"Elixir.MyApp.RustImage"</span><span class="p">,</span> <span class="p">[</span><span class="n">add</span><span class="p">,</span> <span class="n">jpg</span><span class="p">]);</span> </code></pre></div><p>We also want to update our RustImage module to include a stub for <code>jpg/3</code>, but that&#39;s left as an exercise to the reader.</p> <p>Now let&#39;s try it out! <code>iex -S mix</code></p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight '><code>iex(1)&gt; MyApp.RustImage.jpg("input.png", "output.jpeg", 75) {:ok, "output.jpeg"} </code></pre></div><p>And boom! We&#39;ve converted a PNG to a JPEG with 75% quality.</p> <h2 id='being-a-good-beam-citizen' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#being-a-good-beam-citizen' aria-label='Anchor'></a>Being a Good BEAM Citizen</h2><p>There is one more thing we should consider here, and that&#39;s CPU load. While this function likely runs near instantly on our laptop, when deployed it might take longer on shared CPU/RAM.</p> <p>And because the BEAM runs our code directly, and it will lock an the runtime until it has completed running. What we mean by directly is that when using a NIF the beam will treat it like any other code, with the major caveat that it can&#39;t prempt the Rust code automatically.</p> <p>On the BEAM this is a big issue since the entire runtime expects to be able to switch contexts between millions of processes at any time.</p> <p>Luckily the Rustler and BEAM teams have thought of this and given us a solution. Simply change that macro on top of <code>jpeg</code> to this</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight diff'><code><span class="gd">-- #[rustler::nif] </span><span class="gi">++ #[rustler::nif(schedule = "DirtyCpu")] </span></code></pre></div><p>This tells the Rustler and BEAM to automagically schedule this in a way that won&#39;t block the entire world while it works. Again <em>amazing</em>, this is called a <a href="https://www.erlang.org/doc/man/erl_nif.html">DirtyNif</a> and is way more difficult to work with when you are manually using this via C.</p> <h2 id='deployment' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#deployment' aria-label='Anchor'></a>Deployment</h2><p>Deploying this to Fly.io with Docker isn&#39;t as automagic, we need to make some small changes so that our Docker environment can build Rust. First, update the Dockerfile by adding a build step right before our Elixir build step:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight docker'><code><span class="c">#... ARG stuff..</span> <span class="k">FROM</span><span class="w"> </span><span class="s">rust:1.68.0</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="s">rust</span> <span class="c"># install build dependencies</span> <span class="k">RUN </span>apt-get update <span class="nt">-y</span> <span class="o">&amp;&amp;</span> apt-get <span class="nb">install</span> <span class="nt">-y</span> build-essential git <span class="se">\ </span> <span class="o">&amp;&amp;</span> apt-get clean <span class="o">&amp;&amp;</span> <span class="nb">rm</span> <span class="nt">-f</span> /var/lib/apt/lists/<span class="k">*</span>_<span class="k">*</span> <span class="k">workdir</span><span class="s"> /app</span> <span class="k">COPY</span><span class="s"> native/rust_images ./</span> <span class="k">RUN </span>cargo rustc <span class="nt">--release</span> <span class="c">#..Elixir builder.....</span> <span class="c"># compile assets</span> <span class="k">RUN </span>mix assets.deploy <span class="c">#NEW STUFF</span> <span class="k">COPY</span><span class="s"> --from=rust /app/target/release/librust_images.so priv/native/librust_images.so</span> <span class="c">#/NEW</span> <span class="c"># Compile the release</span> <span class="k">RUN </span>mix compile </code></pre></div><p>Then update our <code>config/prod.exs</code> adding the following line:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="n">config</span> <span class="ss">:my_app</span><span class="p">,</span> <span class="no">MyApp</span><span class="o">.</span><span class="no">RustImage</span><span class="p">,</span> <span class="ss">crate:</span> <span class="ss">:rust_image</span><span class="p">,</span> <span class="ss">skip_compilation?:</span> <span class="no">true</span><span class="p">,</span> <span class="ss">load_from:</span> <span class="p">{</span><span class="ss">:my_app</span><span class="p">,</span> <span class="s2">"priv/native/librust_image"</span><span class="p">}</span> </code></pre></div><p>What we did here is build the library in its own Docker builder context, so it runs in parallel with the rest of our Docker steps and can be cache&#39;d easily. Then we told Rustler to skip compiling and to load it directly from our where we put it.</p> <p>And we&#39;re all set, simply <code>fly deploy</code> and you&#39;re off!</p> <h2 id='discussion' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#discussion' aria-label='Anchor'></a>Discussion</h2><p>We have only really scratched the surface about what is possible using the power of NIFs and Rust together. From <a href="https://github.com/elixir-nx/explorer">loading massive datasets to do science</a> to connecting via <a href="https://github.com/livinginthepast/specter">WebRTC</a>, the Rust community has built out an impressive suite of packages and tools that are also now available to us. And Rustler makes it possible!</p> <figure class="post-cta"> <figcaption> <h1> Fly.io ❤️ Elixir</h1><p> Fly.io is a great way to run your Phoenix LiveView app close to your users. It&#39;s really easy to get started. You can be running in minutes.</p><p><a class="button bg-white text-violet-600 hover:bg-opacity-75 hover:text-violet-700 transition-colors" href="https://fly.io/docs/elixir/"> Deploy a Phoenix app today!&nbsp;&nbsp;<span class='opacity:50'>&rarr;</span> </a></p> </figcaption><div class="image-container"> <img src="/static/images/cta-kitty.webp" srcset="/static/images/cta-kitty@2x.webp 2x" alt=""></div></figure></content>
</entry>
<entry>
<title>Can Phoenix Safely use the Zip Module?</title>
<link rel="alternate" href="https://fly.io/phoenix-files/can-phoenix-safely-use-the-zip-module/"/>
<id>https://fly.io/phoenix-files/can-phoenix-safely-use-the-zip-module/</id>
<published>2023-04-04T00:00:00+00:00</published>
<updated>2023-04-06T14:48:02+00:00</updated>
<content type="html"><p class="lead"> This post explores the OTP <code>:zip</code> module and tests it against two different types of zip attacks so we can learn how to safely use zip in our Elixir applications. Fly.io happens to be a great place to run Elixir applications. Check out how to <a href="/docs/elixir/">get started</a>. You could be up and running in minutes.</p><p>A lot of cool stuff is available in Erlang&#39;s <a href="https://www.erlang.org/doc/apps/stdlib/index.html">OTP Standard Library</a>. Elixir has the ability to directly use everything in OTP and that means we have a number of built-in features available to us. One of those features is the Erlang <code>:zip module</code>. As the name suggests, it is a &quot;utility for reading and creating &#39;zip&#39; archives.&quot;</p> <p>When we consider using a new library, tool or feature in our applications, we should always consider the security impact of it. Here we&#39;ll look deeper into how a zip file can be abused and test how we can safely use the OTP <code>:zip</code> module.</p> <h2 id='tl-dr' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#tl-dr' aria-label='Anchor'></a>TL;DR</h2><p>If you already know about <a href="#path-traversal-attack">Path Traversal attacks</a> and <a href="#zip-bombs-for-denial-of-service">Zip Bombs</a> then jump to the summarized <a href="#conclusion">Conclusion</a> for the 9 take home lessons.</p> <h2 id='why-accept-zip-files-from-users' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#why-accept-zip-files-from-users' aria-label='Anchor'></a>Why Accept Zip Files From Users?</h2><p>Why would we want to accept zip files at all? It&#39;s common to allow users to upload individual files like images, CSV files, documents to review, etc.</p> <p>Sometimes it&#39;s helpful to upload a large number of files at a time, especially when they are organized in nested folders. We want to make it easier for our users to upload whole directories of files and have it keep the directory organization once uploaded.</p> <h2 id='never-trust-user-input' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#never-trust-user-input' aria-label='Anchor'></a>Never Trust User Input</h2><p>The mantra we should have stuck in our heads is, &quot;never trust user input.&quot; Well, a zip file is a pretty complex container for a lot of different user inputs! What&#39;s unique about a zip file is that the container format itself can be abused too!</p> <p>If we&#39;re going to allow users to upload zip files, then we should know a bit about the types of security risks. Of course, the zip file may contain files with trojans, viruses, or other malware. <a href="https://en.wikipedia.org/wiki/Antivirus_software">Antivirus</a> software is purpose built-to detect those things. We&#39;re also concerned about how the zip structure itself might be malicious.</p> <p>Here are the two types of zip file attacks we will dig deeper into:</p> <ul> <li>The <a href="https://nakedsecurity.sophos.com/2018/06/06/the-zip-slip-vulnerability-what-you-need-to-know">Zip Slip</a> attack, which is a marketing name for a form of &quot;path traversal attack&quot;. </li><li>A <a href="https://en.wikipedia.org/wiki/Zip_bomb">Zip Bomb</a> attack, which creates tiny zip files that, when extracted, consume massive amounts of CPU and/or storage. </li></ul> <p>We&#39;ll take a look at these two attack types to find out what happens with the <code>:zip</code> module and what, if anything, we should do about it.</p> <h2 id='path-traversal-attack' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#path-traversal-attack' aria-label='Anchor'></a>Path Traversal Attack</h2><h3 id='what-is-a-path-traversal-attack' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#what-is-a-path-traversal-attack' aria-label='Anchor'></a>What Is a Path Traversal Attack?</h3><p>A <a href="https://owasp.org/www-community/attacks/Path_Traversal">path traversal attack</a> is described this way by the OWASP Foundation:</p> <blockquote> <p>A path traversal attack (also known as directory traversal) aims to access files and directories that are stored outside the web root folder. By manipulating variables that reference files with “dot-dot-slash (../)” sequences and its variations or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system including application source code or configuration and critical system files.</p> </blockquote> <p>With regard to zip files, a file can be stored in a zip archive with a relative path. It might look like this: <code>../../../../../../../etc/passwd</code>. By doing this, the zip creator is trying to escape from wherever the app is running and back out to the system root and then back down to try and replace a system configuration file.</p> <p>It is worth noting that the permissions used for the extract operation are the same permissions used for running our application. This is why we don&#39;t want to run our apps as root!</p> <h3 id='what-could-a-malicious-user-do' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#what-could-a-malicious-user-do' aria-label='Anchor'></a>What Could a Malicious User Do?</h3><p>In general, OWASP is talking about a path traversal attack being used to &quot;read&quot; private data, source code, keys, etc. Our situation is potentially more dangerous! We&#39;re accepting a user controlled zip file that, when extracted, creates new files on our server!</p> <p>What kinds of mischief could a user try to do?</p> <ul> <li>System level (if permissions allow for it) <ul> <li>Overwrite existing system files </li><li>Add malicious system files that add evil services </li></ul> </li><li>Application level <ul> <li>Overwrite application files like our config, ENV, JavaScript files, etc. </li><li>Add malicious application files that might be read and executed on restart. </li></ul> </li></ul> <h3 id='how-can-we-safely-test-this' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#how-can-we-safely-test-this' aria-label='Anchor'></a>How Can We Safely Test This?</h3><p>We&#39;ve decided we want to test that our application code isn&#39;t susceptible to this attack. To do that, we need a zip file that tries to get up to some mischief. While we <em>could</em> poke around the dark corners of the interwebs for malicious zip files (which I&#39;m certain we&#39;d find), we&#39;d rather use something a lot safer!</p> <p>Let&#39;s create our own zip file that tries to use relative file paths to escape where the application is running. Fortunately, we can safely create our file using the <code>:zip</code> module.</p> <p>To get started, we need a file to zip and it works best if it&#39;s in the desired target location.</p> <p>The following command creates an empty file in <code>/etc/</code> named <code>evil.txt</code>.</p> <aside class="right-sidenote"> NOTE: This command assumes a Linux host.</aside><div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight '><code>sudo touch /etc/evil.txt </code></pre></div><p>The test is if we can get this file created on our system when we extract the zip archive.</p> <p>Using an IEx shell, run your own version of the following command:</p> <aside class="right-sidenote"> Erlang functions expect a string to be a <code>charlist</code> as opposed to the Unicode strings that Elixir works with by default. The <a href="https://hexdocs.pm/elixir/Kernel.html#sigil_c/2"><code>~c</code> sigil</a> is really handy for converting an Elixir string to a <code>charlist</code> for passing arguments.</aside><div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="ss">:zip</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="sx">~c"/home/mark/evil.zip"</span><span class="p">,</span> <span class="p">[</span><span class="sx">~c"../../../../../../etc/evil.txt"</span><span class="p">])</span> <span class="c1">#=&gt; {:ok, '/home/mark/evil.zip'}</span> </code></pre></div><p>This creates a zip file with a relative path to our malicious file. What&#39;s interesting about this attack is you don&#39;t have to know how deep in the tree you are, just add more <code>../</code> entries. When we are at the root directory <code>/</code>, then a <code>cd ../</code> doesn&#39;t error and we remain at the root directory. For our test, it just needs to be enough to get out of our application to the root.</p> <p>After creating the zip file, we can inspect it with a regular archive program. This is how the <a href="https://apps.kde.org/ark/">Ark</a> program handles our zip file. We see this warning:</p> <p><img src="/phoenix-files/2023-04-04/01-ark-zip-view.png?card&amp;center" alt="Ark compression program showing warning message refusing to open a zip file" /></p> <p>Yay! We&#39;ve got our safe yet suspicious zip file.</p> <h3 id='what-happens-when-we-extract-our-evil-zip' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#what-happens-when-we-extract-our-evil-zip' aria-label='Anchor'></a>What Happens When We Extract Our Evil Zip?</h3><p>The question this all leads up to is this:</p> <blockquote> <p>If <code>:zip</code> can <em>create</em> a malicious zip file, will it <em>extract</em> it and be a potential vulnerability for us?</p> </blockquote> <p>To test what happens, let&#39;s first use the <code>:zip.extract/1</code> function.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="ss">:zip</span><span class="o">.</span><span class="n">extract</span><span class="p">(</span><span class="sx">~c"/home/mark/evil.zip"</span><span class="p">)</span> <span class="mi">13</span><span class="p">:</span><span class="mi">56</span><span class="p">:</span><span class="mf">32.771</span> <span class="p">[</span><span class="n">error</span><span class="p">]</span> <span class="no">Illegal</span> <span class="ss">path:</span> <span class="o">../../../../../</span><span class="n">etc</span><span class="o">/</span><span class="n">evil</span><span class="o">.</span><span class="n">txt</span><span class="p">,</span> <span class="n">extracting</span> <span class="ow">in</span> <span class="o">./</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="p">[</span><span class="s1">'evil.txt'</span><span class="p">]}</span> </code></pre></div><p>We give it a path to the zip to extract and the &quot;destination&quot; is wherever our current working directory is.</p> <p>Extracting <code>evil.zip</code> logged an error message but returned an <code>:ok</code> tuple because it <em>did</em> extract the file, but it put it in the <code>./</code> directory. For our application, this is the root of our app.</p> <p>Ruh roh!</p> <p>That means automatically, <code>:zip.extract</code> prevents it from extracting to our <strong class='font-semibold text-navy'>system root</strong>, but our <strong class='font-semibold text-navy'>application root</strong> is potentially still vulnerable.</p> <p>When I ran IEx from a new terminal window, it started out at <code>/home/mark</code>. I can see the file <code>evil.txt</code> was extracted to <code>/home/mark/evil.txt</code>.</p> <p>This means unless we take extra precautions, our application files could be potentially affected by the contents of a zip file.</p> <p>What we <em>want</em> is to extract the files to a specified location and make sure they can&#39;t escape from there.</p> <h3 id='controlling-the-extraction-location' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#controlling-the-extraction-location' aria-label='Anchor'></a>Controlling the Extraction Location</h3><p>The <code>:zip.extract/2</code> function takes &quot;options&quot; as the 2nd argument. One of those options is <code>:cwd</code> for setting the &quot;current working directory.&quot; We pass the options as a keyword list and any strings need to be a <code>charlist</code>. Let&#39;s test it out.</p> <p>First, I&#39;m running IEx from my home directory. We can create a <code>temp</code> directory and set the <code>cwd</code> to that.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="ss">:zip</span><span class="o">.</span><span class="n">extract</span><span class="p">(</span><span class="sx">~c"/home/mark/evil.zip"</span><span class="p">,</span> <span class="ss">cwd:</span> <span class="sx">~c"./temp/"</span><span class="p">)</span> <span class="mi">14</span><span class="p">:</span><span class="mi">46</span><span class="p">:</span><span class="mf">42.468</span> <span class="p">[</span><span class="n">error</span><span class="p">]</span> <span class="no">Illegal</span> <span class="ss">path:</span> <span class="o">./</span><span class="n">temp</span><span class="o">/../../../../../</span><span class="n">etc</span><span class="o">/</span><span class="n">evil</span><span class="o">.</span><span class="n">txt</span><span class="p">,</span> <span class="n">extracting</span> <span class="ow">in</span> <span class="o">./</span><span class="n">temp</span><span class="o">/</span> <span class="c1">#=&gt; {:ok, ['./temp/evil.txt']}</span> </code></pre></div><p>The result was it didn&#39;t extract <code>evil.txt</code> to the system folder, but it also wasn&#39;t able to escape our <code>temp/</code> directory. We can find the file at <code>/home/mark/temp/evil.txt</code>.</p> <p>Now, did it fail because the path to <code>/etc</code> was rejected? To be sure, let&#39;s try another test.</p> <h3 id='what-if-the-path-is-valid-but-outside-of-the-working-directory' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#what-if-the-path-is-valid-but-outside-of-the-working-directory' aria-label='Anchor'></a>What if the Path Is Valid but Outside of the Working Directory?</h3><p>Let&#39;s create a separate <code>evil2.txt</code> file that lives in our home directory and create <code>evil2.zip</code>.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight '><code>touch /home/mark/evil2.txt </code></pre></div><p>Our goal with this test is to see if we can escape the working directory to get back to our application root.</p> <p>IEx has some handy directory functions we can use to move around. This means we don&#39;t even have to leave IEx! Inside IEx, we can write:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="n">cd</span> <span class="s2">"temp"</span> <span class="c1">#=&gt; /home/mark/temp</span> </code></pre></div><p>Now we&#39;re in the right place, let&#39;s add the <code>evil2.txt</code> file using the relative location.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="ss">:zip</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="sx">~c"/home/mark/evil2.zip"</span><span class="p">,</span> <span class="p">[</span><span class="sx">~c"../evil2.txt"</span><span class="p">])</span> <span class="c1">#=&gt; {:ok, '/home/mark/evil2.zip'}</span> </code></pre></div><p>With our zip file prepped, let&#39;s ensure we delete the <code>evil2.txt</code> file so we can tell if it get&#39;s extracted. Also, let&#39;s <code>cd</code> back to our home directory.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="n">cd</span> <span class="s2">".."</span> <span class="c1">#=&gt; /home/mark</span> </code></pre></div><p>Now, can we escape the <code>cwd</code> directory when we have permissions and it&#39;s valid?</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="ss">:zip</span><span class="o">.</span><span class="n">extract</span><span class="p">(</span><span class="sx">~c"/home/mark/evil2.zip"</span><span class="p">,</span> <span class="ss">cwd:</span> <span class="sx">~c"./temp/"</span><span class="p">)</span> <span class="mi">15</span><span class="p">:</span><span class="mi">08</span><span class="p">:</span><span class="mf">54.878</span> <span class="p">[</span><span class="n">error</span><span class="p">]</span> <span class="no">Illegal</span> <span class="ss">path:</span> <span class="o">./</span><span class="n">temp</span><span class="o">/../</span><span class="n">evil2</span><span class="o">.</span><span class="n">txt</span><span class="p">,</span> <span class="n">extracting</span> <span class="ow">in</span> <span class="o">./</span><span class="n">temp</span><span class="o">/</span> <span class="c1">#=&gt; {:ok, ['./temp/evil2.txt']}</span> </code></pre></div><p>Phew! Even when everything is otherwise valid, <code>:zip.extract/2</code> doesn&#39;t allow us to escape the <code>cwd</code> directory. A quick check of our file system confirms the file was extracted to the <code>temp</code> directory. We learned that the <code>:cwd</code> option is successful at keeping extractions contained.</p> <h3 id='early-detection-and-aborting' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#early-detection-and-aborting' aria-label='Anchor'></a>Early Detection and Aborting</h3><p>The Ark archive program took the approach of detecting a relative path in the zip archive and not even letting us extract it. We can do the same!</p> <p>The <code>:zip.list_dir/1</code> function lists information about the archive file&#39;s contents. Here&#39;s what it looks like for <code>evil2.zip</code>.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="ss">:zip</span><span class="o">.</span><span class="n">list_dir</span><span class="p">(</span><span class="sx">~c"/home/mark/evil2.zip"</span><span class="p">)</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="p">[</span> <span class="p">{</span><span class="ss">:zip_comment</span><span class="p">,</span> <span class="p">[]},</span> <span class="p">{</span><span class="ss">:zip_file</span><span class="p">,</span> <span class="s1">'../evil2.txt'</span><span class="p">,</span> <span class="p">{</span><span class="ss">:file_info</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="ss">:regular</span><span class="p">,</span> <span class="ss">:read_write</span><span class="p">,</span> <span class="p">{{</span><span class="mi">2023</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">28</span><span class="p">},</span> <span class="p">{</span><span class="mi">14</span><span class="p">,</span> <span class="mi">53</span><span class="p">,</span> <span class="mi">27</span><span class="p">}},</span> <span class="p">{{</span><span class="mi">2023</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">28</span><span class="p">},</span> <span class="p">{</span><span class="mi">14</span><span class="p">,</span> <span class="mi">53</span><span class="p">,</span> <span class="mi">27</span><span class="p">}},</span> <span class="p">{{</span><span class="mi">2023</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">28</span><span class="p">},</span> <span class="p">{</span><span class="mi">14</span><span class="p">,</span> <span class="mi">53</span><span class="p">,</span> <span class="mi">27</span><span class="p">}},</span> <span class="mi">54</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">},</span> <span class="p">[],</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">}</span> <span class="p">]}</span> </code></pre></div><p>All we care about is entries that are a <code>:zip_file</code> and we only want the file path. With a little massaging, we can get our list of files back. Let&#39;s see how we can get that data out.</p> <aside class="right-sidenote"> The <a href="https://hexdocs.pm/elixir/Kernel.html#to_string/1">Kernel.to_string/1</a> function easily converts a returned Erlang charlist to an Elixir string. Here we see that as <code>to_string(path)</code>.</aside><div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="c1"># read the zip file's info</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">zip_info</span><span class="p">}</span> <span class="o">=</span> <span class="ss">:zip</span><span class="o">.</span><span class="n">list_dir</span><span class="p">(</span><span class="sx">~c"/home/mark/evil2.zip"</span><span class="p">)</span> <span class="c1"># get all the file names as strings</span> <span class="n">file_names</span> <span class="o">=</span> <span class="no">Enum</span><span class="o">.</span><span class="n">reduce</span><span class="p">(</span><span class="n">zip_info</span><span class="p">,</span> <span class="p">[],</span> <span class="k">fn</span> <span class="p">{</span><span class="ss">:zip_file</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">_</span><span class="p">},</span> <span class="n">acc</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">to_string</span><span class="p">(</span><span class="n">path</span><span class="p">)</span> <span class="o">|</span> <span class="n">acc</span><span class="p">]</span> <span class="n">_other</span><span class="p">,</span> <span class="n">acc</span> <span class="o">-&gt;</span> <span class="n">acc</span> <span class="k">end</span><span class="p">)</span> <span class="c1">#=&gt; ["../evil2.txt"]</span> <span class="c1"># test if any files contain "../". If so, we can error.</span> <span class="no">Enum</span><span class="o">.</span><span class="n">any?</span><span class="p">(</span><span class="n">file_names</span><span class="p">,</span> <span class="o">&amp;</span><span class="p">(</span><span class="no">String</span><span class="o">.</span><span class="n">contains?</span><span class="p">(</span><span class="nv">&amp;1</span><span class="p">,</span> <span class="s2">"../"</span><span class="p">)))</span> <span class="c1">#=&gt; true</span> </code></pre></div><p>Using the above code, we can get the names of all the files in the zip archive and detect if <em>any</em> of them have a <code>../</code> in them. If so, we could reject the entire upload with an error.</p> <h3 id='does-antivirus-recognize-a-path-traversal' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#does-antivirus-recognize-a-path-traversal' aria-label='Anchor'></a>Does Antivirus Recognize a Path Traversal?</h3><p>For this test, we&#39;ll use the open source <a href="https://www.clamav.net/">ClamAV</a> (Linux based virus detection software). Different products and services will of course behave differently.</p> <p>What happens when we scan our path traversal zip file?</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight '><code>$ clamscan evil2.zip /home/mark/temp/evil2.zip: OK </code></pre></div><p>The results of our scan were: &quot;all clear!&quot; Ooops. Well, that&#39;s good to know.</p> <p>Then important thing we learned here is that <code>:zip</code> prevents escaping the working directory and we really should be specifying an explicit working directory using <code>:cwd</code>.</p> <p>Now let&#39;s explore another type of zip file attack.</p> <h2 id='zip-bombs-for-denial-of-service' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#zip-bombs-for-denial-of-service' aria-label='Anchor'></a>Zip Bombs for Denial of Service</h2><p>Compression programs use algorithms to look for ways to squeeze the extra space from a file. A zip bomb exploits the algorithm to create a very small file that expands to something enormous. It can be used as a Denial-of-Service (DOS) attack against a server.</p> <p>For some more detail on the type of Zip Bomb we&#39;re using here, refer to <a href="https://www.bamsoftware.com/hacks/zipbomb/">this excellent technical breakdown</a>. Here&#39;s a snippet about what it is:</p> <blockquote> <p>[…] a <em>non-recursive</em> <a href="https://en.wikipedia.org/wiki/Zip_bomb">zip bomb</a> achieves a high compression ratio by overlapping files inside the zip container. &quot;Non-recursive&quot; means that it does not rely on a decompressor&#39;s recursively unpacking zip files nested within zip files: it expands fully after a single round of decompression.</p> </blockquote> <p>Here&#39;s the short of it. The following list shows how big 3 different zips are capable of expanding:</p> <ul> <li>42 kB zip → 5.5 GB </li><li>10 MB zip → 281 TB </li><li>46 MB zip → 4.5 PB (Zip64, less compatible) </li></ul> <p>Yikes! We certainly don&#39;t want those expanding on our servers consuming CPU and massive disk space!</p> <h3 id='how-can-we-test-this' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#how-can-we-test-this' aria-label='Anchor'></a>How Can We Test This?</h3><p>For this test, we won&#39;t try to create the zip archive ourselves. Fortunately for us, there are safe examples available online. This <a href="https://www.bamsoftware.com/hacks/zipbomb/">previously linked resource</a> has them for us. In our case, we&#39;ll stick with the smallest version, <code>zbsm.zip</code>… just in case. 🙂</p> <h3 id='what-does-it-look-like-to-an-archive-program' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#what-does-it-look-like-to-an-archive-program' aria-label='Anchor'></a>What Does It Look Like to an Archive Program?</h3><p>Using Ark again, we can open the 42kB file and see it how the archive program sees it.</p> <p><img src="/phoenix-files/2023-04-04/02-ark-zip-view.png?card&amp;center" alt="Ark compression application showing reported contents of a small zip bomb file" /></p> <p>Wow! That little zip really packs it in there!</p> <p>We should also note that the application doesn&#39;t complain about this file. We can extract individual files and it happily does it.</p> <p>Okay, so what does the OTP <code>:zip</code> module do with this?</p> <h3 id='what-happens-when-we-extract-the-zip-bomb' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#what-happens-when-we-extract-the-zip-bomb' aria-label='Anchor'></a>What Happens When We Extract the Zip Bomb?</h3><p>Using the OTP <code>:zip.extract/1</code> function, what happens when we extract the zip bomb file?</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight '><code>iex(1)&gt; :zip.extract(~c"/home/mark/temp/zbsm.zip") BREAK: (a)bort (A)bort with dump (c)ontinue (p)roc info (i)nfo (l)oaded (v)ersion (k)ill (D)b-tables (d)istribution ^C^C </code></pre></div><p>Gah! Abort! Abort! It began chugging away on the file, extracting numerous large files! After seeing the pause with the IEx prompt, I killed it and found it consumed about 800MB of disk. Not cool!</p> <p>So <code>:zip</code> is susceptible to this attack.</p> <h3 id='what-does-zip-list_dir-1-tell-us' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#what-does-zip-list_dir-1-tell-us' aria-label='Anchor'></a>What Does <code>:zip.list_dir/1</code> Tell Us?</h3><p>If we run <code>:zip.list_dir/1</code> on the zip, what do we see?</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="n">iex</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">&gt;</span> <span class="ss">:zip</span><span class="o">.</span><span class="n">list_dir</span><span class="p">(</span><span class="sx">~c"/home/mark/temp/zbsm.zip"</span><span class="p">)</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="p">[</span> <span class="p">{</span><span class="ss">:zip_comment</span><span class="p">,</span> <span class="p">[]},</span> <span class="p">{</span><span class="ss">:zip_file</span><span class="p">,</span> <span class="s1">'0'</span><span class="p">,</span> <span class="p">{</span><span class="ss">:file_info</span><span class="p">,</span> <span class="mi">21849182</span><span class="p">,</span> <span class="ss">:regular</span><span class="p">,</span> <span class="ss">:read_write</span><span class="p">,</span> <span class="p">{{</span><span class="mi">1982</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">8</span><span class="p">},</span> <span class="p">{</span><span class="mi">13</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">0</span><span class="p">}},</span> <span class="p">{{</span><span class="mi">1982</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">8</span><span class="p">},</span> <span class="p">{</span><span class="mi">13</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">0</span><span class="p">}},</span> <span class="p">{{</span><span class="mi">1982</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">8</span><span class="p">},</span> <span class="p">{</span><span class="mi">13</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">0</span><span class="p">}},</span> <span class="mi">54</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">},</span> <span class="p">[],</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">30357</span><span class="p">},</span> <span class="p">{</span><span class="ss">:zip_file</span><span class="p">,</span> <span class="s1">'1'</span><span class="p">,</span> <span class="p">{</span><span class="ss">:file_info</span><span class="p">,</span> <span class="mi">21849151</span><span class="p">,</span> <span class="ss">:regular</span><span class="p">,</span> <span class="ss">:read_write</span><span class="p">,</span> <span class="p">{{</span><span class="mi">1982</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">8</span><span class="p">},</span> <span class="p">{</span><span class="mi">13</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">0</span><span class="p">}},</span> <span class="p">{{</span><span class="mi">1982</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">8</span><span class="p">},</span> <span class="p">{</span><span class="mi">13</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">0</span><span class="p">}},</span> <span class="p">{{</span><span class="mi">1982</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">8</span><span class="p">},</span> <span class="p">{</span><span class="mi">13</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">0</span><span class="p">}},</span> <span class="mi">54</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">},</span> <span class="p">[],</span> <span class="mi">36</span><span class="p">,</span> <span class="mi">30321</span><span class="p">},</span> <span class="o">...</span> </code></pre></div><p>We see a list of the files like what Ark displayed. With that, we see the decompressed file sizes like <code>21849182</code> which is 21MB. We <em>could</em> examine all the files contained in the zip file and determine the total disk space it would consume and make a judgement call about what&#39;s &quot;too big&quot;.</p> <p>However, what we should perhaps consider that maybe we can&#39;t foresee all the ways a zip upload might be malicious. Will AV detect it?</p> <h3 id='does-antivirus-recognize-our-zip-bomb' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#does-antivirus-recognize-our-zip-bomb' aria-label='Anchor'></a>Does Antivirus Recognize Our Zip Bomb?</h3><p>We&#39;ll again turn to the open source <a href="https://www.clamav.net/">ClamAV</a> (Linux based virus detection software) for this test. What happens when we scan <code>zbsm.zip</code>, our small Zip Bomb file?</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight '><code>$ clamscan zbsm.zip /home/mark/temp/zbsm.zip: Heuristics.Zip.OverlappingFiles FOUND </code></pre></div><p>Well that&#39;s good! ClamAV identified it as a malicious zip file.</p> <p>With AV, at least we have a mitigation strategy.</p> <h2 id='conclusion' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#conclusion' aria-label='Anchor'></a>Conclusion</h2><p>After running our experiments and playing with the <code>:zip</code> module, what did we learn?</p> <ol> <li>Elixir has easy access to powerful OTP features like the <a href="https://www.erlang.org/doc/man/zip.html"><code>:zip</code> module</a>. </li><li>Antivirus software should be used to help protect our systems from malicious zip files. </li><li>Antivirus may not detect path traversal attempts in zip files. </li><li><code>:zip.extract/2</code> is susceptible to Zip Bombs. </li><li><code>:zip.create/2</code> allows us to create zip files. We can even create them with relative paths. </li><li><code>:zip.extract/2</code> detects <code>../</code> paths and overrides the file path dropping it in our current working directory. </li><li>We can specify the <code>:cwd</code> in the <code>:zip.extract/2</code> options to specify a working directory. </li><li>Relative path files are safely contained inside our working directory. </li><li><code>:zip.list_dir/1</code> lists all the files in the zip so we can check for the existence of relative paths and abort early. We can also see the decompressed size on disk for the files. </li></ol> <p>The answer to our question &quot;can Phoenix safely use the zip module?&quot; ends up being &quot;yes, but with extra precautions.&quot; We should isolate extractions using the <code>:cwd</code> option and, keeping true to the mantra of &quot;never trust user input&quot;, we should AV scan a zip file first.</p> <p>An added benefit of AV scans is it also checks the <em>contained</em> files for malware.</p> <p>Another precaution could be to extract the files on a dedicated machine that runs in a <a href="https://en.wikipedia.org/wiki/Sandbox_(computer_security)">sandbox</a> mode. Hey, that happens to be a great use for an immutable <a href="https://fly.io/docs/machines/">Fly.io machine</a>!</p> <p>Stay safe out there!</p> <figure class="post-cta"> <figcaption> <h1> Fly.io ❤️ Elixir</h1><p> Fly.io is a great way to run your Phoenix LiveView app close to your users. It&#39;s really easy to get started. You can be running in minutes.</p><p><a class="button bg-white text-violet-600 hover:bg-opacity-75 hover:text-violet-700 transition-colors" href="https://fly.io/docs/elixir/"> Deploy a Phoenix app today!&nbsp;&nbsp;<span class='opacity:50'>&rarr;</span> </a></p> </figcaption><div class="image-container"> <img src="/static/images/cta-turtle.webp" srcset="/static/images/cta-turtle@2x.webp 2x" alt=""></div></figure></content>
</entry>
<entry>
<title>Crafting your own Static Site Generator using Phoenix</title>
<link rel="alternate" href="https://fly.io/phoenix-files/crafting-your-own-static-site-generator-using-phoenix/"/>
<id>https://fly.io/phoenix-files/crafting-your-own-static-site-generator-using-phoenix/</id>
<published>2023-03-30T00:00:00+00:00</published>
<updated>2023-04-06T14:48:02+00:00</updated>
<content type="html"><p class="lead"> This is a post about building up your own Static Site Generator from scratch. If you want to deploy your Phoenix LiveView app right now, then check out how to <a href="/docs/elixir/">get started</a>. You could be up and running in minutes.</p><p>The year is 2023, you have <em>many</em> options for building a Static Website. From the OG Jekyll to literally hundreds of JavaScript based options to people suggesting you should just craft HTML by hand. All of these solutions are correct and good, and you know what? You should use them!</p> <p>End of post, no need to read on.</p> <p>That said... a static website is really just HTML, CSS and JS files. In Elixir, we have <em>wonderful</em> tools for doing that. So let&#39;s do it!</p> <h2 id='the-map' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#the-map' aria-label='Anchor'></a>The Map</h2><p>This post is going to assume you are at least a beginner to intermediate in Elixir.</p> <p>Starting from scratch with an empty Elixir project, we will build a basic personal website and blog. We&#39;ll add each dependency as we need them and integrate them. We&#39;ll be using well known libraries, and I think we&#39;ll be surprised by how far we get by just following our intuition!</p> <p>So let&#39;s begin with the most basic elixir project:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight '><code>$ mix new personal_website </code></pre></div><div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight '><code>* creating README.md * creating .formatter.exs * creating .gitignore * creating mix.exs * creating lib * creating lib/personal_website.ex * creating test * creating test/test_helper.exs * creating test/personal_website_test.exs Your Mix project was created successfully. You can use "mix" to compile it, test it, and more: cd personal_website mix test </code></pre></div><p>Instead of running the tests, I recommend removing the <code>test/personal_website_test.exs</code> because we&#39;re building a personal website. I also like to do a <code>git init &amp;&amp; git commit -am &quot;Make it so&quot;</code>, just in case I mess up and want to undo, or show diffs in a blog post.</p> <p>Let&#39;s start with our blog content.</p> <h3 id='content' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#content' aria-label='Anchor'></a>Content</h3><p>We want to author in Markdown and publish to HTML, luckily there is a handy library <a href="https://hexdocs.pm/nimble_publisher/NimblePublisher.html">NimblePublisher</a>, just for that, adding to our <code>mix.exs</code> file:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight diff'><code><span class="p">defp deps do </span> [ {:nimble_publisher, "~&gt; 0.1.3"} ] <span class="p">end </span></code></pre></div><p>NimblePublisher is a <a href="https://dashbit.co/">Dashbit</a> library that will read markdown from a directory, parse the front matter, produce markdown, and build up data structures for creating your own content site. It does not however render it to HTML for you or building any sort of routing.</p> <p>It essentially acts like a compile time database for interfacing with a directory of Markdown.</p> <p>Luckily for us their docs walk through building a blog and provide some sensible defaults, we want a <code>/posts/YEAR/MONTH-DAY-ID.md</code> file name, and we want to parse that with NimblePublisher into a Post struct. Let&#39;s create our first module,<code>lib/blog.ex</code></p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">defmodule</span> <span class="no">PersonalWebsite</span><span class="o">.</span><span class="no">Blog</span> <span class="k">do</span> <span class="n">alias</span> <span class="no">PersonalWebsite</span><span class="o">.</span><span class="no">Post</span> <span class="kn">use</span> <span class="no">NimblePublisher</span><span class="p">,</span> <span class="ss">build:</span> <span class="no">Post</span><span class="p">,</span> <span class="ss">from:</span> <span class="s2">"./posts/**/*.md"</span><span class="p">,</span> <span class="ss">as:</span> <span class="ss">:posts</span><span class="p">,</span> <span class="ss">highlighters:</span> <span class="p">[</span><span class="ss">:makeup_elixir</span><span class="p">,</span> <span class="ss">:makeup_erlang</span><span class="p">]</span> <span class="nv">@posts</span> <span class="no">Enum</span><span class="o">.</span><span class="n">sort_by</span><span class="p">(</span><span class="nv">@posts</span><span class="p">,</span> <span class="o">&amp;</span> <span class="nv">&amp;1</span><span class="o">.</span><span class="n">date</span><span class="p">,</span> <span class="p">{</span><span class="ss">:desc</span><span class="p">,</span> <span class="no">Date</span><span class="p">})</span> <span class="c1"># And finally export them</span> <span class="k">def</span> <span class="n">all_posts</span><span class="p">,</span> <span class="k">do</span><span class="p">:</span> <span class="nv">@posts</span> <span class="k">end</span> </code></pre></div><p>Here we configure NimblePublisher which will read each markdown file <code>from</code> the posts directory and call the <code>Post.build/3</code> function on each. Then finally it will assign to the module attribute <code>@posts</code> configured with <code>:as</code>. Then we sort the <code>@posts</code> by date and define a function that returns <code>all_posts</code>.</p> <p>Take note that this is all happening at <em>compile</em> time and is embedded into our compiled module. Meaning accessing it will be lighting quick!</p> <p>The keen eye&#39;d will be asking, &quot;So what about post? And <code>build/3</code>?&quot; We define those in <code>lib/post.ex</code>:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">defmodule</span> <span class="no">PersonalWebsite</span><span class="o">.</span><span class="no">Post</span> <span class="k">do</span> <span class="nv">@enforce_keys</span> <span class="p">[</span><span class="ss">:id</span><span class="p">,</span> <span class="ss">:author</span><span class="p">,</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">:body</span><span class="p">,</span> <span class="ss">:description</span><span class="p">,</span> <span class="ss">:tags</span><span class="p">,</span> <span class="ss">:date</span><span class="p">,</span> <span class="ss">:path</span><span class="p">]</span> <span class="k">defstruct</span> <span class="p">[</span><span class="ss">:id</span><span class="p">,</span> <span class="ss">:author</span><span class="p">,</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">:body</span><span class="p">,</span> <span class="ss">:description</span><span class="p">,</span> <span class="ss">:tags</span><span class="p">,</span> <span class="ss">:date</span><span class="p">,</span> <span class="ss">:path</span><span class="p">]</span> <span class="k">def</span> <span class="n">build</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="n">attrs</span><span class="p">,</span> <span class="n">body</span><span class="p">)</span> <span class="k">do</span> <span class="n">path</span> <span class="o">=</span> <span class="no">Path</span><span class="o">.</span><span class="n">rootname</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span> <span class="p">[</span><span class="n">year</span><span class="p">,</span> <span class="n">month_day_id</span><span class="p">]</span> <span class="o">=</span> <span class="n">path</span> <span class="o">|&gt;</span> <span class="no">Path</span><span class="o">.</span><span class="n">split</span><span class="p">()</span> <span class="o">|&gt;</span> <span class="no">Enum</span><span class="o">.</span><span class="n">take</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span> <span class="n">path</span> <span class="o">=</span> <span class="n">path</span> <span class="o">&lt;&gt;</span> <span class="s2">".html"</span> <span class="p">[</span><span class="n">month</span><span class="p">,</span> <span class="n">day</span><span class="p">,</span> <span class="n">id</span><span class="p">]</span> <span class="o">=</span> <span class="no">String</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="n">month_day_id</span><span class="p">,</span> <span class="s2">"-"</span><span class="p">,</span> <span class="ss">parts:</span> <span class="mi">3</span><span class="p">)</span> <span class="n">date</span> <span class="o">=</span> <span class="no">Date</span><span class="o">.</span><span class="n">from_iso8601!</span><span class="p">(</span><span class="s2">"</span><span class="si">#{</span><span class="n">year</span><span class="si">}</span><span class="s2">-</span><span class="si">#{</span><span class="n">month</span><span class="si">}</span><span class="s2">-</span><span class="si">#{</span><span class="n">day</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span> <span class="n">struct!</span><span class="p">(</span><span class="bp">__MODULE__</span><span class="p">,</span> <span class="p">[</span><span class="ss">id:</span> <span class="n">id</span><span class="p">,</span> <span class="ss">date:</span> <span class="n">date</span><span class="p">,</span> <span class="ss">body:</span> <span class="n">body</span><span class="p">,</span> <span class="ss">path:</span> <span class="n">path</span><span class="p">]</span> <span class="o">++</span> <span class="no">Map</span><span class="o">.</span><span class="n">to_list</span><span class="p">(</span><span class="n">attrs</span><span class="p">))</span> <span class="k">end</span> <span class="k">end</span> </code></pre></div><p>and before we dive into this, add a test post to <code>posts/2023/04-01-pranks.md</code>:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight md'><code>%{ title: "Pranks!", author: "Jason Stiebs", tags: ~w(april fools), description: "Let's learn how to do pranks!" <span class="gh">} --- </span> <span class="gu">## Gotcha! Not a real post.</span> This is very funny. </code></pre></div><p>During compile time, NimblePublisher will grab every file from <code>/posts/**/*.md</code> and apply the <code>Post.build/3</code> function to it. The function <code>build/3</code> is expected to return a data structure representing a post. In this case, we chose a struct with all the same fields as our front matter and a couple extra we parse from the filename.</p> <p>Note that NimblePublisher expects the markdown to have a front-matter formatted as an Elixir Map, followed by <code>---</code>, finally followed by the post Markdown.</p> <p>The <code>build/3</code> function pulls apart the path to collect the <code>year</code>, <code>month</code>, <code>day</code> and <code>id</code> from the file name and builds a <code>Date</code> struct. It also generates the final path URL, appending <code>.html</code>.</p> <p>Let&#39;s test this in <code>iex</code> and see what we&#39;ve got:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight bash'><code><span class="nv">$ </span>iex <span class="nt">-S</span> mix iex<span class="o">(</span>1<span class="o">)&gt;</span> PersonalWebsite.Blog.all_posts<span class="o">()</span> <span class="o">[</span> %PersonalWebsite.Post<span class="o">{</span> <span class="nb">id</span>: <span class="s2">"pranks"</span>, author: <span class="s2">"Jason Stiebs"</span>, title: <span class="s2">"Pranks!"</span>, body: <span class="s2">"&lt;h2&gt;</span><span class="se">\n</span><span class="s2">Gotcha!&lt;/h2&gt;</span><span class="se">\n</span><span class="s2">&lt;p&gt;</span><span class="se">\n</span><span class="s2">Not a real post. This is very funny.&lt;/p&gt;</span><span class="se">\n</span><span class="s2">"</span>, description: <span class="s2">"Let's learn how to do pranks!"</span>, tags: <span class="o">[</span><span class="s2">"april"</span>, <span class="s2">"fools"</span><span class="o">]</span>, <span class="nb">date</span>: ~D[2023-04-01], path: <span class="s2">"posts/2023/04-01-pranks.html"</span> <span class="o">}</span> <span class="o">]</span> </code></pre></div><p>Beautiful.</p> <p>From here on out, we have our &quot;context&quot; with all of our posts. If we want a filtered set, or to add paging, we&#39;d do it by adding functions to our <code>Blog</code> and using the built-in <code>Enum</code> functions. Adding more files to <code>/posts</code> will result in this list having one most <code>Post</code>&#39;s, it&#39;s that simple!</p> <aside class="callout"> Don&#39;t worry about scaling this, because if you <em>do</em> hit the point where this takes up too much memory, you will have people who are eager to fix this for you, because they will be tired of generating markdown files. That said, since this is compiled, the cost is paid once at compile time so no big deal!</aside><h2 id='rendering-html' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#rendering-html' aria-label='Anchor'></a>Rendering HTML</h2><p>Ever since they were announced, I&#39;ve really <em>loved</em> building HTML as Phoenix Components. And even though we only be using 1/10th of the functionality, let&#39;s pull in PhoenixLiveView so we can use HEEX. Editing <code>mix.exs</code>:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight diff'><code><span class="p">defp deps do </span> [ <span class="gd">- {:nimble_publisher, "~&gt; 0.1.3"} </span><span class="gi">+ {:nimble_publisher, "~&gt; 0.1.3"}, + {:phoenix_live_view, "~&gt; 0.18.2"} </span></code></pre></div><p>Now to make a new module responsible for rendering our website into HTML, open up <code>lib/personal_site.ex</code>:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">defmodule</span> <span class="no">PersonalWebsite</span> <span class="k">do</span> <span class="kn">use</span> <span class="no">Phoenix</span><span class="o">.</span><span class="no">Component</span> <span class="kn">import</span> <span class="no">Phoenix</span><span class="o">.</span><span class="no">HTML</span> <span class="k">def</span> <span class="n">post</span><span class="p">(</span><span class="n">assigns</span><span class="p">)</span> <span class="k">do</span> <span class="sx">~H""</span><span class="s2">" &lt;.layout&gt; &lt;%= raw @post.body %&gt; &lt;/.layout&gt; """</span> <span class="k">end</span> <span class="k">def</span> <span class="n">index</span><span class="p">(</span><span class="n">assigns</span><span class="p">)</span> <span class="k">do</span> <span class="sx">~H""</span><span class="s2">" &lt;.layout&gt; &lt;h1&gt;Jason's Personal website!!&lt;/h1&gt; &lt;h2&gt;Posts!&lt;/h2&gt; &lt;ul&gt; &lt;li :for={post &lt;- @posts}&gt; &lt;a href={post.path}&gt; &lt;%= post.title %&gt; &lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/.layout&gt; """</span> <span class="k">end</span> <span class="k">def</span> <span class="n">layout</span><span class="p">(</span><span class="n">assigns</span><span class="p">)</span> <span class="k">do</span> <span class="sx">~H""</span><span class="s2">" &lt;html&gt; &lt;body&gt; &lt;%= render_slot(@inner_block) %&gt; &lt;/body&gt; &lt;/html&gt; """</span> <span class="k">end</span> <span class="k">end</span> </code></pre></div><p>If you are familiar with Phoenix Components, then you will know exactly what&#39;s going on here. We have our base <code>layout/1</code> function, which builds our base HTML and accepts an <code>inner_block</code>. We have two separate page types, one for <code>index/1</code> and one for our <code>post/1</code>. Using <em>only</em> the primitives that Phoenix provides us to build our HTML using functions!</p> <p>If we wanted a third page like <code>about</code> we&#39;d simply make a new function! If your layout grows unweildy, move it to its own file. It&#39;s just functions!</p> <p>Now it&#39;s a matter of wiring it up to our data! Let&#39;s add a <code>build/0</code> function to collect all of our data, render it and output it to <code>/output</code>:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="nv">@output_dir</span> <span class="s2">"./output"</span> <span class="no">File</span><span class="o">.</span><span class="n">mkdir_p!</span><span class="p">(</span><span class="nv">@output_dir</span><span class="p">)</span> <span class="k">def</span> <span class="n">build</span><span class="p">()</span> <span class="k">do</span> <span class="n">posts</span> <span class="o">=</span> <span class="no">Blog</span><span class="o">.</span><span class="n">all_posts</span><span class="p">()</span> <span class="n">render_file</span><span class="p">(</span><span class="s2">"index.html"</span><span class="p">,</span> <span class="n">index</span><span class="p">(%{</span><span class="ss">posts:</span> <span class="n">posts</span><span class="p">}))</span> <span class="n">for</span> <span class="n">post</span> <span class="o">&lt;-</span> <span class="n">posts</span> <span class="k">do</span> <span class="n">dir</span> <span class="o">=</span> <span class="no">Path</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="n">post</span><span class="o">.</span><span class="n">path</span><span class="p">)</span> <span class="k">if</span> <span class="n">dir</span> <span class="o">!=</span> <span class="s2">"."</span> <span class="k">do</span> <span class="no">File</span><span class="o">.</span><span class="n">mkdir_p!</span><span class="p">(</span><span class="no">Path</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="nv">@output_dir</span><span class="p">,</span> <span class="n">dir</span><span class="p">]))</span> <span class="k">end</span> <span class="n">render_file</span><span class="p">(</span><span class="n">post</span><span class="o">.</span><span class="n">path</span><span class="p">,</span> <span class="n">post</span><span class="p">(%{</span><span class="ss">post:</span> <span class="n">post</span><span class="p">}))</span> <span class="k">end</span> <span class="ss">:ok</span> <span class="k">end</span> <span class="k">def</span> <span class="n">render_file</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">rendered</span><span class="p">)</span> <span class="k">do</span> <span class="n">safe</span> <span class="o">=</span> <span class="no">Phoenix</span><span class="o">.</span><span class="no">HTML</span><span class="o">.</span><span class="no">Safe</span><span class="o">.</span><span class="n">to_iodata</span><span class="p">(</span><span class="n">rendered</span><span class="p">)</span> <span class="n">output</span> <span class="o">=</span> <span class="no">Path</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="nv">@output_dir</span><span class="p">,</span> <span class="n">path</span><span class="p">])</span> <span class="no">File</span><span class="o">.</span><span class="n">write!</span><span class="p">(</span><span class="n">output</span><span class="p">,</span> <span class="n">safe</span><span class="p">)</span> <span class="k">end</span> </code></pre></div><p>Stepping through the code we:</p> <ul> <li>Create the <code>output_dir</code> if it doesn&#39;t exist </li><li>Grab all of the posts. </li><li>Render the index.html, write it to disk. </li><li>For each post: <ul> <li>Build the &quot;year&quot; directory if it doesn&#39;t exist </li><li>Render the file </li><li>Write it to disk. </li></ul> </li></ul> <p>The <code>render_file/2</code> function does have one interesting line, <code>Phoenix.HTML.Safe.to_iodata/1</code> will take a Phoenix rendered component and output it to an HTML safe <code>iodata</code>, which is a weird name for a string in a list, but Erlang knows how to use these to be very efficient. If we were to &quot;dead render&quot; this using a Phoenix Controller, this is the last function Phoenix would call before sending it down the wire.</p> <p>Load up <code>iex</code> and see what we get!</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight bash'><code><span class="nv">$ </span>iex <span class="nt">-S</span> mix iex<span class="o">(</span>1<span class="o">)&gt;</span> PersonalWebsite.build<span class="o">()</span> :ok CTRL-C CTRL-C <span class="nv">$ </span>open ./output/index.html </code></pre></div><p>We should be greeted by our wonderful website!</p> <p><img src="/phoenix-files/2023-03-30/index.png?card&amp;center" alt="index view" /></p> <p>And this for the post</p> <p><img src="/phoenix-files/2023-03-30/post.png?card&amp;center" alt="post view" /></p> <p>Hey, this is starting to look like a real website! If you check the <code>./output</code> all the files are put where they belong. You <em>could</em> deploy this as is, but we&#39;re going to keep going.</p> <h2 id='automation' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#automation' aria-label='Anchor'></a>Automation!</h2><p>A mix task would be mighty handy here, first <code>$ mkdir -p lib/mix/tasks</code> and then edit <code>lib/mix/tasks/build.ex</code>:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">defmodule</span> <span class="no">Mix</span><span class="o">.</span><span class="no">Tasks</span><span class="o">.</span><span class="no">Build</span> <span class="k">do</span> <span class="kn">use</span> <span class="no">Mix</span><span class="o">.</span><span class="no">Task</span> <span class="nv">@impl</span> <span class="no">Mix</span><span class="o">.</span><span class="no">Task</span> <span class="k">def</span> <span class="n">run</span><span class="p">(</span><span class="n">_args</span><span class="p">)</span> <span class="k">do</span> <span class="p">{</span><span class="n">micro</span><span class="p">,</span> <span class="ss">:ok</span><span class="p">}</span> <span class="o">=</span> <span class="ss">:timer</span><span class="o">.</span><span class="n">tc</span><span class="p">(</span><span class="k">fn</span> <span class="o">-&gt;</span> <span class="no">PersonalWebsite</span><span class="o">.</span><span class="n">build</span><span class="p">()</span> <span class="k">end</span><span class="p">)</span> <span class="n">ms</span> <span class="o">=</span> <span class="n">micro</span> <span class="o">/</span> <span class="mi">1000</span> <span class="no">IO</span><span class="o">.</span><span class="n">puts</span><span class="p">(</span><span class="s2">"BUILT in </span><span class="si">#{</span><span class="n">ms</span><span class="si">}</span><span class="s2">ms"</span><span class="p">)</span> <span class="k">end</span> <span class="k">end</span> </code></pre></div><p>Running it:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight bash'><code><span class="nv">$ </span>mix build BUILT <span class="k">in </span>13.47ms </code></pre></div><p>Now we&#39;re getting somewhere... but you know there is one thing we haven&#39;t solved yet? CSS and JS. So do that!</p> <p>First add a couple familiar deps:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight diff'><code><span class="gi">+ {:esbuild, "~&gt; 0.5"}, + {:tailwind, "~&gt; 0.1.8"} </span></code></pre></div><p>Create a <code>config/config.exs</code></p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="kn">import</span> <span class="no">Config</span> <span class="c1"># Configure esbuild (the version is required)</span> <span class="n">config</span> <span class="ss">:esbuild</span><span class="p">,</span> <span class="ss">version:</span> <span class="s2">"0.14.41"</span><span class="p">,</span> <span class="ss">default:</span> <span class="p">[</span> <span class="ss">args:</span> <span class="sx">~w(app.js --bundle --target=es2017 --outdir=../output/assets --external:/fonts/* --external:/images/*)</span><span class="p">,</span> <span class="ss">cd:</span> <span class="no">Path</span><span class="o">.</span><span class="n">expand</span><span class="p">(</span><span class="s2">"../assets"</span><span class="p">,</span> <span class="n">__DIR__</span><span class="p">),</span> <span class="ss">env:</span> <span class="p">%{</span><span class="s2">"NODE_PATH"</span> <span class="o">=&gt;</span> <span class="no">Path</span><span class="o">.</span><span class="n">expand</span><span class="p">(</span><span class="s2">"../deps"</span><span class="p">,</span> <span class="n">__DIR__</span><span class="p">)}</span> <span class="p">]</span> <span class="c1"># Configure tailwind (the version is required)</span> <span class="n">config</span> <span class="ss">:tailwind</span><span class="p">,</span> <span class="ss">version:</span> <span class="s2">"3.2.4"</span><span class="p">,</span> <span class="ss">default:</span> <span class="p">[</span> <span class="ss">args:</span> <span class="sx">~w( --config=tailwind.config.js --input=css/app.css --output=../output/assets/app.css )</span><span class="p">,</span> <span class="ss">cd:</span> <span class="no">Path</span><span class="o">.</span><span class="n">expand</span><span class="p">(</span><span class="s2">"../assets"</span><span class="p">,</span> <span class="n">__DIR__</span><span class="p">)</span> <span class="p">]</span> </code></pre></div><p>This is copy/pasted from a fresh <code>mix phx.new</code> generated website. I did change the output paths to make it work with out setup. Create an asset&#39;s directory <code>$ mkdir assets</code> create an <code>assets/app.js</code></p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight javascript'><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">HELLO WORLD</span><span class="dl">"</span><span class="p">)</span> </code></pre></div><p>Create a <code>assets/tailwind.config.js</code></p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight javascript'><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span> <span class="na">content</span><span class="p">:</span> <span class="p">[</span> <span class="dl">"</span><span class="s2">./**/*.js</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">../lib/personal_website.ex</span><span class="dl">"</span><span class="p">,</span> <span class="p">],</span> <span class="na">plugins</span><span class="p">:</span> <span class="p">[</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">@tailwindcss/typography</span><span class="dl">"</span><span class="p">),</span> <span class="p">]</span> <span class="p">};</span> </code></pre></div><p>Finally, create a mix alias opening up <code>mix.exs</code> again</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight diff'><code><span class="gi">+ aliases: aliases(), </span> deps: deps() ] <span class="gi">+ defp aliases() do + [ + "site.build": ["build", "tailwind default --minify", "esbuild default --minify"] + ] + end </span></code></pre></div><p>Now when we run <code>mix site.build</code> Elixir will download <code>esbuild</code> and <code>tailwind</code> and execute them outputting to <code>output/</code> for us. We&#39;re getting nearly the same development experience as a full Phoenix Application!</p> <p>Finally, we have to add the CSS and JS we compiled updating our <code>layout/1</code> in <code>lib/personal_website.ex</code></p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight diff'><code><span class="gi">+ &lt;link rel="stylesheet" href="/assets/app.css" /&gt; + &lt;script type="text/javascript" src="/assets/app.js" /&gt; </span> &lt;/head&gt; </code></pre></div><p>And now we can write JavaScript in our <code>assets/app.js</code> or and use Tailwind classes in our site!</p> <p>One small hitch is that we now need to use a web server for local development, since assets are served relative to the base path. Now we could add another dep, but this post is getting too long, so we are going to use the lean on a built-in to python web serverr.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight bash'><code><span class="nv">$ </span><span class="nb">cd </span>output <span class="o">&amp;&amp;</span> python3 <span class="nt">-m</span> http.server 8000 </code></pre></div><p>When we <code>open http://localhost:8000</code> we should see our website in full glory! Edit the files, rebuild and boom we have a personal website!</p> <p>The final piece is copying over static assets like Images or Fonts. I will leave that as an exercise to the reader but to give you a hint <code>Path.wildcard/2</code> and <code>File.cp!/3</code> will get you a long way!</p> <h2 id='deploying-it' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#deploying-it' aria-label='Anchor'></a>Deploying It</h2><p>Anywhere you can send HTML files and static assets will work here! Obviously this is Fly.io, and we have a wonderful guide on deploying <a href="https://fly.io/docs/languages-and-frameworks/static/">Static Websites</a>, we&#39;re going to crib off that.</p> <p>Let&#39;s create a <code>Dockerfile</code>.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight docker'><code><span class="k">FROM</span><span class="s"> pierrezemb/gostatic</span> <span class="k">COPY</span><span class="s"> ./output/ /srv/http/</span> </code></pre></div><p>This Dockerfile assumes we&#39;re building locally to ./output and deploying. We could use the Phoenix Dockerfile to build it as well and change the final output to the above, but I&#39;ll leave that as an exercise to the reader.</p> <p>Now let&#39;s run <code>fly apps create --machines</code> and create our own <code>fly.toml</code></p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight '><code>app = "APP_NAME" kill_signal = "SIGINT" kill_timeout = 5 processes = [] [http_service] internal_port = 8043 force_https = true [http_service.concurrency] type = "requests" soft_limit = 200 hard_limit = 250 </code></pre></div><p>This sets up the <code>gostatic</code> file server to serve port 8043 and tells Fly.io to let it rip! So let&#39;s deploy this with <code>fly deploy</code>. Once complete, lets check it out with <code>fly open</code>!</p> <p>We are deployed!</p> <h2 id='wrap-up' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#wrap-up' aria-label='Anchor'></a>Wrap Up</h2><p>We used NimblePublisher to simplify Markdown and Front Matter. We used Phoenix.Component to render our HTML. We used built in Elixir File and Path functions to write them to our deployment directory. We used the same Tailwind and Esbuild hex packages that Phoenix does to give us a modern front end working environment. Finally, we deployed it to Fly.io.</p> <p>In ~100 lines of code built our own static site generator and we did it using the same Elixir packages we know and love. When something breaks or if we need to add a feature, we can just do it. But that is also the downside, if we want to do something <em>we</em> have to build it. Other pre-built tools have libraries plugins for most tasks.</p> <p>That said, there is nothing so complex in the world of the wide web. You can build anything.</p> <figure class="post-cta"> <figcaption> <h1> Fly.io ❤️ Elixir</h1><p> Fly.io is a great way to run your Phoenix LiveView app close to your users. It&#39;s really easy to get started. You can be running in minutes.</p><p><a class="button bg-white text-violet-600 hover:bg-opacity-75 hover:text-violet-700 transition-colors" href="https://fly.io/docs/elixir/"> Deploy a Phoenix app today!&nbsp;&nbsp;<span class='opacity:50'>&rarr;</span> </a></p> </figcaption><div class="image-container"> <img src="/static/images/cta-kitty.webp" srcset="/static/images/cta-kitty@2x.webp 2x" alt=""></div></figure></content>
</entry>
<entry>
<title>Building a Chat App with LiveView Streams</title>
<link rel="alternate" href="https://fly.io/phoenix-files/building-a-chat-app-with-liveview-streams/"/>
<id>https://fly.io/phoenix-files/building-a-chat-app-with-liveview-streams/</id>
<published>2023-03-22T00:00:00+00:00</published>
<updated>2023-04-06T14:48:02+00:00</updated>
<content type="html"><p class="lead"> Streams are an exciting new feature in Phoenix. Sophie DeBenedetto walks us through creating our own Slack-like chat interface which features infinite scroll back, editing past messages, deleting messages, and appending new messages to the bottom all using Streams. It&#39;s a slick and efficient solution that avoids storing all that message data in the LiveView. Fly.io happens to be a great place to run Phoenix applications. Check out how to <a href="/docs/elixir/">get started</a>!</p><p>In this post, we&#39;ll build out a LiveView chatroom app with the help of LiveView&#39;s new streams feature. You can follow along in the open source codebase or skip ahead to play around with the finished product. We&#39;ll see how streams seamlessly integrate into your existing live views to power interactive and efficient UIs. Along the way, we&#39;ll look at how streams work under the hood. When we&#39;re done, you&#39;ll have exercised the full functionality of streams and you&#39;ll understand how they work at a deep level.</p> <h2 id='what-are-liveview-streams' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#what-are-liveview-streams' aria-label='Anchor'></a>What Are LiveView Streams?</h2><p><a href="https://github.com/phoenixframework/phoenix_live_view/blob/v0.18.16/CHANGELOG.md">LiveView 0.18.16</a> ships with the new streams functionality for managing large collections of data client-side, without having to store anything in the LiveView socket. Chris McCord tells us more about this feature and the problem it&#39;s designed to solve in <a href="https://fly.io/phoenix-files/phoenix-dev-blog-streams/">this excellent post</a>.</p> <p>For the past few years, a question I would often hear from developers interested in LiveView was: &quot;What about large datasets?&quot; Users who needed to display and manage long lists of data had to store that data on the server, or else work with the <code>phx-update=&quot;append&quot;</code> feature. Storing large collections server-side can impact performance, while the <code>phx-update=&quot;append&quot;</code> feature had its own drawbacks. But, as is so often the case with LiveView over the course of its development, the framework has come to provide a better solution for this commonly expressed concern. Now, you can use streams to efficiently manage large datasets in your live views by detaching that data from the socket and letting the client store it instead of the server.</p> <p>LiveView exposes an elegant and users-friendly API for storing data in a client-side stream and allowing your app&#39;s users to interact with that data by adding, updating, and deleting items in the stream. We&#39;ll explore this behavior as we build a real-time chat feature into an existing chatroom-style LiveView application. Our chat will even use streams to support an infinite scroll back feature that allows users to view their chat history. Let&#39;s get started.</p> <h2 id='the-streamchat-app' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#the-streamchat-app' aria-label='Anchor'></a>The StreamChat App</h2><p>For this project, we have a basic LiveView application set up with the following domain:</p> <ul> <li>A <code>Room</code> has many messages. </li><li>A <code>Message</code> belongs to a room and a sender. A sender is a user. </li><li>A <code>User</code> has many messages. </li></ul> <aside class="right-sidenote"> <strong class='font-semibold text-navy'>Hot Tip!</strong> Make sure to grab the project from <a href="https://github.com/SophieDeBenedetto/stream_chat">Github</a> and play with it yourself!</aside><p>We also have a <code>Chat</code> context that exposes the CRUD functionality for rooms and messages. All of this backs the main LiveView of the application, <code>StreamChatWeb.ChatLive.Root</code>. This LiveView is mapped to the <code>/rooms</code> and <code>/rooms/:id</code> live routes and this is where we&#39;ll be building our stream-backed chatting feature. You can find the starting code for this blog post <a href="https://github.com/SophieDeBenedetto/stream_chat/tree/start">here</a>, including a seed file that will get you started with some chat rooms, users, and messages. If you&#39;d like to follow along step-by-step with this post, clone down the repo at the <code>start</code> branch. Or, you can check out the completed project on the <code>main</code> branch <a href="https://github.com/SophieDeBenedetto/stream_chat">here</a>.</p> <p>The starting state for our code-along leaves us with a UI that looks like this:</p> <p><img src="/phoenix-files/2023-03-22/01-initial-ui-opt.webp?card&amp;centered" alt="Screenshot of chat interface with two channels on the left and an empty input with a send button." /></p> <p>A user can navigate to <code>/rooms/:id</code> and see the sidebar that lists the available chatrooms, with the current chatroom highlighted. But we&#39;re not displaying the messages for that room yet. And, while we have the form for a new message, the page doesn&#39;t yet update to reflect that new message in real-time. We&#39;ll use streams to implement both of these features, along with the &quot;edit message&quot; and &quot;delete&quot; message functionality. Let&#39;s get started.</p> <h2 id='list-messages-with-streams' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#list-messages-with-streams' aria-label='Anchor'></a>List Messages With Streams</h2><p>First up, we want to render a list of messages in each chat room. Here&#39;s the UI we&#39;re going for:</p> <p><img src="/phoenix-files/2023-03-22/02-target-result-opt.webp?card&amp;centered" alt="Screenshot of chat interface with multiple messages listed from different people." /></p> <p>We&#39;ll use a stream to store the most recent ten messages for the room and we&#39;ll render the contents of that stream in a HEEx template. Let&#39;s start by teaching the <code>ChatLive.Root</code> LiveView to query for the messages and put them in a stream when the <code>/rooms/:id</code> route is requested.</p> <h3 id='initialize-the-stream' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#initialize-the-stream' aria-label='Anchor'></a>Initialize the Stream</h3><p>In the <code>router.ex</code> file we have the following route definitions:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="n">live</span> <span class="s2">"/rooms"</span><span class="p">,</span> <span class="no">ChatLive</span><span class="o">.</span><span class="no">Root</span><span class="p">,</span> <span class="ss">:index</span> <span class="n">live</span> <span class="s2">"/rooms/:id"</span><span class="p">,</span> <span class="no">ChatLive</span><span class="o">.</span><span class="no">Root</span><span class="p">,</span> <span class="ss">:show</span> </code></pre></div><p>Note that both the <code>/rooms</code> and <code>/rooms/:id</code> routes map to the same LiveView, <code>ChatLive.Root</code>. The <code>/rooms/:id</code> route is defined with a live action of <code>:show</code> in the socket assigns. The <code>ChatLive.Root</code> LiveView already implements a <code>handle_params/3</code> callback that queries for the room with the room ID from params and stores the active room in socket assigns. We&#39;ll add some additional code to this callback to fetch the list of messages for the current room and store them in the stream, like this:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">def</span> <span class="n">handle_params</span><span class="p">(%{</span><span class="s2">"id"</span> <span class="o">=&gt;</span> <span class="n">id</span><span class="p">},</span> <span class="n">_uri</span><span class="p">,</span> <span class="p">%{</span><span class="ss">assigns:</span> <span class="p">%{</span><span class="ss">live_action:</span> <span class="ss">:show</span><span class="p">}}</span> <span class="o">=</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span> <span class="p">{</span><span class="ss">:noreply</span><span class="p">,</span> <span class="n">socket</span> <span class="o">|&gt;</span> <span class="n">assign_active_room</span><span class="p">(</span><span class="n">id</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="n">assign_active_room_messages</span><span class="p">()}</span> <span class="k">end</span> <span class="c1"># single-purpose reducer functions</span> <span class="k">def</span> <span class="n">assign_active_room</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="n">id</span><span class="p">)</span> <span class="k">do</span> <span class="n">assign</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="ss">:room</span><span class="p">,</span> <span class="no">Chat</span><span class="o">.</span><span class="n">get_room!</span><span class="p">(</span><span class="n">id</span><span class="p">))</span> <span class="k">end</span> <span class="k">def</span> <span class="n">assign_active_room_messages</span><span class="p">(%{</span><span class="ss">assigns:</span> <span class="p">%{</span><span class="ss">room:</span> <span class="n">room</span><span class="p">}}</span> <span class="o">=</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span> <span class="n">stream</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="ss">:messages</span><span class="p">,</span> <span class="no">Chat</span><span class="o">.</span><span class="n">last_ten_messages_for</span><span class="p">(</span><span class="n">room</span><span class="o">.</span><span class="n">id</span><span class="p">))</span> <span class="k">end</span> </code></pre></div><p>First, we use a single-purpose reducer function to assign the room with the given ID to the socket. Then, we pass that updated socket to another reducer function, <code>assign_active_room_messages/1</code>. That reducer pulls the room out of socket assigns and uses it to fetch the last ten messages. Finally, we create a stream for <code>:messages</code> with a value of this list of messages.</p> <p>Let&#39;s take a closer look at what happens when we call <code>stream(socket, :messages, Chat.last_ten_messages_for_room(room.id))</code>. Go ahead and pipe the updated socket into an <code>IO.inspect</code> like this:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">def</span> <span class="n">assign_active_room_messages</span><span class="p">(%{</span><span class="ss">assigns:</span> <span class="p">%{</span><span class="ss">room:</span> <span class="n">room</span><span class="p">}}</span> <span class="o">=</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span> <span class="n">stream</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="ss">:messages</span><span class="p">,</span> <span class="no">Chat</span><span class="o">.</span><span class="n">last_ten_messages_for</span><span class="p">(</span><span class="n">room</span><span class="o">.</span><span class="n">id</span><span class="p">))</span> <span class="o">|&gt;</span> <span class="no">IO</span><span class="o">.</span><span class="n">inspect</span> <span class="k">end</span> </code></pre></div><p>Let the LiveView reload and you should see the socket inspected into the terminal. Looking closely at the <code>assigns</code> key, you&#39;ll see something like this:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="ss">streams:</span> <span class="p">%{</span> <span class="ss">__changed__:</span> <span class="no">MapSet</span><span class="o">.</span><span class="n">new</span><span class="p">([</span><span class="ss">:messages</span><span class="p">]),</span> <span class="ss">messages:</span> <span class="p">%</span><span class="no">Phoenix</span><span class="o">.</span><span class="no">LiveView</span><span class="o">.</span><span class="no">LiveStream</span><span class="p">{</span> <span class="ss">name:</span> <span class="ss">:messages</span><span class="p">,</span> <span class="ss">dom_id:</span> <span class="c1">#Function&lt;3.113057034/1 in Phoenix.LiveView.LiveStream.new/3&gt;,</span> <span class="ss">inserts:</span> <span class="p">[</span> <span class="p">{</span><span class="s2">"messages-5"</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="p">%</span><span class="no">StreamChat</span><span class="o">.</span><span class="no">Chat</span><span class="o">.</span><span class="no">Message</span><span class="p">{</span> <span class="ss">__meta__:</span> <span class="c1">#Ecto.Schema.Metadata&lt;:loaded, "messages"&gt;,</span> <span class="ss">id:</span> <span class="mi">5</span><span class="p">,</span> <span class="ss">content:</span> <span class="s2">"Iste cum provident tenetur."</span><span class="p">,</span> <span class="ss">room_id:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">room:</span> <span class="c1">#Ecto.Association.NotLoaded&lt;association :room is not loaded&gt;,</span> <span class="ss">sender_id:</span> <span class="mi">8</span><span class="p">,</span> <span class="ss">sender:</span> <span class="c1">#StreamChat.Accounts.User&lt;</span> <span class="ss">__meta__:</span> <span class="c1">#Ecto.Schema.Metadata&lt;:loaded, "users"&gt;,</span> <span class="ss">id:</span> <span class="mi">8</span><span class="p">,</span> <span class="ss">email:</span> <span class="s2">"keon@streamchat.io"</span><span class="p">,</span> <span class="ss">confirmed_at:</span> <span class="no">nil</span><span class="p">,</span> <span class="ss">inserted_at:</span> <span class="sx">~N[2023-03-02 01:27:09]</span><span class="p">,</span> <span class="ss">updated_at:</span> <span class="sx">~N[2023-03-02 01:27:09]</span><span class="p">,</span> <span class="o">...</span> <span class="o">&gt;</span><span class="p">,</span> <span class="ss">inserted_at:</span> <span class="sx">~N[2023-03-02 01:27:10]</span><span class="p">,</span> <span class="ss">updated_at:</span> <span class="sx">~N[2023-03-02 01:27:10]</span> <span class="p">}},</span> <span class="c1"># ...</span> <span class="ss">deletes:</span> <span class="p">[]</span> <span class="p">}</span> <span class="p">},</span> <span class="c1"># ...</span> </code></pre></div><p>The call to <code>streams/4</code> adds a <code>:streams</code> key to socket assigns, which in turn points to a map with a <code>:messages</code> key. The <code>streams.messages</code> assignment contains a <code>Phoenix.LiveView.LiveStream</code> struct that holds all of the info the LiveView client-side code needs to display your stream data on the page.</p> <aside class="callout"> Notice that the struct has an <code>:inserts</code> key that contains the list of messages we&#39;re inserting into the initial stream. It also contains a <code>:deletes</code> key that is currently empty. All of this data is made available in our template as the <code>@streams.messages</code> assignment.</aside><p>After the initial render, the list of messages will no longer be present in the socket under <code>streams.messages.inserts</code>. It will be available only to the LiveView client-side code via the HTML on the page. Let&#39;s do that rendering now.</p> <h3 id='render-stream-data' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#render-stream-data' aria-label='Anchor'></a>Render Stream Data</h3><p>We&#39;ll use a function component, <code>Room.show/1</code>, to render the messages list from the <code>root.html.heex</code> template <em>if</em> the <code>@live_action</code> assignment is set to <code>:show</code>. We&#39;ll pass in the messages from the stream when we do so, like this:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="c1"># lib/stream_chat_web/live/chat_live/root.html.heex</span> <span class="o">&lt;</span><span class="no">Room</span><span class="o">.</span><span class="n">show</span> <span class="ss">:if=</span><span class="p">{</span><span class="nv">@live_action</span> <span class="o">==</span> <span class="ss">:show</span><span class="p">}</span> <span class="n">messages</span><span class="o">=</span><span class="p">{</span><span class="nv">@streams</span><span class="o">.</span><span class="n">messages</span><span class="p">}</span> <span class="n">current_user_id</span><span class="o">=</span><span class="p">{</span><span class="nv">@current_user</span><span class="o">.</span><span class="n">id</span><span class="p">}</span> <span class="n">room</span><span class="o">=</span><span class="p">{</span><span class="nv">@room</span><span class="p">}</span> <span class="o">/&gt;</span> </code></pre></div><p>The <code>Room.show/1</code> function component will render both the list of messages <em>and</em> a form for a new message. Let&#39;s add in that messages list rendering like this:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">defmodule</span> <span class="no">StreamChatWeb</span><span class="o">.</span><span class="no">ChatLive</span><span class="o">.</span><span class="no">Room</span> <span class="k">do</span> <span class="kn">use</span> <span class="no">Phoenix</span><span class="o">.</span><span class="no">Component</span> <span class="n">alias</span> <span class="no">StreamChatWeb</span><span class="o">.</span><span class="no">ChatLive</span><span class="o">.</span><span class="no">Messages</span> <span class="k">def</span> <span class="n">show</span><span class="p">(</span><span class="n">assigns</span><span class="p">)</span> <span class="k">do</span> <span class="sx">~H""</span><span class="s2">" &lt;div id={"</span><span class="n">room</span><span class="o">-</span><span class="c1">#{@room.id}"}&gt;</span> <span class="o">&lt;</span><span class="no">Messages</span><span class="o">.</span><span class="n">list_messages</span> <span class="n">messages</span><span class="o">=</span><span class="p">{</span><span class="nv">@messages</span><span class="p">}</span> <span class="o">/&gt;</span> <span class="o">&lt;</span><span class="n">!</span><span class="o">--</span> <span class="o">...</span> <span class="n">form</span> <span class="n">for</span> <span class="n">a</span> <span class="n">new</span> <span class="n">message</span> <span class="o">--&gt;</span> <span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span> <span class="s2">""" end end </span></code></pre></div><p>This function component calls another function component, <code>Messages.list/1</code>. This nice, layered UI allows us to wrap up the different concepts on our page into appropriately named functions. Each of these functions can be relatively single-purpose, keeping our code short and sweet and ensuring we have a nice clean location to place our stream rendering code. Let&#39;s take a look at the stream rendering code in <code>Messages.list/1</code> now.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">defmodule</span> <span class="no">StreamChatWeb</span><span class="o">.</span><span class="no">ChatLive</span><span class="o">.</span><span class="no">Messages</span> <span class="k">do</span> <span class="kn">use</span> <span class="no">Phoenix</span><span class="o">.</span><span class="no">Component</span> <span class="k">def</span> <span class="n">list_messages</span><span class="p">(</span><span class="n">assigns</span><span class="p">)</span> <span class="k">do</span> <span class="sx">~H""</span><span class="s2">" &lt;div id="</span><span class="n">messages</span><span class="s2">" phx-update="</span><span class="n">stream</span><span class="s2">"&gt; &lt;div :for={{dom_id, message} &lt;- @messages} id={dom_id}&gt; &lt;.message_meta message={message} /&gt; &lt;.message_content message={message} /&gt; &lt;/div&gt; &lt;/div&gt; """</span> <span class="k">end</span> <span class="k">end</span> </code></pre></div><p>This is where the magic happens. We create a container <code>div</code> with a unique id of <code>&quot;messages&quot;</code> and a <code>phx-update=&quot;stream&quot;</code> attribute. Both of these attributes are required in order for LiveView streams to be rendered and managed correctly. Then, we iterate over the <code>@messages</code> assignment, which we passed in all the way from the <code>root.html.heex</code> template&#39;s call to <code>@streams.messages</code>. At this point, <code>@messages</code> is set equal to the <code>Phoenix.LiveView.LiveStream</code> struct. This struct is enumerable such that when we iterate over it, it will yield tuples describing each item in the <code>:inserts</code> key. The first element of the tuple is the item&#39;s DOM id and the second element is the message struct itself. LiveView uses each item&#39;s DOM id to manage stream items on the page. More on that in a bit.</p> <p>[<strong class='font-semibold text-navy'>Deep Dive: How LiveStream Implements Iteration</strong>]</p> <p><em>Keep reading if you want a closer look at how LiveStream implements enumeration. Or, skip this section to continue building the chat feature and return here later.</em></p> <p>The LiveStream struct implements the <code>Enumerable</code> protocol <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v0.18.16/lib/phoenix_live_view/live_stream.ex#L55">here</a> which let&#39;s us iterate over it and yield the tuples described above. Here&#39;s a look at one of protocol&#39;s <code>reduce</code> functions:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">def</span> <span class="n">reduce</span><span class="p">(%</span><span class="no">LiveStream</span><span class="p">{</span><span class="ss">inserts:</span> <span class="n">inserts</span><span class="p">},</span> <span class="n">acc</span><span class="p">,</span> <span class="n">fun</span><span class="p">)</span> <span class="k">do</span> <span class="n">do_reduce</span><span class="p">(</span><span class="n">inserts</span><span class="p">,</span> <span class="n">acc</span><span class="p">,</span> <span class="n">fun</span><span class="p">)</span> <span class="k">end</span> </code></pre></div><p>You can see that when <code>reduce</code> is called, it pattern matches the <em>inserts</em> out of the function head and passes that list into <code>do_reduce/3</code>. The <code>:inserts</code> key of the stream struct looks something like this:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="p">[</span> <span class="p">{</span><span class="s2">"messages-5"</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="p">%</span><span class="no">StreamChat</span><span class="o">.</span><span class="no">Chat</span><span class="o">.</span><span class="no">Message</span><span class="p">{</span> <span class="ss">__meta__:</span> <span class="c1">#Ecto.Schema.Metadata&lt;:loaded, "messages"&gt;,</span> <span class="ss">id:</span> <span class="mi">5</span><span class="p">,</span> <span class="ss">content:</span> <span class="s2">"Iste cum provident tenetur."</span><span class="p">,</span> <span class="ss">room_id:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">room:</span> <span class="c1">#Ecto.Association.NotLoaded&lt;association :room is not loaded&gt;,</span> <span class="ss">sender_id:</span> <span class="mi">8</span><span class="p">,</span> <span class="ss">sender:</span> <span class="c1">#StreamChat.Accounts.User&lt;</span> <span class="ss">__meta__:</span> <span class="c1">#Ecto.Schema.Metadata&lt;:loaded, "users"&gt;,</span> <span class="ss">id:</span> <span class="mi">8</span><span class="p">,</span> <span class="ss">email:</span> <span class="s2">"keon@streamchat.io"</span><span class="p">,</span> <span class="ss">confirmed_at:</span> <span class="no">nil</span><span class="p">,</span> <span class="ss">inserted_at:</span> <span class="sx">~N[2023-03-02 01:27:09]</span><span class="p">,</span> <span class="ss">updated_at:</span> <span class="sx">~N[2023-03-02 01:27:09]</span><span class="p">,</span> <span class="o">...</span> <span class="o">&gt;</span><span class="p">,</span> <span class="ss">inserted_at:</span> <span class="sx">~N[2023-03-02 01:27:10]</span><span class="p">,</span> <span class="ss">updated_at:</span> <span class="sx">~N[2023-03-02 01:27:10]</span> <span class="p">}},</span> <span class="c1"># ...</span> <span class="p">]</span> </code></pre></div><p>It is a list of three-tuples, where the first element is the DOM id, the second element is an instruction to the LiveView client regarding where to position the item in the list (we don&#39;t care about that right now), and the third element is the item itself.</p> <p>Here&#39;s a simplified look at the version of the <code>do_reduce/3</code> function that does the heavy lifting:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">defp</span> <span class="n">do_reduce</span><span class="p">([{</span><span class="n">dom_id</span><span class="p">,</span> <span class="n">_at</span><span class="p">,</span> <span class="n">item</span><span class="p">}</span> <span class="o">|</span> <span class="n">tail</span><span class="p">],</span> <span class="p">{</span><span class="ss">:cont</span><span class="p">,</span> <span class="n">acc</span><span class="p">},</span> <span class="n">fun</span><span class="p">)</span> <span class="k">do</span> <span class="n">do_reduce</span><span class="p">(</span><span class="n">tail</span><span class="p">,</span> <span class="n">fun</span><span class="o">.</span><span class="p">({</span><span class="n">dom_id</span><span class="p">,</span> <span class="n">item</span><span class="p">},</span> <span class="n">acc</span><span class="p">),</span> <span class="n">fun</span><span class="p">)</span> <span class="k">end</span> </code></pre></div><p>The function ignores the <code>_at</code> element in the tuple, and collects new tuples composed of <code>{dom_id, item}</code>. So, when we iterate a LiveStream struct with a <code>for</code> comprehension, it yields these tuples.</p> <p>[<strong class='font-semibold text-navy'>/Deep Dive</strong>]</p> <p>Let&#39;s inspect this iteration more closely. Go ahead and add this code to the <code>list_messages/1</code> function and then hop on over to your terminal:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">def</span> <span class="n">list_messages</span><span class="p">(</span><span class="n">assigns</span><span class="p">)</span> <span class="k">do</span> <span class="n">for</span> <span class="p">{</span><span class="n">dom_id</span><span class="p">,</span> <span class="n">message</span><span class="p">}</span> <span class="o">&lt;-</span> <span class="n">assigns</span><span class="o">.</span><span class="n">messages</span> <span class="k">do</span> <span class="no">IO</span><span class="o">.</span><span class="n">inspect</span> <span class="p">{</span><span class="n">dom_id</span><span class="p">,</span> <span class="n">message</span><span class="p">}</span> <span class="k">end</span> <span class="sx">~H""</span><span class="s2">" # ... """</span> <span class="k">end</span> </code></pre></div><p>You should see something like this:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="p">{</span><span class="s2">"messages-5"</span><span class="p">,</span> <span class="p">%</span><span class="no">StreamChat</span><span class="o">.</span><span class="no">Chat</span><span class="o">.</span><span class="no">Message</span><span class="p">{</span> <span class="ss">__meta__:</span> <span class="c1">#Ecto.Schema.Metadata&lt;:loaded, "messages"&gt;,</span> <span class="ss">id:</span> <span class="mi">5</span><span class="p">,</span> <span class="ss">content:</span> <span class="s2">"Iste cum provident tenetur."</span><span class="p">,</span> <span class="ss">room_id:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">room:</span> <span class="c1">#Ecto.Association.NotLoaded&lt;association :room is not loaded&gt;,</span> <span class="ss">sender_id:</span> <span class="mi">8</span><span class="p">,</span> <span class="ss">sender:</span> <span class="c1">#StreamChat.Accounts.User&lt;</span> <span class="ss">__meta__:</span> <span class="c1">#Ecto.Schema.Metadata&lt;:loaded, "users"&gt;,</span> <span class="ss">id:</span> <span class="mi">8</span><span class="p">,</span> <span class="ss">email:</span> <span class="s2">"keon@streamchat.io"</span><span class="p">,</span> <span class="ss">confirmed_at:</span> <span class="no">nil</span><span class="p">,</span> <span class="ss">inserted_at:</span> <span class="sx">~N[2023-03-02 01:27:09]</span><span class="p">,</span> <span class="ss">updated_at:</span> <span class="sx">~N[2023-03-02 01:27:09]</span><span class="p">,</span> <span class="o">...</span> <span class="o">&gt;</span><span class="p">,</span> <span class="ss">inserted_at:</span> <span class="sx">~N[2023-03-02 01:27:10]</span><span class="p">,</span> <span class="ss">updated_at:</span> <span class="sx">~N[2023-03-02 01:27:10]</span> <span class="p">}</span> <span class="p">}</span> <span class="c1"># ...</span> </code></pre></div><p>You can see that each tuple has a first element of the DOM id and a second element of the message itself. The DOM id of each element is computed by interpolating the name of the stream, in our case <code>&quot;messages&quot;</code>, along with the ID of the item. So, we get a DOM id of <code>&quot;messages-5&quot;</code> and so on.</p> <p><strong class='font-semibold text-navy'>[Deep Dive] How LiveView computes the stream item DOM id:</strong></p> <p><em>Keep reading to take a deep dive into how LiveView computes the DOM id. Or, skip this section to continue building our feature and return to it later</em>.</p> <p>When you call <code>stream(socket, :messages, message_list)</code>, LiveView initializes a new LiveStream struct with the <code>Phoenix.LiveView.LiveStream.new/3</code> function. That function assigns the struct&#39;s <code>:dom_id</code> attribute to either a function you optionally provide to <code>stream/4</code>, or to the default DOM id function. Here&#39;s a peak at the source code:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code> <span class="k">def</span> <span class="n">new</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">items</span><span class="p">,</span> <span class="n">opts</span><span class="p">)</span> <span class="ow">when</span> <span class="n">is_list</span><span class="p">(</span><span class="n">opts</span><span class="p">)</span> <span class="k">do</span> <span class="n">dom_prefix</span> <span class="o">=</span> <span class="n">to_string</span><span class="p">(</span><span class="n">name</span><span class="p">)</span> <span class="n">dom_id</span> <span class="o">=</span> <span class="no">Keyword</span><span class="o">.</span><span class="n">get_lazy</span><span class="p">(</span><span class="n">opts</span><span class="p">,</span> <span class="ss">:dom_id</span><span class="p">,</span> <span class="k">fn</span> <span class="o">-&gt;</span> <span class="o">&amp;</span><span class="n">default_id</span><span class="p">(</span><span class="n">dom_prefix</span><span class="p">,</span> <span class="nv">&amp;1</span><span class="p">)</span> <span class="k">end</span><span class="p">)</span> <span class="k">unless</span> <span class="n">is_function</span><span class="p">(</span><span class="n">dom_id</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="k">do</span> <span class="k">raise</span> <span class="no">ArgumentError</span><span class="p">,</span> <span class="s2">"stream :dom_id must return a function which accepts each item, got: </span><span class="si">#{</span><span class="n">inspect</span><span class="p">(</span><span class="n">dom_id</span><span class="p">)</span><span class="si">}</span><span class="s2">"</span> <span class="k">end</span> <span class="n">items_list</span> <span class="o">=</span> <span class="n">for</span> <span class="n">item</span> <span class="o">&lt;-</span> <span class="n">items</span><span class="p">,</span> <span class="k">do</span><span class="p">:</span> <span class="p">{</span><span class="n">dom_id</span><span class="o">.</span><span class="p">(</span><span class="n">item</span><span class="p">),</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">item</span><span class="p">}</span> <span class="p">%</span><span class="no">LiveStream</span><span class="p">{</span> <span class="ss">name:</span> <span class="n">name</span><span class="p">,</span> <span class="ss">dom_id:</span> <span class="n">dom_id</span><span class="p">,</span> <span class="ss">inserts:</span> <span class="n">items_list</span><span class="p">,</span> <span class="ss">deletes:</span> <span class="p">[],</span> <span class="p">}</span> <span class="k">end</span> </code></pre></div><p>It creates a variable, <code>dom_prefix</code> by stringifying the name of the stream--in our case <code>:messages</code>. Then, it sets <code>dom_id</code> either to a function you pass into <code>stream/4</code> like this: <code>stream(:messages, messages, &amp;myFunc)</code>, or to an anonymous function that wraps the <code>default_id/2</code> function. Let&#39;s peek at the <code>default_id/2</code> function now:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">defp</span> <span class="n">default_id</span><span class="p">(</span><span class="n">dom_prefix</span><span class="p">,</span> <span class="p">%{</span><span class="ss">id:</span> <span class="n">id</span><span class="p">}</span> <span class="o">=</span> <span class="n">_struct_or_map</span><span class="p">),</span> <span class="k">do</span><span class="p">:</span> <span class="n">dom_prefix</span> <span class="o">&lt;&gt;</span> <span class="s2">"-</span><span class="si">#{</span><span class="n">to_string</span><span class="p">(</span><span class="n">id</span><span class="p">)</span><span class="si">}</span><span class="s2">"</span> </code></pre></div><p>The function is pretty straightforward, it returns a string that prepends the <code>dom_prefix</code> to the stringified item id.</p> <p>As you can see above, the <code>dom_id</code> function is then called when <code>LiveStream.new</code> iterates over the list of items to be inserted:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="n">items_list</span> <span class="o">=</span> <span class="n">for</span> <span class="n">item</span> <span class="o">&lt;-</span> <span class="n">items</span><span class="p">,</span> <span class="k">do</span><span class="p">:</span> <span class="p">{</span><span class="n">dom_id</span><span class="o">.</span><span class="p">(</span><span class="n">item</span><span class="p">),</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">item</span><span class="p">}</span> </code></pre></div><p>For each item in the list, this iteration creates a three-tuple where the first element is the result of invoking the <code>dom_id</code> function for the given item. So, we end up with tuples in which the first element is something like <code>&quot;messages-52&quot;</code>, and so on.</p> <p><em>Takeway? Digging into the streams code we find it isn&#39;t mystical or scary. We shouldn&#39;t be afraid to peek inside the libraries we depend on.</em></p> <p>[<strong class='font-semibold text-navy'>/Deep Dive</strong>]</p> <p>LiveView uses the DOM id of each stream item to track that item and allow us to edit and delete the item. LiveView needs this DOM id to be attached to the HTML element that contains the stream item because stream data is not stored in socket assigns after the initial render. So, LiveView must be able to derive all the information it needs about the item and its position in the stream from the rendered HTML itself.</p> <p>We attach the DOM id to each div produced by the iteration in our <code>:for</code> directive. Here&#39;s another look at that code:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight xml'><code><span class="nt">&lt;div</span> <span class="na">:for=</span><span class="s">{{dom_id,</span> <span class="err">message}</span> <span class="err">&lt;-</span> <span class="err">@messages}</span> <span class="na">id=</span><span class="s">{dom_id}</span><span class="nt">&gt;</span> <span class="err">&lt;</span>.message_meta message={message} /&gt; <span class="err">&lt;</span>.message_content message={message} /&gt; <span class="nt">&lt;/div&gt;</span> </code></pre></div><p>That&#39;s all we need to do to render the list of messages from the stream. We stored the initial stream in socket assigns, iterated over it, and rendered it using the required HTML structure and attributes. Now, the page will render with this list of messages from the stream, and the <code>ChatLive.Root</code> LiveView will no longer hold this list of messages in the <code>streams.messages</code> socket assigns. After the initial render, <code>socket.assigns.streams.messages</code> looks like this:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="ss">streams:</span> <span class="p">%{</span> <span class="ss">__changed__:</span> <span class="no">MapSet</span><span class="o">.</span><span class="n">new</span><span class="p">([</span><span class="ss">:messages</span><span class="p">]),</span> <span class="ss">messages:</span> <span class="p">%</span><span class="no">Phoenix</span><span class="o">.</span><span class="no">LiveView</span><span class="o">.</span><span class="no">LiveStream</span><span class="p">{</span> <span class="ss">name:</span> <span class="ss">:messages</span><span class="p">,</span> <span class="ss">dom_id:</span> <span class="c1">#Function&lt;3.113057034/1 in Phoenix.LiveView.LiveStream.new/3&gt;,</span> <span class="ss">inserts:</span> <span class="p">[],</span> <span class="ss">deletes:</span> <span class="p">[]</span> <span class="p">}</span> </code></pre></div><p>We&#39;ll see LiveView&#39;s stream updating capabilities in action in the next section. Next up, we&#39;ll build the infinite scroll back feature that loads the previous chat history as the user scrolls the chat window up. Each time the user scrolls up and hits the top of the chat window, we&#39;ll prepend an older batch of messages to the stream. You&#39;ll see that LiveView handles the work of how and where to prepend those messages on the page. All we have to do is tell LiveView that an item should be prepended to the stream, and the framework takes care of the rest. Let&#39;s do that now.</p> <h2 id='prepend-stream-messages-for-infinite-scroll-back' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#prepend-stream-messages-for-infinite-scroll-back' aria-label='Anchor'></a>Prepend Stream Messages for Infinite Scroll Back</h2><p>Our app uses a JS hook to send the <code>&quot;load_more&quot;</code> event to the server when the user scrolls up to the top of the chat window. You can check out the hook implementation <a href="https://github.com/SophieDeBenedetto/stream_chat/blob/start/assets/js/infiniteScroll.js">here</a>. We won&#39;t get into the details of this JavaScript now though. Just note <a href="https://github.com/SophieDeBenedetto/stream_chat/blob/start/assets/js/infiniteScroll.js#L5">this</a> line that pushes the <code>&quot;load_more&quot;</code> event. Now all you need to do is add a new div with the hook attached to the messages display, like this:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="c1"># lib/stream_chat_web/live/chat_live/messages.ex</span> <span class="k">def</span> <span class="n">list_messages</span><span class="p">(</span><span class="n">assigns</span><span class="p">)</span> <span class="k">do</span> <span class="sx">~H""</span><span class="s2">" &lt;div id="</span><span class="n">messages</span><span class="s2">" phx-update="</span><span class="n">stream</span><span class="s2">"&gt; &lt;div id="</span><span class="n">infinite</span><span class="o">-</span><span class="n">scroll</span><span class="o">-</span><span class="n">marker</span><span class="s2">" phx-hook="</span><span class="no">InfiniteScroll</span><span class="s2">"&gt;&lt;/div&gt; &lt;!-- add me! --&gt; &lt;div :for={{dom_id, message} &lt;- @messages} id={dom_id}&gt; &lt;.message_meta message={message} /&gt; &lt;.message_content message={message} /&gt; &lt;/div&gt; &lt;/div&gt; """</span> <span class="k">end</span> </code></pre></div><p>Now we&#39;re ready to handle the <code>&quot;load_more&quot;</code> event in our LiveView by prepending items to the stream.</p> <h3 id='prepend-stream-items' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#prepend-stream-items' aria-label='Anchor'></a>Prepend Stream Items</h3><p>In the <code>ChatLive.Root</code> LiveView, we need an event handler to match the <code>&quot;load_more&quot;</code> event. Go ahead and implement the function definition like this:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="c1"># lib/stream_chat_web/live/chat_live/root.ex</span> <span class="k">def</span> <span class="n">handle_event</span><span class="p">(</span><span class="s2">"load_more"</span><span class="p">,</span> <span class="n">_params</span><span class="p">,</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span> <span class="c1"># coming soon!</span> <span class="k">end</span> </code></pre></div><p>Our event handler needs to fetch the previous batch of messages from the database and prepend each of those messages to the stream. We do have a context function available to us to query for <code>n</code> messages older than a given ID: <code>Chat.get_previous_n_messages/2</code>, but we have one problem. Since LiveView does not store stream data in the socket, we have no way of knowing what the ID of the currently loaded oldest message is. So, we can&#39;t query for messages <em>older</em> than that one. We need to store awareness of this &quot;oldest message&quot; ID in the socket. Let&#39;s fix that now and then we&#39;ll return to our event handler.</p> <p>When do we have access to the oldest message in the stream? When we query for the messages to add to the initial stream in our <code>handle_params/3</code> callback. At that time, we should grab the oldest message and store its ID in socket assigns. Here&#39;s our updated <code>handle_params</code> function:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="c1"># lib/stream_chat_web/live/chat_live/root.ex</span> <span class="k">def</span> <span class="n">handle_params</span><span class="p">(%{</span><span class="s2">"id"</span> <span class="o">=&gt;</span> <span class="n">id</span><span class="p">},</span> <span class="n">_uri</span><span class="p">,</span> <span class="p">%{</span><span class="ss">assigns:</span> <span class="p">%{</span><span class="ss">live_action:</span> <span class="ss">:show</span><span class="p">}}</span> <span class="o">=</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span> <span class="n">messages</span> <span class="o">=</span> <span class="no">Chat</span><span class="o">.</span><span class="n">last_ten_messages_for</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">assigns</span><span class="o">.</span><span class="n">room</span><span class="o">.</span><span class="n">id</span><span class="p">)</span> <span class="p">{</span><span class="ss">:noreply</span><span class="p">,</span> <span class="n">socket</span> <span class="o">|&gt;</span> <span class="n">assign_active_room</span><span class="p">(</span><span class="n">id</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="n">assign_active_room_messages</span><span class="p">(</span><span class="n">messages</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="n">assign_oldest_message_id</span><span class="p">(</span><span class="no">List</span><span class="o">.</span><span class="n">first</span><span class="p">(</span><span class="n">messages</span><span class="p">))}</span> <span class="k">end</span> <span class="c1"># ...</span> <span class="k">def</span> <span class="n">assign_active_room_messages</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="n">messages</span><span class="p">)</span> <span class="k">do</span> <span class="n">stream</span><span class="p">(</span><span class="ss">:messages</span><span class="p">,</span> <span class="n">messages</span><span class="p">)</span> <span class="k">end</span> <span class="k">def</span> <span class="n">assign_oldest_message_id</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="n">message</span><span class="p">)</span> <span class="k">do</span> <span class="n">assign</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="ss">:oldest_message_id</span><span class="p">,</span> <span class="n">message</span><span class="o">.</span><span class="n">id</span><span class="p">)</span> <span class="k">end</span> </code></pre></div><p>Now we can use the oldest message ID in socket assigns to query for the previous batch of messages. Let&#39;s do that in our event handler now.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="c1"># lib/stream_chat_web/live/chat_live/root.ex</span> <span class="k">def</span> <span class="n">handle_event</span><span class="p">(</span><span class="s2">"load_more"</span><span class="p">,</span> <span class="n">_params</span><span class="p">,</span> <span class="p">%{</span><span class="ss">assigns:</span> <span class="p">%{</span><span class="ss">oldest_message_id:</span> <span class="n">id</span><span class="p">}}</span> <span class="o">=</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span> <span class="n">messages</span> <span class="o">=</span> <span class="no">Chat</span><span class="o">.</span><span class="n">get_previous_n_messages</span><span class="p">(</span><span class="n">id</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span> <span class="p">{</span><span class="ss">:noreply</span><span class="p">,</span> <span class="n">socket</span> <span class="o">|&gt;</span> <span class="n">stream_batch_insert</span><span class="p">(</span><span class="ss">:messages</span><span class="p">,</span> <span class="n">messages</span><span class="p">,</span> <span class="ss">at:</span> <span class="mi">0</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="n">assign_oldest_message_id</span><span class="p">(</span><span class="no">List</span><span class="o">.</span><span class="n">last</span><span class="p">(</span><span class="n">messages</span><span class="p">))}</span> <span class="k">end</span> </code></pre></div><p>We query for the previous five messages that are older than the current oldest message. Then, we insert this batch of five messages into the stream. Finally, we assign a new oldest message ID.</p> <p>Let&#39;s take a closer look at the <code>stream_batch_insert</code> function now. This is a hand-rolled function since the streams API doesn&#39;t currently support a &quot;batch insert&quot; feature. You&#39;ll find it in the <code>live_view</code> behaviour implement in our app&#39;s <code>StreamChatWeb module</code>. I&#39;ve placed it here because I feel that this function should be highly reuseable within the application, and I&#39;d even like to see LiveView streams offer some such functionality in future release.</p> <p>Let&#39;s take a look at the <code>stream_batch_insert/4</code> function now:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="c1"># lib/stream_chat_web.ex</span> <span class="k">def</span> <span class="n">stream_batch_insert</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">items</span><span class="p">,</span> <span class="n">opts</span> <span class="p">\\</span> <span class="p">%{})</span> <span class="k">do</span> <span class="n">items</span> <span class="o">|&gt;</span> <span class="no">Enum</span><span class="o">.</span><span class="n">reduce</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="k">fn</span> <span class="n">item</span><span class="p">,</span> <span class="n">socket</span> <span class="o">-&gt;</span> <span class="n">stream_insert</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">item</span><span class="p">,</span> <span class="n">opts</span><span class="p">)</span> <span class="k">end</span><span class="p">)</span> <span class="k">end</span> </code></pre></div><p>Here, we iterate over the items with <code>Enum.reduce</code> using the socket as an accumulator. For each item, we insert it into the stream. In our event handler, we call <code>stream_batch_insert</code> with <code>opts</code> of <code>at: 0</code>. This option is passed to <code>stream_insert/4</code> for each item. As a result, we end up with a socket assigns with the following insertion instructions for LiveView:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="ss">streams:</span> <span class="p">%{</span> <span class="ss">__changed__:</span> <span class="no">MapSet</span><span class="o">.</span><span class="n">new</span><span class="p">([</span><span class="ss">:messages</span><span class="p">]),</span> <span class="ss">messages:</span> <span class="p">%</span><span class="no">Phoenix</span><span class="o">.</span><span class="no">LiveView</span><span class="o">.</span><span class="no">LiveStream</span><span class="p">{</span> <span class="ss">name:</span> <span class="ss">:messages</span><span class="p">,</span> <span class="ss">dom_id:</span> <span class="c1">#Function&lt;3.113057034/1 in Phoenix.LiveView.LiveStream.new/3&gt;,</span> <span class="ss">inserts:</span> <span class="p">[</span> <span class="p">{</span><span class="s2">"messages-111"</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="p">%</span><span class="no">StreamChat</span><span class="o">.</span><span class="no">Chat</span><span class="o">.</span><span class="no">Message</span><span class="p">{</span> <span class="ss">id:</span> <span class="mi">111</span><span class="p">,</span> <span class="ss">content:</span> <span class="s2">"10"</span><span class="p">,</span> <span class="c1">#...</span> <span class="p">}},</span> <span class="p">{</span><span class="s2">"messages-110"</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="p">%</span><span class="no">StreamChat</span><span class="o">.</span><span class="no">Chat</span><span class="o">.</span><span class="no">Message</span><span class="p">{</span> <span class="ss">id:</span> <span class="mi">110</span><span class="p">,</span> <span class="ss">content:</span> <span class="s2">"9"</span><span class="p">,</span> <span class="c1"># ...</span> <span class="p">}},</span> <span class="p">],</span> <span class="ss">deletes:</span> <span class="p">[]</span> <span class="p">}</span> <span class="p">}</span> <span class="c1"># ...</span> </code></pre></div><p>Notice that the second element of each tuple in the <code>:inserts</code> collection is <code>0</code>. This tells LiveView to insert these items at the <em>beginning</em> of the stream on the page. When the page re-renders, it will display these five older messages in the correct order, at the top of the chat messages display. Here&#39;s what our feature looks like in action:</p> <p><video src="/phoenix-files/2023-03-22/./03-infinite-scrollback.mp4?centered&amp;card" autoplay="autoplay" loop="loop" muted="muted" playsinline="" disablePictureInPicture="" /></p> <p>Now that we&#39;ve built out our infinite scroll back feature and seen how streams work to prepend new data, we&#39;ll take a look at the form for a new message, and use streams to append new messages to the <em>end</em> of the messages list.</p> <h2 id='append-a-new-message-with-stream_insert' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#append-a-new-message-with-stream_insert' aria-label='Anchor'></a>Append a New Message With <code>stream_insert</code></h2><p>We&#39;re already rendering the <a href="https://github.com/SophieDeBenedetto/stream_chat/blob/start/lib/stream_chat_web/live/chat_live/message/form.ex">form for a new message</a> in the <code>Room.show/1</code> function component like this:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="c1"># lib/stream_chat_web/live/chat_live/room.ex</span> <span class="k">def</span> <span class="n">show</span><span class="p">(</span><span class="n">assigns</span><span class="p">)</span> <span class="k">do</span> <span class="sx">~H""</span><span class="s2">" &lt;div id={"</span><span class="n">room</span><span class="o">-</span><span class="c1">#{@room.id}"}&gt;</span> <span class="o">&lt;</span><span class="no">Messages</span><span class="o">.</span><span class="n">list_messages</span> <span class="n">messages</span><span class="o">=</span><span class="p">{</span><span class="nv">@messages</span><span class="p">}</span> <span class="o">/&gt;</span> <span class="o">&lt;.</span><span class="n">live_component</span> <span class="n">module</span><span class="o">=</span><span class="p">{</span><span class="no">Message</span><span class="o">.</span><span class="no">Form</span><span class="p">}</span> <span class="n">room_id</span><span class="o">=</span><span class="p">{</span><span class="nv">@room</span><span class="o">.</span><span class="n">id</span><span class="p">}</span> <span class="n">sender_id</span><span class="o">=</span><span class="p">{</span><span class="nv">@current_user_id</span><span class="p">}</span> <span class="n">id</span><span class="o">=</span><span class="p">{</span><span class="s2">"room-</span><span class="si">#{</span><span class="nv">@room</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="s2">-message-form"</span><span class="p">}</span> <span class="o">/&gt;</span> <span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span> <span class="s2">""" end </span></code></pre></div><p>When that form is submitted, it triggers an event handler implemented in the form live component that calls <code>Chat.create_message/1</code>. So, when the user submits the form, a new chat message is created. But that new message isn&#39;t added to the page in real-time. The user would have to refresh the page to see the latest message.</p> <p>We&#39;re ready to teach our LiveView to insert the new message once it&#39;s created. This is the responsibility of the <code>ChatLive.Root</code> LiveView, since that is the LiveView that has awareness of the <code>@streams.messages</code> assignment. Luckily for us, our chat feature is already backed by PubSub for real-time capabilities. The <code>Chat.create_message/1</code> function broadcasts an event when a new message is created, like <a href="https://github.com/SophieDeBenedetto/stream_chat/blob/start/lib/stream_chat/chat.ex#L151-L154">this</a>:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="no">Endpoint</span><span class="o">.</span><span class="n">broadcast</span><span class="p">(</span> <span class="s2">"room:</span><span class="si">#{</span><span class="n">message</span><span class="o">.</span><span class="n">room_id</span><span class="si">}</span><span class="s2">"</span><span class="p">,</span> <span class="s2">"new_message"</span><span class="p">,</span> <span class="p">%{</span><span class="ss">message:</span> <span class="n">message</span><span class="p">})</span> </code></pre></div><p>We just need to tell our <code>ChatLive.Root</code> LiveView to subscribe to the PubSub topic for the active room. We&#39;ll do that in <code>handle_params/3</code>:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">def</span> <span class="n">handle_params</span><span class="p">(%{</span><span class="s2">"id"</span> <span class="o">=&gt;</span> <span class="n">id</span><span class="p">},</span> <span class="n">_uri</span><span class="p">,</span> <span class="p">%{</span><span class="ss">assigns:</span> <span class="p">%{</span><span class="ss">live_action:</span> <span class="ss">:show</span><span class="p">}}</span> <span class="o">=</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span> <span class="k">if</span> <span class="n">connected?</span><span class="p">(</span><span class="n">socket</span><span class="p">),</span> <span class="k">do</span><span class="p">:</span> <span class="no">Endpoint</span><span class="o">.</span><span class="n">subscribe</span><span class="p">(</span><span class="s2">"room:</span><span class="si">#{</span><span class="n">id</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span> <span class="c1"># ...</span> <span class="k">end</span> </code></pre></div><p>Now, when a new message is created, any <code>ChatLive.Root</code> LiveView processes for that message&#39;s room will receive a PubSub event. The <code>handle_info/3</code> for this event is where we&#39;ll insert the new chat message into the stream. Let&#39;s build that now.</p> <h3 id='append-a-stream-item' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#append-a-stream-item' aria-label='Anchor'></a>Append a Stream Item</h3><p>Add the following <code>handle_info/3</code> function to <code>ChatLive.Root</code>:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="c1"># lib/stream_chat_web/chat_live/root.ex</span> <span class="k">def</span> <span class="n">handle_info</span><span class="p">(%{</span><span class="ss">event:</span> <span class="s2">"new_message"</span><span class="p">,</span> <span class="ss">payload:</span> <span class="p">%{</span><span class="ss">message:</span> <span class="n">message</span><span class="p">}},</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span> <span class="p">{</span><span class="ss">:noreply</span><span class="p">,</span> <span class="n">insert_new_message</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="n">message</span><span class="p">)}</span> <span class="k">end</span> <span class="k">def</span> <span class="n">insert_new_message</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="n">message</span><span class="p">)</span> <span class="k">do</span> <span class="n">socket</span> <span class="o">|&gt;</span> <span class="n">stream_insert</span><span class="p">(</span><span class="ss">:messages</span><span class="p">,</span> <span class="no">Chat</span><span class="o">.</span><span class="n">preload_message_sender</span><span class="p">(</span><span class="n">message</span><span class="p">))</span> <span class="k">end</span> </code></pre></div><p>This time around, we call <code>stream_insert/4</code> with no additional options. In this case, the resulting LiveStream struct in socket assigns will look something like this:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="ss">streams:</span> <span class="p">%{</span> <span class="ss">__changed__:</span> <span class="no">MapSet</span><span class="o">.</span><span class="n">new</span><span class="p">([</span><span class="ss">:messages</span><span class="p">]),</span> <span class="ss">messages:</span> <span class="p">%</span><span class="no">Phoenix</span><span class="o">.</span><span class="no">LiveView</span><span class="o">.</span><span class="no">LiveStream</span><span class="p">{</span> <span class="ss">name:</span> <span class="ss">:messages</span><span class="p">,</span> <span class="ss">dom_id:</span> <span class="c1">#Function&lt;3.113057034/1 in Phoenix.LiveView.LiveStream.new/3&gt;,</span> <span class="ss">inserts:</span> <span class="p">[</span> <span class="p">{</span><span class="s2">"messages-111"</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="p">%</span><span class="no">StreamChat</span><span class="o">.</span><span class="no">Chat</span><span class="o">.</span><span class="no">Message</span><span class="p">{</span> <span class="ss">id:</span> <span class="mi">111</span><span class="p">,</span> <span class="ss">content:</span> <span class="s2">"10"</span><span class="p">,</span> <span class="c1">#...</span> <span class="p">}</span> <span class="p">},</span> <span class="p">],</span> <span class="ss">deletes:</span> <span class="p">[]</span> <span class="p">}</span> <span class="p">}</span> <span class="c1"># ...</span> </code></pre></div><p>Once again, we have a LiveStream struct with the <code>:inserts</code> key populated with the list of inserts. Now we have just one item in the list. The tuple representing that item has a second element of <code>-1</code>. This tells LiveView to append the new item to the end of the stream. As a result, the new message will be rendered at the end of the list of messages on the page.</p> <p>That&#39;s it for our new message feature. Once again, streams did the heavy lifting for us. All we had to do was tell LiveView that a new item needed to appended. Now we&#39;re ready to build the edit message feature and take a look at how to update items in a stream. Then, we&#39;ll wrap up with our delete message feature.</p> <h2 id='update-an-existing-message-with-stream_insert' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#update-an-existing-message-with-stream_insert' aria-label='Anchor'></a>Update an Existing Message With <code>stream_insert</code></h2><p>The edit message form lives in the <code>ChatLive.Message.EditForm live component</code>, which is contained in a modal that we show or hide based on user interactions. This form behaves similarly to the form for a new message. It&#39;s <code>&quot;save&quot;</code> event handler calls the <code>Chat.update_message</code> context function, which emits an <code>&quot;updated_message&quot;</code> event over PubSub.</p> <p>We&#39;ll implement a <code>handle_info/3</code> for this event in the <code>ChatLive.Root</code> LiveView, since that LiveView is responsible for managing the <code>@streams.messages</code> assigns. Let&#39;s do that now.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="c1"># lib/stream_chat_web/chat_live/root.ex</span> <span class="k">def</span> <span class="n">handle_info</span><span class="p">(%{</span><span class="ss">event:</span> <span class="s2">"updated_message"</span><span class="p">,</span> <span class="ss">payload:</span> <span class="p">%{</span><span class="ss">message:</span> <span class="n">message</span><span class="p">}},</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span> <span class="p">{</span><span class="ss">:noreply</span><span class="p">,</span> <span class="n">socket</span> <span class="o">|&gt;</span> <span class="n">insert_updated_message</span><span class="p">(</span><span class="n">message</span><span class="p">)}</span> <span class="k">end</span> <span class="k">def</span> <span class="n">insert_updated_message</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="n">message</span><span class="p">)</span> <span class="k">do</span> <span class="n">socket</span> <span class="o">|&gt;</span> <span class="n">stream_insert</span><span class="p">(</span><span class="ss">:messages</span><span class="p">,</span> <span class="no">Chat</span><span class="o">.</span><span class="n">preload_message_sender</span><span class="p">(</span><span class="n">message</span><span class="p">),</span> <span class="ss">at:</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="k">end</span> </code></pre></div><p>Here, we call <code>stream_insert</code> yet again, this time with the updated message and the <code>at: -1</code> option. Since we&#39;re passing a message that the stream is already tracking on the page, LiveView will know to update the existing message item in the stream. The <code>at: -1</code> option tells LiveView to update the item at its current stream location, rather than appending it to the end of the list. Now, the page will re-render and display the updated in message in place, like this:</p> <p><video src="/phoenix-files/2023-03-22/./04-edit-message.mp4?centered&amp;card" autoplay="autoplay" loop="loop" muted="muted" playsinline="" disablePictureInPicture="" /></p> <p>Before we wrap up, we need to build out the message delete feature. Let&#39;s do that now.</p> <h2 id='delete-a-message-with-stream_delete' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#delete-a-message-with-stream_delete' aria-label='Anchor'></a>Delete a Message With <code>stream_delete</code></h2><p>We render a delete icon for each message when the message is hovered over, like this:</p> <p><img src="/phoenix-files/2023-03-22/05-delete-message-opt.webp?card&amp;centered" alt="Screenshot shows the hover delete button link for deleting a message." /></p> <p>When the user clicks that button, we send a <code>&quot;delete_message&quot;</code> event to the LiveView. Let&#39;s handle that event now by deleting the message from the stream.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="c1"># lib/stream_chat_web/chat_live/root.ex</span> <span class="k">def</span> <span class="n">handle_event</span><span class="p">(</span><span class="s2">"delete_message"</span><span class="p">,</span> <span class="p">%{</span><span class="s2">"item_id"</span> <span class="o">=&gt;</span> <span class="n">message_id</span><span class="p">},</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span> <span class="p">{</span><span class="ss">:noreply</span><span class="p">,</span> <span class="n">delete_message</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="n">message_id</span><span class="p">)}</span> <span class="k">end</span> <span class="k">def</span> <span class="n">delete_message</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="n">message_id</span><span class="p">)</span> <span class="k">do</span> <span class="n">message</span> <span class="o">=</span> <span class="no">Chat</span><span class="o">.</span><span class="n">get_message!</span><span class="p">(</span><span class="n">message_id</span><span class="p">)</span> <span class="no">Chat</span><span class="o">.</span><span class="n">delete_message</span><span class="p">(</span><span class="n">message</span><span class="p">)</span> <span class="n">stream_delete</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="ss">:messages</span><span class="p">,</span> <span class="n">message</span><span class="p">)</span> <span class="k">end</span> </code></pre></div><p>We query for the message to be deleted, execute a call to delete that message from the database, and then tell the stream to delete the message from its list. The call to <code>steam_delete</code> returns a socket with an assigns that looks something like this:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="ss">streams:</span> <span class="p">%{</span> <span class="ss">__changed__:</span> <span class="no">MapSet</span><span class="o">.</span><span class="n">new</span><span class="p">([</span><span class="ss">:messages</span><span class="p">]),</span> <span class="ss">messages:</span> <span class="p">%</span><span class="no">Phoenix</span><span class="o">.</span><span class="no">LiveView</span><span class="o">.</span><span class="no">LiveStream</span><span class="p">{</span> <span class="ss">name:</span> <span class="ss">:messages</span><span class="p">,</span> <span class="ss">dom_id:</span> <span class="c1">#Function&lt;3.113057034/1 in Phoenix.LiveView.LiveStream.new/3&gt;,</span> <span class="ss">inserts:</span> <span class="p">[],</span> <span class="ss">deletes:</span> <span class="p">[</span><span class="s2">"messages-20"</span><span class="p">]</span> <span class="p">}</span> <span class="p">}</span> </code></pre></div><p>Notice that <code>:inserts</code> is empty, but <code>:deletes</code> contains a list with the DOM ID of the item to be deleted. This instructs LiveView to remove the item with that DOM ID from the rendered list of <code>@streams.messages</code>. If you pass a struct to <code>stream_delete</code>, LiveView will compute the DOM ID to be deleted. Alternatively, if you don&#39;t have access to that struct or don&#39;t want to query for it, you can give <code>stream_delete</code> a third argument of the DOM ID directly, either by re-computing it yourself or invoking the stream&#39;s <code>dom_id/2</code> function stored in <code>@streams.messages.dom_id</code>.</p> <p>That&#39;s all we need to do to support our delete message functionality. Once we tell LiveView that there is a stream item to delete, the framework once again takes care of the rest. It re-renders the page, triggering LiveView JS framework code that removes the specified item from the rendered list of <code>@streams.messages</code>.</p> <p>Okay, we&#39;ve covered a lot of ground. Let&#39;s wrap up.</p> <h2 id='wrap-up' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#wrap-up' aria-label='Anchor'></a>Wrap Up</h2><p>LiveView&#39;s new streams feature packs a powerful punch! It allows us to build and manage large datasets client-side, while writing very little custom code. True to the declarative nature of LiveView, the streams API asks you to provide LiveView with some basic instructions regarding <em>what</em> data to manage in the stream and what to do with that data based on certain user interactions. You don&#39;t have to tell LiveView <em>how</em> to render stream data on the page or how to prepend, append, update, or delete items from that data collection.</p> <p>Our interactive, real-time chatting feature successfully uses streams to manage chat messages fully on the client, and we had to write only a few lines of streams-specific code to make it happen. Client-side data management with streams opens up a whole new set of possibilities for LiveView developers to efficiently manage large data collections, and I&#39;m excited to see what you build with it next.</p> <figure class="post-cta"> <figcaption> <h1> Fly.io ❤️ Elixir</h1><p> Fly.io is a great way to run your Phoenix LiveView app close to your users. It&#39;s really easy to get started. You can be running in minutes.</p><p><a class="button bg-white text-violet-600 hover:bg-opacity-75 hover:text-violet-700 transition-colors" href="https://fly.io/docs/elixir/"> Deploy a Phoenix app today!  <span class='opacity:50'>→</span> </a></p> </figcaption><div class="image-container"> <img src="/static/images/cta-rabbit.webp" srcset="/static/images/cta-rabbit@2x.webp 2x" alt=""></div></figure></content>
</entry>
<entry>
<title>Using LiveView's new primitives for accessibility</title>
<link rel="alternate" href="https://fly.io/phoenix-files/liveview-accessible-focus/"/>
<id>https://fly.io/phoenix-files/liveview-accessible-focus/</id>
<published>2023-03-21T00:00:00+00:00</published>
<updated>2023-04-06T14:48:02+00:00</updated>
<content type="html"><p class="lead"> In this post, we&#39;ll take a look at the latest LiveView 0.18 features that improve accessibility by enhancing focus. We&#39;ll explore these features through practical examples, so you can see how they work in real-world scenarios. Fly.io is a great place to run your Phoenix LiveView applications! Check out how to <a href="https:///docs/elixir/">get started</a>!</p><p><a href="https://fly.io/blog/intro-to-accessibility/">In</a> <a href="https://fly.io/blog/accessibility-clearing-the-fog/">previous</a> posts, Nolan showed us some ways to improve accessibility in existing web applications using the Phoenix real-time social music app <a href="https://fly.io/blog/livebeats/">LiveBeats</a> as an example.</p> <p>But what if we could integrate accessibility practices into our app development from the beginning, easily? Well, LiveView 0.18 recognizes the importance of accessibility and introduces a new range of built-in primitives that help us manage focus for more accessible LiveView apps, including <a href="https://hexdocs.pm/phoenix_live_view/Phoenix.Component.html#focus_wrap/1">Phoenix.Component.focus_wrap/1</a>, <a href="https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.JS.html#focus/0">JS.focus</a>, <a href="https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.JS.html#focus_first/0">JS.focus_first</a>, <a href="https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.JS.html#push_focus/0">JS.push_focus</a>, and <a href="https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.JS.html#pop_focus/0">JS.pop_focus</a></p> <p>Today, we&#39;ll explore these primitives with practical examples.</p> <h2 id='defining-a-navigation-bar' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#defining-a-navigation-bar' aria-label='Anchor'></a>Defining a Navigation Bar</h2><p>You are designing a navigation bar and have included default focusable tags, allowing users to navigate between its elements using the tab key. Additionally, it has incorporated a dropdown menu with submenus that can also be accessed using the keyboard:</p> <p><video title="A navigation bar that can be navigated using the tab key is displayed. One of the navigation elements has a dropdown menu, but when the dropdown is opened, the focus is lost. If the user continues to tab, the focus returns to the navigation bar even if the dropdown is still open." src="/phoenix-files/2023-03-21/accessibility_01.mp4?card" autoplay="autoplay" loop="loop" muted="muted" playsinline="" disablePictureInPicture="" /></p> <p>While our nav bar appears to be functional, there are still a few details that require attention:</p> <ol> <li>The dropdown should <a href="#hejyw-focusing-the-first-element-inside-a-container">focus on the first available option</a> when opened. </li><li>The navbar element that was in focus prior to displaying the dropdown <a href="#h7uls-focus-an-specific-element">should regain focus when the dropdown is closed.</a> </li><li>After navigating through the dropdown options, focus currently shifts outside of the dropdown body and onto other elements in the navigation bar. To improve usability, only the list items in the dropdown should be <a href="#hykzs-manipulating-focus-programmatically">focusable when it is opened</a>. </li></ol> <p>To address these issues, let&#39;s take a look at the dropdown code:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="n">attr</span> <span class="ss">:id</span><span class="p">,</span> <span class="ss">:any</span><span class="p">,</span> <span class="ss">required:</span> <span class="no">true</span> <span class="n">slot</span> <span class="ss">:header</span> <span class="k">def</span> <span class="n">dropdown</span><span class="p">(</span><span class="n">assigns</span><span class="p">)</span> <span class="k">do</span> <span class="sx">~H""</span><span class="s2">" &lt;!-- Dropdown header --&gt; &lt;button id={@id}&gt; &lt;%= render_slot(@header) %&gt; ... &lt;/button&gt; &lt;!-- Dropdown body --&gt; &lt;div id={"</span><span class="c1">#{@id}-body"}&gt;</span> <span class="o">&lt;</span><span class="n">ul</span> <span class="n">id</span><span class="o">=</span><span class="p">{</span><span class="s2">"</span><span class="si">#{</span><span class="nv">@id</span><span class="si">}</span><span class="s2">-options"</span><span class="p">}</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">li</span> <span class="ss">:for=</span><span class="p">{</span><span class="n">option</span> <span class="o">&lt;-</span> <span class="nv">@option</span><span class="p">}</span><span class="o">&gt;</span> <span class="o">&lt;.</span><span class="n">link</span><span class="o">&gt;</span> <span class="o">&lt;%=</span> <span class="n">render_slot</span><span class="p">(</span><span class="n">option</span><span class="p">)</span> <span class="p">%</span><span class="o">&gt;</span> <span class="o">&lt;/.</span><span class="n">link</span><span class="o">&gt;</span> <span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span> <span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span> <span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span> <span class="s2">""" end </span></code></pre></div><p>The dropdown component has two main sections: the header, which is a button that displays the dropdown options, and the body, which contains the dropdown options themselves.</p> <p>Note that the component&#39;s <code>@id</code> is the same as the header button&#39;s id, which is also used to define the dropdown body and options container ids.</p> <p>With this in mind, let&#39;s address each of the issues!</p> <h2 id='focusing-the-first-element-inside-a-container' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#focusing-the-first-element-inside-a-container' aria-label='Anchor'></a>Focusing the First Element Inside a Container</h2><p>Let&#39;s focus on the button that displays the dropdown options.</p> <p>We specify the function we want to invoke when the button is clicked, using the <code>phx-click</code>binding:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">def</span> <span class="n">dropdown</span><span class="p">(</span><span class="n">assigns</span><span class="p">)</span> <span class="k">do</span> <span class="sx">~H""</span><span class="s2">" &lt;!-- Dropdown header --&gt; &lt;button id={@id} phx-click={open_dropdown(@id)}&gt; &lt;%= render_slot(@header) %&gt; ... &lt;/button&gt; &lt;!-- Dropdown body --&gt; ... """</span> <span class="k">end</span> </code></pre></div><p>Then we define the function <code>open_dropdown/2</code>:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">def</span> <span class="n">open_dropdown</span><span class="p">(</span><span class="n">js</span> <span class="p">\\</span> <span class="p">%</span><span class="no">JS</span><span class="p">{},</span> <span class="n">id</span><span class="p">)</span> <span class="ow">when</span> <span class="n">is_binary</span><span class="p">(</span><span class="n">id</span><span class="p">)</span> <span class="k">do</span> <span class="n">js</span> <span class="o">|&gt;</span> <span class="no">JS</span><span class="o">.</span><span class="n">show</span><span class="p">(</span> <span class="ss">to:</span> <span class="s2">"#</span><span class="si">#{</span><span class="n">id</span><span class="si">}</span><span class="s2">-body"</span><span class="p">,</span> <span class="ss">transition:</span> <span class="p">{</span><span class="s2">"transition-all transform ease-out duration-300"</span><span class="p">,</span> <span class="s2">"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"</span><span class="p">,</span> <span class="s2">"opacity-100 translate-y-0 sm:scale-100"</span><span class="p">}</span> <span class="p">)</span> <span class="o">|&gt;</span> <span class="no">JS</span><span class="o">.</span><span class="n">focus_first</span><span class="p">(</span><span class="ss">to:</span> <span class="s2">"#</span><span class="si">#{</span><span class="n">id</span><span class="si">}</span><span class="s2">-options"</span><span class="p">)</span> <span class="k">end</span> </code></pre></div><p>To begin, we&#39;ll use the <a href="https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.JS.html#show/1">JS.show/1</a> command to display the dropdown options container and then use the new <a href="https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.JS.html#focus_first/1">JS.focus_first/1</a> command to set focus on the first element within the <code>&lt;ul&gt;</code> tag.</p> <p>The <code>JS.focus_first</code> command sets focus on the first focusable element of the specified selector. The element&#39;s selector can be specified using the <code>:to</code> option, or if left unspecified, focus will be set on the first child of the current element by default:</p> <p><video title="The user is navigating through a navigation bar and when they open a dropdown, the focus is set to the first element within the dropdown." src="/phoenix-files/2023-03-21/accessibility_02.mp4?card" autoplay="autoplay" loop="loop" muted="muted" playsinline="" disablePictureInPicture="" /></p> <p>Tada! The first element is now automatically focused when the dropdown is opened. However, there is still an issue to address when closing the dropdown. Let&#39;s tackle that next!</p> <h2 id='focus-a-specific-element' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#focus-a-specific-element' aria-label='Anchor'></a>Focus a Specific Element</h2><p>Now let&#39;s address the second issue, which is to set focus on the last element that was focused before the dropdown was opened.</p> <p>To do this, let&#39;s focus on the last element that was focused before the dropdown was closed, the <a href="https://hexdocs.pm/phoenix_live_view/Phoenix.Component.html#link/1">link</a> elements within the dropdown body:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">def</span> <span class="n">dropdown</span><span class="p">(</span><span class="n">assigns</span><span class="p">)</span> <span class="k">do</span> <span class="sx">~H""</span><span class="s2">" &lt;!-- Dropdown header --&gt; ... &lt;!-- Dropdown body --&gt; &lt;div id={"</span><span class="c1">#{@id}-body"}&gt;</span> <span class="o">&lt;</span><span class="n">ul</span> <span class="n">id</span><span class="o">=</span><span class="p">{</span><span class="s2">"</span><span class="si">#{</span><span class="nv">@id</span><span class="si">}</span><span class="s2">-options"</span><span class="p">}</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">li</span> <span class="ss">:for=</span><span class="p">{</span><span class="n">option</span> <span class="o">&lt;-</span> <span class="nv">@option</span><span class="p">}</span><span class="o">&gt;</span> <span class="o">&lt;.</span><span class="n">link</span> <span class="n">phx</span><span class="o">-</span><span class="n">keydown</span><span class="o">=</span><span class="p">{</span><span class="n">close_dropdown</span><span class="p">(</span><span class="nv">@id</span><span class="p">)}</span> <span class="n">phx</span><span class="o">-</span><span class="n">key</span><span class="o">=</span><span class="s2">"escape"</span><span class="o">&gt;</span> <span class="o">&lt;%=</span> <span class="n">render_slot</span><span class="p">(</span><span class="n">option</span><span class="p">)</span> <span class="p">%</span><span class="o">&gt;</span> <span class="o">&lt;/.</span><span class="n">link</span><span class="o">&gt;</span> <span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span> <span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span> <span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span> <span class="s2">""" end </span></code></pre></div><p>We use <code>:phx-keydown</code> and <code>:phx-key</code>, to specify that the <code>close_dropdown/2</code> function is called when the user presses the escape key.</p> <p>Take a look at the code for the <code>close_dropdown/2</code> function below:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">def</span> <span class="n">close_dropdown</span><span class="p">(</span><span class="n">js</span> <span class="p">\\</span> <span class="p">%</span><span class="no">JS</span><span class="p">{},</span> <span class="n">id</span><span class="p">)</span> <span class="k">do</span> <span class="n">js</span> <span class="o">|&gt;</span> <span class="no">JS</span><span class="o">.</span><span class="n">hide</span><span class="p">(</span> <span class="ss">to:</span> <span class="s2">"#</span><span class="si">#{</span><span class="n">id</span><span class="si">}</span><span class="s2">-body"</span><span class="p">,</span> <span class="ss">time:</span> <span class="mi">200</span><span class="p">,</span> <span class="ss">transition:</span> <span class="p">{</span><span class="s2">"transition-all transform ease-in duration-200"</span><span class="p">,</span> <span class="s2">"opacity-100 translate-y-0 sm:scale-100"</span><span class="p">,</span> <span class="s2">"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"</span><span class="p">}</span> <span class="p">)</span> <span class="o">|&gt;</span> <span class="no">JS</span><span class="o">.</span><span class="n">focus</span><span class="p">(</span><span class="ss">to:</span> <span class="s2">"#</span><span class="si">#{</span><span class="n">id</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span> <span class="k">end</span> </code></pre></div><p>We use the <a href="https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.JS.html#hide/1">JS.hide/1</a> command to hide the dropdown body, followed by the <a href="https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.JS.html#focus/1">JS.focus/1</a> command with the <code>id</code> of the component&#39;s header to focus the dropdown button:</p> <p><video title="The user opens the dropdown options and hits the escape key, the focus returns to the last navbar item that was focused before opening the dropdown." src="/phoenix-files/2023-03-21/accessibility_03.mp4?card" autoplay="autoplay" loop="loop" muted="muted" playsinline="" disablePictureInPicture="" /></p> <p>Excellent! With the opening and closing of the dropdown now functioning correctly, the next step is to ensure smooth navigation when the dropdown is open.</p> <h2 id='wrap-the-focused-tab-inside-a-container' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#wrap-the-focused-tab-inside-a-container' aria-label='Anchor'></a>Wrap the Focused Tab Inside a Container</h2><p>When the dropdown menu is open and we finish navigating its options, the focus shifts to the navigation bar instead of remaining within the dropdown. To prevent this from happening, we need to ensure that the focus remains inside the dropdown while it is open.</p> <p>The solution is simple. In LiveView 0.18, a new function component called <code>focus_wrap/1</code> was introduced, which allows us to wrap the focus tab within a single container.</p> <p>We just need to make a small change. Instead of using a <code>&lt;div&gt;</code> to define the body of the dropdown, we can use the <a href="https://hexdocs.pm/phoenix_live_view/Phoenix.Component.html#focus_wrap/1">focus_wrap/1</a> function component to wrap the dropdown contents and ensure that the focus stays within the dropdown:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">def</span> <span class="n">dropdown</span><span class="p">(</span><span class="n">assigns</span><span class="p">)</span> <span class="k">do</span> <span class="sx">~H""</span><span class="s2">" &lt;!-- Dropdown header --&gt; ... &lt;!-- Dropdown body --&gt; &lt;.focus_wrap id={"</span><span class="c1">#{@id}-body"}&gt;</span> <span class="o">&lt;</span><span class="n">ul</span> <span class="n">id</span><span class="o">=</span><span class="p">{</span><span class="s2">"</span><span class="si">#{</span><span class="nv">@id</span><span class="si">}</span><span class="s2">-options"</span><span class="p">}</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">li</span> <span class="ss">:for=</span><span class="p">{</span><span class="n">option</span> <span class="o">&lt;-</span> <span class="nv">@option</span><span class="p">}</span><span class="o">&gt;</span> <span class="o">&lt;.</span><span class="n">link</span> <span class="n">phx</span><span class="o">-</span><span class="n">keydown</span><span class="o">=</span><span class="p">{</span><span class="n">close_dropdown</span><span class="p">(</span><span class="nv">@id</span><span class="p">)}</span> <span class="n">phx</span><span class="o">-</span><span class="n">key</span><span class="o">=</span><span class="s2">"escape"</span><span class="o">&gt;</span> <span class="o">&lt;%=</span> <span class="n">render_slot</span><span class="p">(</span><span class="n">option</span><span class="p">)</span> <span class="p">%</span><span class="o">&gt;</span> <span class="o">&lt;/.</span><span class="n">link</span><span class="o">&gt;</span> <span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span> <span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span> <span class="o">&lt;/.</span><span class="n">focus_wrap</span><span class="o">&gt;</span> <span class="s2">""" end </span></code></pre></div><p>Implementing this solution is simple. Now, when we open our dropdown options, we can simply wrap the options&#39; focus tab inside our component:</p> <p><video title="After the user opens the dropdown in the navigation bar, they navigate through the dropdown options using the tab key. The focus remains within the dropdown body. " src="/phoenix-files/2023-03-21/accessibility_04.mp4?card" autoplay="autoplay" loop="loop" muted="muted" playsinline="" disablePictureInPicture="" /></p> <p>We&#39;ve made significant progress solving our issues, but this is not all LiveView can offer. In fact, we still have two more commands to cover.</p> <h2 id='changing-focus-programmatically' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#changing-focus-programmatically' aria-label='Anchor'></a>Changing Focus Programmatically</h2><p>In addition to the previous commands, there are a couple more commands that we can use to move and activate the focus at appropriate times: <a href="https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.JS.html#push_focus/2">JS.push_focus/2</a> and <a href="https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.JS.html#pop_focus/0">JS.pop_focus/0</a>.</p> <p>To better understand these commands, let&#39;s consider an example scenario. Suppose you have a button that opens a modal to delete an item from a table. The modal presents two options - either delete the element or cancel the deletion process by pressing the Cancel button:</p> <p><video title="The application displays a table with a list of users. Each row in the table has a button to delete the associated user. When the user selects a delete button with the Enter key, a modal dialog appears, asking the user to confirm whether they want to delete the selected user. " src="/phoenix-files/2023-03-21/accessibility_05.mp4?card" autoplay="autoplay" loop="loop" muted="muted" playsinline="" disablePictureInPicture="" /></p> <p>If the user decides to cancel the delete operation, we want to ensure that the focus returns to the button that opened the modal, even if the modal is not aware of which element triggered its display.</p> <p>To achieve this, we can use the <code>JS.push_focus/1</code> command to set the focus on the current button when the modal opens. Then, when the user clicks the Cancel button to exit the modal, we can activate the focus on the previously focused element using the <code>JS.pop_focus/0</code> command.</p> <p>Let&#39;s look at this code. We have a button that renders a small trash icon using <a href="https://hexdocs.pm/heroicons_liveview/readme.html">Heroicons</a>:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="o">&lt;.</span><span class="n">link</span> <span class="n">id</span><span class="o">=</span><span class="p">{</span><span class="s2">"delete-user-</span><span class="si">#{</span><span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="s2">"</span><span class="p">}</span> <span class="n">phx</span><span class="o">-</span><span class="n">click</span><span class="o">=</span><span class="p">{</span><span class="n">show_modal</span><span class="p">(</span><span class="s2">"delete-modal-</span><span class="si">#{</span><span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="no">JS</span><span class="o">.</span><span class="n">push_focus</span><span class="p">()}</span> <span class="o">&gt;</span> <span class="o">&lt;</span><span class="no">Heroicons</span><span class="o">.</span><span class="n">trash</span> <span class="n">fill</span><span class="o">=</span><span class="s2">"red"</span> <span class="n">stroke</span><span class="o">=</span><span class="s2">"white"</span> <span class="o">/&gt;</span> <span class="o">&lt;/.</span><span class="n">link</span><span class="o">&gt;</span> </code></pre></div><p>When the user clicks on this button, it not only displays the modal but it also push the focus to itself using the <code>JS.push_focus/0</code> command.</p> <p>Next, when the user clicks the Cancel button within the modal, we can close the modal using the appropriate commands and use the <code>JS.pop_focus/0</code> command to activate the focus on the previously focused element:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="o">&lt;.</span><span class="n">button</span> <span class="n">phx</span><span class="o">-</span><span class="n">click</span><span class="o">=</span><span class="p">{</span><span class="n">hide_modal</span><span class="p">(</span><span class="nv">@on_cancel</span><span class="p">,</span> <span class="nv">@id</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="no">JS</span><span class="o">.</span><span class="n">pop_focus</span><span class="p">}</span><span class="o">&gt;</span> <span class="no">Cancel</span> <span class="o">&lt;/.</span><span class="n">button</span><span class="o">&gt;</span> </code></pre></div><p>By using these two commands, we are able to move the focus and activate it in two separate steps.</p> <p>Let&#39;s take a look at the final result:</p> <p><video title="After selecting the delete button, a modal dialog appears, but the user decides to cancel the delete process and clicks the cancel button. The focus returns to the initial delete button after closing the modal. " src="/phoenix-files/2023-03-21/accessibility_06.mp4?card" autoplay="autoplay" loop="loop" muted="muted" playsinline="" disablePictureInPicture="" /></p> <p>Now that looks good! The focus movements feel natural and obvious.</p> <figure class="post-cta"> <figcaption> <h1> Fly.io ❤️ Elixir</h1><p> Fly.io is a great way to run your Phoenix LiveView app close to your users. It&#39;s really easy to get started. You can be running in minutes.</p><p><a class="button bg-white text-violet-600 hover:bg-opacity-75 hover:text-violet-700 transition-colors" href="https://fly.io/docs/elixir/"> Deploy a Phoenix app today!&nbsp;&nbsp;<span class='opacity:50'>&rarr;</span> </a></p> </figcaption><div class="image-container"> <img src="/static/images/cta-turtle.webp" srcset="/static/images/cta-turtle@2x.webp 2x" alt=""></div></figure><h2 id='discussion' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#discussion' aria-label='Anchor'></a>Discussion</h2><p>LiveView&#39;s focus navigation commands provide a powerful tool to improve the accessibility and user experience of web applications. By using these commands, we can ensure that the focus is correctly managed and activated, allowing users to navigate through our app with ease. Whether it&#39;s navigating through dropdown menus or managing modal dialog boxes, LiveView&#39;s focus navigation commands provide an intuitive and reliable way to keep our users happy. So why not give them a try and see how they can improve your app&#39;s accessibility and user experience?</p> </content>
</entry>
<entry>
<title>Phoenix Dev Blog - Sounds Like a Bug</title>
<link rel="alternate" href="https://fly.io/phoenix-files/phoenix-dev-blog-sounds-like-a-bug/"/>
<id>https://fly.io/phoenix-files/phoenix-dev-blog-sounds-like-a-bug/</id>
<published>2023-03-15T00:00:00+00:00</published>
<updated>2023-04-06T14:48:02+00:00</updated>
<content type="html"><p class="lead"> This dev blog digs deeper into fixing an 8-year old bug. We learn more about the internals of Phoenix and LiveView in the process. Fly.io is a great place to run a Phoenix application! Check out how to <a href="/docs/elixir/">get started</a>!</p><p>I&#39;ve had my fair share of bug reports over the ~10 year life of maintaining Phoenix. Most are mundane Elixir tweaks, or wrangling some JavaScript issues. The core of Phoenix has been baked for years now, so color me surprised when I found myself spelunking through code about as old as Phoenix itself trying to make sense of what I was seeing.</p> <h2 id='the-bug-report' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#the-bug-report' aria-label='Anchor'></a>The Bug Report</h2><p>What&#39;s interesting about this report is that it almost went unaddressed. It could have been another 10 years before I poked at it. I caught a passing comment on the Phoenix slack about an obscure problem. The user hadn&#39;t yet filed a GitHub issue, so if I had missed this comment, it may have been lost in the ether.</p> <p><img src="/phoenix-files/2023-03-15/bug-report-1.webp?center&amp;card" alt="Possible race condition in a liveview? I have a liveview that calls push_navigate to the same liveview. This causes mount to be called, which calls push_event to a JS hook, and the hook responds back with pushEventTo targeting the liveview. Roughly 25% of the time, that pushEventTo is not triggering the handle_event that should be called. Is there something about the lifecycle that is causing this?" /></p> <p>This description makes it sound like a somewhat &quot;obscure&quot; issue, in that there are a couple features being used together, JavaScript Hooks and Live Navigation, at a specific point in the LiveView lifecycle. So when I read this, I thought it was a potential bug, but sure to be infrequently hit in the wild.</p> <p><img src="/phoenix-files/2023-03-15/bug-report-2.webp?center&amp;card" alt="Chris McCord: sounds like a bug" /></p> <blockquote> <p>Narrator: Yes Chris, it was indeed a bug.</p> </blockquote> <p>The user followed up with more info:</p> <p><img src="/phoenix-files/2023-03-15/bug-report-3.webp?center&amp;card" alt="@chrismccord following up on your comment &quot;sounds like a bug&quot;. I am encountering the issue when using long-polling, but not websockets. Is there something in my code that I would need to change to account for this?" /></p> <p>Great. So it happens only with long polling, and only when using JavaScript Hooks with Live navigation, and only during the LiveView mount. Nothing to get too worked up about, right?!</p> <p>Wrong.</p> <p>In about five minutes I had recreated the issue where the application would break, but to my dismay it was much worse than reported. What sounded like an obscure race of JavaScript Hooks pushing and receiving events to a LiveView doing live navigation sent me down a four hour rabbit hole.</p> <p>To try to isolate the issue, I commented out my JavaScript hook, and simply let the app do a <code>push_navigate</code> in the LiveView when a button was clicked.</p> <p>The client completely broke, about 25% of the time. This is bad.</p> <h2 id='live-navigation-explained' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#live-navigation-explained' aria-label='Anchor'></a>Live Navigation Explained</h2><p>To understand why this is bad, let me explain a bit about what &quot;Live Navigation&quot; is and what the call to <code>push_navigate</code> is. Phoenix LiveView works by rendering the UI on the server and diffing changes back to the browser. We have an abstraction for navigating from page to page without requiring a full browser reload. We do this by issuing a page navigation over the existing transport, such as a WebSocket frame, or a Long-poll message. This has the benefit of avoiding extra HTTP handshakes for WebSockets, and avoiding full page loading and parsing in the case of long-polling.</p> <p>So rather than doing a <code>redirect(socket, to: &quot;/path&quot;)</code> a user may <code>push_navigate(socket, to: &quot;/path&quot;)</code>, and the browser updates and loads the page, but with a nice performance boost. This is a fundamental features of LiveView and one you should use whenever you can.</p> <p>So how was this fundamental feature breaking so easily, and how was this not yet reported? Also, <em>how</em> <em>in the world</em> was this a bug. We hadn&#39;t touched long-poll code in probably 8 years on the client or server.</p> <h2 id='lay-of-the-land' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#lay-of-the-land' aria-label='Anchor'></a>Lay of the Land</h2><p>To understand the bug, we need to understand a little bit of how LiveView and Phoenix channels works. Phoenix LiveView is built on top of Phoenix channels, which is an abstraction for bidirectional client/server messaging. We get the same interface whether you&#39;re running over WebSockets (the default), or long-polling, or any other custom channel transport that speaks the channel protocol. The interface looks like this:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight javascript'><code><span class="kd">let</span> <span class="nx">mainChatChannel</span> <span class="o">=</span> <span class="nx">socket</span><span class="p">.</span><span class="nx">channel</span><span class="p">(</span><span class="dl">"</span><span class="s2">room:1</span><span class="dl">"</span><span class="p">)</span> <span class="nx">mainChatChannel</span><span class="p">.</span><span class="nx">join</span><span class="p">()</span> <span class="p">.</span><span class="nx">receive</span><span class="p">(</span><span class="dl">"</span><span class="s2">ok</span><span class="dl">"</span><span class="p">,</span> <span class="p">({</span><span class="nx">welcome</span><span class="p">})</span> <span class="o">=&gt;</span> <span class="nx">alert</span><span class="p">(</span><span class="s2">`joined! </span><span class="p">${</span><span class="nx">welcome</span><span class="p">}</span><span class="s2">`</span><span class="p">))</span> <span class="p">.</span><span class="nx">receive</span><span class="p">(</span><span class="dl">"</span><span class="s2">error</span><span class="dl">"</span><span class="p">,</span> <span class="p">({</span><span class="nx">reason</span><span class="p">})</span> <span class="o">=&gt;</span> <span class="nx">alert</span><span class="p">(</span><span class="s2">`error: </span><span class="p">${</span><span class="nx">reason</span><span class="p">}</span><span class="s2">`</span><span class="p">))</span> <span class="nx">mainChatChannel</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">"</span><span class="s2">new_msg</span><span class="dl">"</span><span class="p">,</span> <span class="p">({</span><span class="nx">body</span><span class="p">})</span> <span class="o">=&gt;</span> <span class="nx">alert</span><span class="p">(</span><span class="s2">`room:1: </span><span class="p">${</span><span class="nx">body</span><span class="p">}</span><span class="s2">`</span><span class="p">)</span> <span class="kd">let</span> <span class="nx">privateChatChannel</span> <span class="o">=</span> <span class="nx">socket</span><span class="p">.</span><span class="nx">channel</span><span class="p">(</span><span class="dl">"</span><span class="s2">private:123</span><span class="dl">"</span><span class="p">)</span> <span class="nx">privateChatChannel</span><span class="p">.</span><span class="nx">join</span><span class="p">()</span> <span class="p">.</span><span class="nx">receive</span><span class="p">(</span><span class="dl">"</span><span class="s2">ok</span><span class="dl">"</span><span class="p">,</span> <span class="p">({</span><span class="nx">welcome</span><span class="p">})</span> <span class="o">=&gt;</span> <span class="nx">alert</span><span class="p">(</span><span class="s2">`joined! </span><span class="p">${</span><span class="nx">welcome</span><span class="p">}</span><span class="s2">`</span><span class="p">))</span> <span class="p">.</span><span class="nx">receive</span><span class="p">(</span><span class="dl">"</span><span class="s2">error</span><span class="dl">"</span><span class="p">,</span> <span class="p">({</span><span class="nx">reason</span><span class="p">})</span> <span class="o">=&gt;</span> <span class="nx">alert</span><span class="p">(</span><span class="s2">`error: </span><span class="p">${</span><span class="nx">reason</span><span class="p">}</span><span class="s2">`</span><span class="p">))</span> <span class="nx">privateChatChannel</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">"</span><span class="s2">new_msg</span><span class="dl">"</span><span class="p">,</span> <span class="p">({</span><span class="nx">body</span><span class="p">})</span> <span class="o">=&gt;</span> <span class="nx">alert</span><span class="p">(</span><span class="s2">`private: </span><span class="p">${</span><span class="nx">body</span><span class="p">}</span><span class="s2">`</span><span class="p">)</span> </code></pre></div><p>One neat thing about channels is they are multiplexed. This means we can open any number of channels on a single physical connection. Channels are identified by a <em>topic</em>, which is a unique string, such as <code>&quot;room:1&quot;</code> or <code>&quot;private:123&quot;</code> above which allows these isolated &quot;channels&quot; of communication across a single wire.</p> <p>For LiveView, when you connect to the server, we open a channel for each LiveView in the UI. The LiveViews representing each part of the UI each get their own channel. This is nice because each channel process on the server runs concurrently. Blocking work in one channel won&#39;t block work in another, even for the same browser user.</p> <p>So we have multiplexed channels and each channel joins a topic. LiveViews are channels underneath, and so they also use a topic. LiveView topics are randomly generated.</p> <p>The LiveView topic is signed into a token when first rendering the page over the regular HTTP request. We affectionately call this the &quot;dead render&quot; or &quot;dead mount&quot;. On the dead render, we place the token into the page. Then the LiveView connects over channels for the live render, lifts the token from the HTML document, and joins the channel with the topic we signed in the token.</p> <p>We use the token to verify that the channel topic the client is trying to join is indeed the one we leased to them. Within this token is the LiveView module name, router, and other metadata of the code paths we&#39;ll invoke when the user performs a live mount.</p> <p>When you perform live navigation like <code>push_navigate</code> the client will <em>reuse the channel topic</em> for the new LiveView.</p> <p>Hang with me. We&#39;re almost there where we&#39;ll be able to WTF together about the bug.</p> <h2 id='reusing-channel-topics' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#reusing-channel-topics' aria-label='Anchor'></a>Reusing Channel Topics</h2><p>So the LiveViews have topics they join, and they are randomly generated and verified on the server. So why are they re-used for <code>push_navigate</code>? Why not generate a new one? Remember, the token we signed from the <em>dead</em> mount contains the topic. Our whole goal is to avoid making new HTTP requests to fetch a whole new page. We want to take advantage of the existing channel connection. This means re-using the signed token, and thus re-using the channel topic for the &quot;old&quot; LiveView we are navigating away from. The LiveView client conceptually does the following on live navigation:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight javascript'><code><span class="k">this</span><span class="p">.</span><span class="nx">mainLVChannel</span><span class="p">.</span><span class="nx">leave</span><span class="p">()</span> <span class="k">this</span><span class="p">.</span><span class="nx">mainLVChannel</span> <span class="o">=</span> <span class="nx">socket</span><span class="p">.</span><span class="nx">channel</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">mainLVChannel</span><span class="p">.</span><span class="nx">topic</span><span class="p">,</span> <span class="p">{</span><span class="nx">token</span><span class="p">,</span> <span class="na">url</span><span class="p">:</span> <span class="nx">newURL</span><span class="p">}))</span> <span class="k">this</span><span class="p">.</span><span class="nx">mainLVChannel</span><span class="p">.</span><span class="nx">join</span><span class="p">()</span> <span class="p">.</span><span class="nx">receive</span><span class="p">(</span><span class="dl">"</span><span class="s2">ok</span><span class="dl">"</span><span class="p">,</span> <span class="p">(</span><span class="nx">diff</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="nx">Browser</span><span class="p">.</span><span class="nx">pushState</span><span class="p">(</span><span class="nx">newURL</span><span class="p">)</span> <span class="nx">render</span><span class="p">(</span><span class="nx">diff</span><span class="p">))</span> <span class="p">})</span> </code></pre></div><p>To perform live navigation, the client leaves the current LiveView channel and joins a new channel with the same topic. It passes its token from the original HTML document, and the new URL that it wishes to navigate to. On the server, LiveView verifies that the route for the <code>newURL</code> is allowed to be accessed from the old LiveView/URL, and it starts the new channel process. The browser gets the diff on the wire, and updates the URL in the address bar via push state.</p> <h2 id='duplicate-topics' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#duplicate-topics' aria-label='Anchor'></a>Duplicate Topics</h2><p>At this point, the final piece to understand about channels is the way topics are handled in the transport. Since channels are multiplexed, a topic must be unique on the physical connection. If you try run the following client code:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight javascript'><code><span class="kd">let</span> <span class="nx">chan1</span> <span class="o">=</span> <span class="nx">socket</span><span class="p">.</span><span class="nx">channel</span><span class="p">(</span><span class="dl">"</span><span class="s2">room:123</span><span class="dl">"</span><span class="p">)</span> <span class="nx">chan1</span><span class="p">.</span><span class="nx">join</span><span class="p">()</span> <span class="kd">let</span> <span class="nx">chan2</span> <span class="o">=</span> <span class="nx">socket</span><span class="p">.</span><span class="nx">channel</span><span class="p">(</span><span class="dl">"</span><span class="s2">room:123</span><span class="dl">"</span><span class="p">)</span> <span class="nx">chan2</span><span class="p">.</span><span class="nx">join</span><span class="p">()</span> </code></pre></div><p>The server will close <code>chan1</code>, and start a new process for <code>chan2</code>. Each channel instance also carries a unique <code>join_ref</code> , which is essentially a unique session ID . This is important because it allows the server and client to avoid sending latent messages for a given topic to a newer instance on the client, if for example we raced a <code>phx_close</code> event from the server or vice versa.</p> <p>So if the Phoenix transport layer handles duplicate topics already, why are we having a bug with <code>push_navigate</code> re-using topics? And why only with the long-poll transport?</p> <h2 id='diagnosing-the-bug' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#diagnosing-the-bug' aria-label='Anchor'></a>Diagnosing the Bug</h2><p>The bug is experienced in the application as the UI becoming unresponsive. The socket connection remains up, but when a user clicks a navigation link, everything just… stops.</p> <p>Here&#39;s the flow of events that I pieced together, when viewed from the client:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight '><code>1. User visits page LiveView page A 2. User clicks a link that does push_navigate to LiveView page B 3. client longpoll: send phx_leave page A 4. client longpoll: send phx_join page B 5. client longpoll: receive ack for # 3 phx_leave 6. client longpoll: receive ack for # 4 phx_join 7. client longpoll: receive phx_close page B (normal close) </code></pre></div><p>Everything in the logs makes sense until #7. When the user clicks a navigation link, the client sends the correct order of messages. A leave event for the current channel, a join to the new channel, and acknowledgments for each. The new LiveView channel is joined properly, but then <em>it immediately closes with a normal closure from the server.</em></p> <p>WTF.</p> <p>Remember, the Phoenix server handles back-to-back re-use of channel topics just fine. The long-poll client sends the <code>phx_leave</code> before the new <code>phx_join</code> as well, so how in the world are we closing down the new channel?</p> <p>I spent about hour or so of WTF&#39;ery trawling through Phoenix long-poll and transport layer source that I hadn&#39;t seen in years. I then called <a href="https://twitter.com/peregrine">@peregrine</a> , a phoenix-core member and fellow Fly&#39;er. We spelunked through the server code for a couple more hours and pieced together the following flow of events when viewed from the server:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight '><code>1. mount LiveView page A 2. push_navigate to LiveView page B 3. server longpoll: receive phx_join page B 4. server longpoll: receive phx_leave page A </code></pre></div><p>25% of the time we are receiving the <code>phx_leave</code> <em>after</em> the <code>phx_join</code>, even though the client sent the HTTP requests as <code>phx_leave</code>, <code>phx_join</code>. So the client sends the correct order, but the server processes them out of order.</p> <p>I realize at some point that the entire architecture of long-polling is inherently race condition prone. The long-poll transport that has existed for 10 years is fundamentally flawed. Great. But why?</p> <p>The way long-polling works to simulate a bidirectional pipe by POST&#39;ing events to the server for <code>channel.push()</code>, and GET&#39;ing events from the server for <code>channel.on</code> by repeatedly polling the server and hanging the connection awaiting events. Hanging the connection waiting for events is the &quot;long&quot; in long-polling,</p> <p>Meanwhile a process sits on the server and buffers events in between the client going down for each new poll request. This works great, but therein lies the flaw.</p> <p>Since long-poll issues separate HTTP requests for pushed events, those HTTP requests are handled concurrently by the server. Either on the same server in different TCP acceptors from the connection pool, or by different servers entirely due to load balancing. The long-poll transport handles proxying the messages back to the original server in the load-balancing case, but a race condition exists here even for single-server use.</p> <p>Because the HTTP requests are processed concurrently and relayed to the long-poll process, there is no guarantee they will arrive in order.</p> <p>This is bad.</p> <p>It explains our bug where the server sees the <code>phx_join</code>, then the <code>phx_leave</code>. Fortunately, we already have a <code>join_ref</code> which uniquely tracks each channel, so we can detect this situation and prevent the latent close from killing the new channel.</p> <p>This is the <a href="https://github.com/phoenixframework/phoenix/commit/4f48386d79942f8b842001866c5f659516bcd26a">patch</a> in the channel transport layer that resolved the original bug report:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">defp</span> <span class="n">handle_in</span><span class="p">({</span><span class="n">pid</span><span class="p">,</span> <span class="n">_ref</span><span class="p">,</span> <span class="n">_status</span><span class="p">},</span> <span class="p">%{</span><span class="ss">event:</span> <span class="s2">"phx_leave"</span><span class="p">}</span> <span class="o">=</span> <span class="n">msg</span><span class="p">,</span> <span class="n">state</span><span class="p">,</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span> <span class="p">%{</span><span class="ss">topic:</span> <span class="n">topic</span><span class="p">,</span> <span class="ss">join_ref:</span> <span class="n">join_ref</span><span class="p">}</span> <span class="o">=</span> <span class="n">msg</span> <span class="k">case</span> <span class="n">state</span><span class="o">.</span><span class="n">channels_inverse</span> <span class="k">do</span> <span class="c1"># we need to match on nil to handle v1 protocol</span> <span class="p">%{</span><span class="o">^</span><span class="n">pid</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="o">^</span><span class="n">topic</span><span class="p">,</span> <span class="n">existing_join_ref</span><span class="p">}}</span> <span class="ow">when</span> <span class="n">existing_join_ref</span> <span class="ow">in</span> <span class="p">[</span><span class="n">join_ref</span><span class="p">,</span> <span class="no">nil</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="n">send</span><span class="p">(</span><span class="n">pid</span><span class="p">,</span> <span class="n">msg</span><span class="p">)</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="p">{</span><span class="n">update_channel_status</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="n">pid</span><span class="p">,</span> <span class="n">topic</span><span class="p">,</span> <span class="ss">:leaving</span><span class="p">),</span> <span class="n">socket</span><span class="p">}}</span> <span class="c1"># client has raced a server close. No need to reply since we already closed</span> <span class="p">%{</span><span class="o">^</span><span class="n">pid</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="o">^</span><span class="n">topic</span><span class="p">,</span> <span class="n">_old_join_ref</span><span class="p">}}</span> <span class="o">-&gt;</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="p">{</span><span class="n">state</span><span class="p">,</span> <span class="n">socket</span><span class="p">}}</span> <span class="k">end</span> <span class="k">end</span> </code></pre></div><p>I added a <code>handle_in</code> clause for handling incoming messages which looks for <code>phx_leave</code> events. If we receive a <code>phx_leave</code> with a <code>join_ref</code> matching the currently tracked channel, we process it as normal and leave the channel. If we find a mismatched <code>join_ref</code>, it is necessarily from a latent close and we noop. This is also nice because an incorrectly coded client could issue a latent leave.</p> <p>This fixed the bug report. But we can&#39;t celebrate too much yet.</p> <h2 id='fixing-the-fundamental-long-poll-flaw' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#fixing-the-fundamental-long-poll-flaw' aria-label='Anchor'></a>Fixing the Fundamental Long-poll Flaw</h2><p>Fixing the latent leave issue still leaves us with long-poll backed channels that have no message ordering guarantees. This is bad. The following code could not be trusted to deliver messages in order:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight javascript'><code><span class="kd">let</span> <span class="nx">chatChannel</span> <span class="o">=</span> <span class="nx">socket</span><span class="p">.</span><span class="nx">channel</span><span class="p">(</span><span class="dl">"</span><span class="s2">rooms:123</span><span class="dl">"</span><span class="p">)</span> <span class="nx">chatChannel</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="dl">"</span><span class="s2">new_msg</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span><span class="na">body</span><span class="p">:</span> <span class="dl">"</span><span class="s2">this is my first message!</span><span class="dl">"</span><span class="p">})</span> <span class="nx">chatChannel</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="dl">"</span><span class="s2">new_msg</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span><span class="na">body</span><span class="p">:</span> <span class="dl">"</span><span class="s2">this is my second message!</span><span class="dl">"</span><span class="p">})</span> </code></pre></div><p>The code resulted in the following timing issue:</p> <ul> <li>Two POST requests are sent (in order from the client perspective). </li><li>We can&#39;t count on receiving them in that order. </li><li>Depending on which TCP acceptor picked up the request and which core/scheduler processed the request first, the second message could arrive before the first. </li><li>Ditto if you load balance to a completely different server for one of the requests and we have to bounce the message back to you over distributed Elixir. </li></ul> <p>The original bug report could be fixed only with server changes. Fixing this fundamental race condition requires client-side changes. And there are tradeoffs to make this right.</p> <p>Fundamentally we must guarantee channel push ordering from client to server. The easiest solution would be to make channel pushes synchronous. Internally we&#39;d queue all pushes and await an acknowledgment before sending the next one. This would guarantee order, even if you load balance to different servers each time.</p> <p>It would also be super slow.</p> <p>The great thing about WebSockets is we perform the HTTP/TLS handshake a single time and then we get our bidirectional pipe that lets us spam messages one after another – order is preserved. With long-polling, we emulated this, but having to serialize each individual <code>channel.push</code> would require a full round trip one-by-one. It would also mostly eliminate the benefit of live navigation because we&#39;d have to make two round trips to navigate between pages. One to leave the current channel, and one to join the new one. This is a nonstarter.</p> <p>Still, we need a solution, and it needs to be correct.</p> <p>Where we landed is a client-side queue that batches requests. This way we strike a balance between synchronous messages and the full fire-and-forget of WebSockets.</p> <p>When <code>push</code> is invoked, we first check to see if we are awaiting an acknowledgement from a previous batch. If not, we can issue the POST, otherwise we queue it up to be sent as soon as the acknowledgement arrives.</p> <p>This is great, but it still suffered the 2x round trip for live navigation because a back-to-back <code>phx_leave</code> + <code>phx_join</code> on an empty queue would immediately send the leave, and wait a full round trip to send the join. This is not any better for the live navigation case that with an empty queue.</p> <p>I fixed this with a little trick. We know we have to batch, but what we really care about is optimizing the case where you have some procedural code in the same event loop like our chat messages above, or the LiveView navigation.</p> <p>If we are pushing with no current batch, we can schedule the batch to run on the next tick of the JavaScript event loop via a <code>setTimeout(() =&gt; .., 0)</code>. This allows us to catch pushes that happen in the same event loop as the first push. When the next tick fires &quot;0&quot; milliseconds later, we&#39;ll have our back-to-back pushes queued up and sent together in one batch. Here&#39;s the notable snippets from my <a href="https://github.com/phoenixframework/phoenix/commit/2674c6ea30634667f9b09966b90269393b445953">patch</a> to<code>phoenix.js</code> and the <code>LongPoll</code> transport where I used this approach:</p> <p><code>longpoll.js</code>:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight diff'><code> send(body){ <span class="gd">- this.ajax("POST", body, () =&gt; this.onerror("timeout"), resp =&gt; { </span><span class="gi">+ if(this.currentBatch){ + this.currentBatch.push(body) + } else if(this.awaitingBatchAck){ + this.batchBuffer.push(body) + } else { + this.currentBatch = [body] + this.currentBatchTimer = setTimeout(() =&gt; { + this.batchSend(this.currentBatch) + this.currentBatch = null + }, 0) + } </span> } <span class="err"> </span><span class="gi">+ batchSend(messages){ + this.awaitingBatchAck = true + this.ajax("POST", "application/ndjson", messages.join("\n"), () =&gt; this.onerror("timeout"), resp =&gt; { + this.awaitingBatchAck = false </span> if(!resp || resp.status !== 200){ this.onerror(resp &amp;&amp; resp.status) this.closeAndRetry(1011, "internal server error", false) <span class="gi">+ } else if(this.batchBuffer.length &gt; 0){ + this.batchSend(this.batchBuffer) + this.batchBuffer = [] </span> } }) } </code></pre></div><p><code>longpoll.ex</code>:</p> <aside class="right-sidenote"> Puzzled by <code>application/ndjson</code>? That&#39;s to process <a href="http://ndjson.org/">ndjson</a> formatted JSON. It&#39;s just regular JSON that uses newlines to delimit values.</aside><div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight diff'><code> defp publish(conn, server_ref, endpoint, opts) do case read_body(conn, []) do {:ok, body, conn} -&gt; <span class="gd">- status = transport_dispatch(endpoint, server_ref, body, opts) </span><span class="gi">+ # we need to match on both v1 and v2 &amp; wrap for backwards compat + batch = + case get_req_header(conn, "content-type") do + ["application/ndjson"] -&gt; String.split(body, ["\n", "\r\n"]) + _ -&gt; [body] + end </span><span class="err"> </span><span class="gi">+ {conn, status} = + Enum.reduce_while(batch, {conn, nil}, fn msg, {conn, _status} -&gt; + case transport_dispatch(endpoint, server_ref, msg, opts) do + :ok -&gt; {:cont, {conn, :ok}} + :request_timeout = timeout -&gt; {:halt, {conn, timeout}} + end + end) </span><span class="err"> </span> conn |&gt; put_status(status) |&gt; status_json() <span class="err"> </span> _ -&gt; raise Plug.BadRequestError end end </code></pre></div><p>The good news is took a remarkably small amount of code on the client and server to resolve these fundamental issues. Ordering is now guaranteed, and long-polling is still able to be reasonably performant when pushing messages. The bad news was it cost a couple days of work after all was said and done.</p> <h2 id='why-it-took-10-years-for-someone-to-report-this' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#why-it-took-10-years-for-someone-to-report-this' aria-label='Anchor'></a>Why It Took 10 Years for Someone to Report This</h2><p>It seems like such a fundamental design flaw would have been reported by now, right? I think there&#39;s a couple reasons for this.</p> <p>First, the &quot;app is completely broken&quot; failure mode only happened when you have a duplicate topic do a back-to-back channel leave and join. LiveView does this, but it&#39;s not a typical pattern for most regular Phoenix channel applications, where each channel instance will be associated to a unique topic – think each slack DM having its own topic. LiveView has been out for a few years, but the six years prior saw most channels applications simply never use this kind of pattern.</p> <p>Second, it only affected the long-poll transport, which ships with Phoenix, but is not enabled by default. The vast majority of folks aren&#39;t running long-poll today because it&#39;s a knob they only turn when they need it.</p> <p>I&#39;m super happy I was able to connect with the passing issue on Slack and get this fix in place. While I was tending to this &quot;ancient&quot; Phoenix code path, I also took the opportunity to bake in some new long-poll enhancements, which will be the topic for another post.</p> <p>Happy hacking,</p> <p>–Chris</p> <figure class="post-cta"> <figcaption> <h1> Fly.io ❤️ Elixir</h1><p> Fly.io is a great way to run your Phoenix LiveView app close to your users. It&#39;s really easy to get started. You can be running in minutes.</p><p><a class="button bg-white text-violet-600 hover:bg-opacity-75 hover:text-violet-700 transition-colors" href="https://fly.io/docs/elixir/"> Deploy a Phoenix app today!  <span class='opacity:50'>→</span> </a></p> </figcaption><div class="image-container"> <img src="/static/images/cta-rabbit.webp" srcset="/static/images/cta-rabbit@2x.webp 2x" alt=""></div></figure></content>
</entry>
<entry>
<title>Resizing Images using Elixir</title>
<link rel="alternate" href="https://fly.io/phoenix-files/resizing-images-using-elixir/"/>
<id>https://fly.io/phoenix-files/resizing-images-using-elixir/</id>
<published>2023-03-13T00:00:00+00:00</published>
<updated>2023-04-06T14:48:02+00:00</updated>
<content type="html"><p class="lead"> In this article we show how to optimize and resize images on the fly!. Fly.io is a great place to run your Phoenix LiveView applications! Check out how to <a href="/docs/elixir/">get started</a>!</p><p>When building web applications we accept user uploaded images and later want to use them as in our applications. This leads to many questions:</p> <ul> <li>What format will their device upload? Which format do we accept? Which format do we use? </li><li>How many bytes is the upload and do we want to pay to serve that? </li><li>How physically large in pixels is the photo? </li><li>Is the photo oriented correctly? </li><li>Do we want to strip the metadata to help protect our user&#39;s privacy? </li></ul> <p>Luckily, with Elixir, there are <em>many</em> <a href="https://github.com/elixir-mogrify/mogrify">good</a> <a href="https://hexdocs.pm/image/Image.html">libraries</a> to <a href="https://hexdocs.pm/waffle/Waffle.Processor.html#module-imagemagick-transformations">help</a> with this task. So many in fact that you might be wondering what&#39;s the point of even starting this article?</p> <p>While using libraries is a good and handy way to quickly deliver on your goals, it can end up leaving you stuck when you need to go your own way. In this post, we will explore how those libraries work under the hood, because frankly it&#39;s not that complicated! And if you knew how to do it yourself, you might not need a library at all.</p> <p>In this post we will explore shelling out to The Swiss army knife of image manipulation, <a href="https://imagemagick.org/">ImageMagick</a> and an example using a wrapper library around <a href="https://www.libvips.org/">libvips</a> called <a href="https://hexdocs.pm/vix">Vix</a>. We will cover:</p> <ul> <li>Resizing </li><li>Converting formats </li><li>Optimizing </li><li>Fixing Orientation </li><li>Stripping Metadata </li></ul> <h2 id='setup' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#setup' aria-label='Anchor'></a>Setup</h2><p>In this post we will simply be manipulating files on your file system and thus we assume:</p> <ol> <li>You have an image file from a user. </li><li>If you don&#39;t already use a Plug.Upload, you are deleting uploads once you are done with them. </li><li>You are putting your file elsewhere to be served. </li></ol> <p>In our first example, we will be using ImageMagick. Most package managers have a <code>PACKAGE_MANAGER install imagemagick</code> command which should get you set up!</p> <h2 id='imagemagick' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#imagemagick' aria-label='Anchor'></a>ImageMagick</h2><p>The first and most straightforward example is calling the command line tools provided by ImageMagick which is a rock solid, heavily deployed and used, open source toolkit for image manipulation. If we were to call it directly from the command line, it would look something like</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight bash'><code>convert USER_FILE.webp <span class="nt">-strip</span> <span class="nt">-thumbnail</span> 100x100^ <span class="nt">-auto-orient</span> <span class="nt">-format</span> png NEW_FILE.webp </code></pre></div><p>This will <code>-strip</code> your file of metadata and extra bits, resize it to a <code>-thumbnail</code> with an minimum width and height of <code>100x100^</code> with the aspect ratio preserved, attempts to <code>-auto-orient</code> the file and finally <code>-format</code> it as a PNG to <code>NEW_FILE.webp</code>. All in one command and one go to limit memory use!</p> <p>Calling this same function from Elixir is actually incredibly straight forward:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="n">path</span> <span class="o">=</span> <span class="s2">"USER_FILE.webp"</span> <span class="n">output</span> <span class="o">=</span> <span class="s2">"NEW_FILE.webp"</span> <span class="no">System</span><span class="o">.</span><span class="n">cmd</span><span class="p">(</span><span class="s2">"convert"</span><span class="p">,</span> <span class="p">[</span><span class="n">path</span><span class="p">,</span> <span class="s2">"-auto-orient"</span><span class="p">,</span> <span class="s2">"-strip"</span><span class="p">,</span> <span class="s2">"-thumbnail"</span><span class="p">,</span> <span class="s2">"100x100^"</span><span class="p">,</span> <span class="s2">"-format"</span><span class="p">,</span> <span class="s2">"png"</span><span class="p">,</span> <span class="n">output</span><span class="p">])</span> </code></pre></div><p>The result of this is <code>{_cmd output as string, return code 0 for good}</code>. By default, <a href="https://hexdocs.pm/elixir/System.html#cmd/3">System.cmd/3</a> runs synchronously. You can play around with its options to run it in parallel, but I would run it in an <a href="/phoenix-files/liveview-async-task/">Async Task</a>. Imagine a function taking the input path and returning a new one, leaving the original image untouched. If you want to change the file in place, replace <code>convert</code> with <code>morgiphy</code>.</p> <h2 id='libvips' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#libvips' aria-label='Anchor'></a>Libvips</h2><p>The libvips project is an open source image manipulation library written in high performance C/C++, it can do way more low level operations than ImageMagick and is used often in machine learning.</p> <p>Luckily for us someone has already made <a href="https://hexdocs.pm/vix/readme.html">NIF bindings</a> for Elixir, so we don&#39;t have to mess around with C or machine learning matrix math.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="n">path</span> <span class="o">=</span> <span class="s2">"USER_FILE.webp"</span> <span class="n">output</span> <span class="o">=</span> <span class="s2">"NEW_FILE.webp"</span> <span class="no">Vix</span><span class="o">.</span><span class="no">Vips</span><span class="o">.</span><span class="no">Operation</span><span class="o">.</span><span class="n">thumbnail!</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="no">Vix</span><span class="o">.</span><span class="no">Image</span><span class="o">.</span><span class="n">write_to_file</span><span class="p">(</span><span class="n">output</span><span class="p">)</span> </code></pre></div><p>And that&#39;s it, the default options for <a href="https://hexdocs.pm/vix/Vix.Vips.Operation.html#thumbnail/3"><code>Operation.thumbnail!/3</code></a> will strip, orient and resize preserving the aspect ratio for you. The <a href="https://hexdocs.pm/vix/Vix.Vips.Image.html#write_to_file/2"><code>Image.write_to_file/2</code></a> will magically convert to a PNG and apply some optimizations. Vix has many, many options and functions to really dial in your images, but I recommend you dig into them yourself! For real, reading the docs is a great way to learn.</p> <p>If you&#39;d like a higher level library for working with images there is the fantastic <a href="https://hexdocs.pm/image/Image.html">Image</a> package which provides a higher level API to Vix, and to help with the important stuff like <a href="https://hexdocs.pm/image/Image.html#meme/3">memes</a>.</p> <h2 id='wrapping-up' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#wrapping-up' aria-label='Anchor'></a>Wrapping Up</h2><p>Ultimately, being able to <code>shell</code> out to the command line is a powerful tool, and greatly expands any developer&#39;s capabilities. I have <em>only</em> barely scratched the surface of what&#39;s possible here in terms of calling command line tools like this. We can go very far with just System.cmd, but if you need more fined grained process control and supervision, you will want to look into the <a href="https://hexdocs.pm/elixir/Port.html">Port</a> module documentation.</p> <h2 id='what-else-is-there-for-images' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#what-else-is-there-for-images' aria-label='Anchor'></a>What Else Is There for Images?</h2><p>Optimizing images is a deep rabbit hole and sticking with these tools you can&#39;t really go wrong, but here are some other tools:</p> <ul> <li><a href="https://pngquant.org/">pngquant</a> can help you squeeze a PNG down to size. </li><li><a href="https://github.com/tjko/jpegoptim">jpgegoptim</a> is the industry standard for JPEG optimization. </li></ul> <p>Call these after you&#39;ve resized them to what you need. You may also want to reduce <code>quality</code> optimizations in ImageMagick/Vix to a minimum so that you don&#39;t apply them twice. Experimentation is required!</p> <p>And one may be asking &quot;sure but what do the pro&#39;s use?&quot; and the answer is ImageMagick and libvips. They may have complex image processing pipelines running on huge machines, but ultimately somewhere they shell out or call C/C++ to these tools or similar open source projects. Every &quot;cloud image processor&quot; is doing this as well and now we can too!</p> <figure class="post-cta"> <figcaption> <h1> Fly.io ❤️ Elixir</h1><p> Fly.io is a great way to run your Phoenix LiveView app close to your users. It&#39;s really easy to get started. You can be running in minutes.</p><p><a class="button bg-white text-violet-600 hover:bg-opacity-75 hover:text-violet-700 transition-colors" href="https://fly.io/docs/elixir/"> Deploy a Phoenix app today!&nbsp;&nbsp;<span class='opacity:50'>&rarr;</span> </a></p> </figcaption><div class="image-container"> <img src="/static/images/cta-kitty.webp" srcset="/static/images/cta-kitty@2x.webp 2x" alt=""></div></figure></content>
</entry>
<entry>
<title>Single File Elixir Scripts</title>
<link rel="alternate" href="https://fly.io/phoenix-files/single-file-elixir-scripts/"/>
<id>https://fly.io/phoenix-files/single-file-elixir-scripts/</id>
<published>2023-03-08T00:00:00+00:00</published>
<updated>2023-04-06T14:48:02+00:00</updated>
<content type="html"><p class="lead"> This article&#39;s about running single file Elixir scripts. We even show a Phoenix LiveView Example! Fly.io is a great place to run your Phoenix applications. Check out how to <a href="/docs/elixir/">get started</a>!</p><p>Elixir has powerful built in scripting functionality, allowing us to write Elixir to a file&mdash;say <code>my_script.exs</code>&mdash; and execute it directly by <code>elixir my_script.exs</code>.</p> <p>The vast majority of production Elixir projects will be directly compiled via mix with all available optimizations and performance enhancements enabled. But let&#39;s explore what we can accomplish when we go on <em>script</em> and throw out compilation!</p> <h3 id='mix-install-2' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#mix-install-2' aria-label='Anchor'></a>Mix.install/2</h3><p>The first command to know is <code>Mix.install/2</code>. If you are familiar with <a href="https://livebook.dev/">Livebook</a> this will be a review, but this command enables installation of <em>any</em> <a href="https://hex.pm/">hex</a> package. Let&#39;s jump in:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="no">Mix</span><span class="o">.</span><span class="n">install</span><span class="p">([</span> <span class="ss">:req</span><span class="p">,</span> <span class="p">{</span><span class="ss">:jason</span><span class="p">,</span> <span class="s2">"~&gt; 1.0"</span><span class="p">}</span> <span class="p">])</span> <span class="no">Req</span><span class="o">.</span><span class="n">get!</span><span class="p">(</span><span class="s2">"https://api.github.com/repos/elixir-lang/elixir"</span><span class="p">)</span><span class="o">.</span><span class="n">body</span><span class="p">[</span><span class="s2">"description"</span><span class="p">]</span> <span class="o">|&gt;</span> <span class="n">dbg</span><span class="p">()</span> </code></pre></div><p>Here we install the latest version of the wonderful <a href="https://github.com/wojtekmach/req">req</a> HTTP client and version 1 for the perfectly named JSON library <a href="https://github.com/michalmuskala/jason">jason</a>. Once installed, you can immediately use them. Technically we didn&#39;t need to install jason because req included it, but I did as an example.</p> <h3 id='application-put_env-4' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#application-put_env-4' aria-label='Anchor'></a>Application.put_env/4</h3><p>The second function we will need is <a href="https://hexdocs.pm/elixir/Application.html#put_env/4">Application.put_env/4</a>. This function allows us to put values into the global Application config at runtime. Here is the base environment configuration we need if we want to configure a Phoenix Endpoint:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="no">Application</span><span class="o">.</span><span class="n">put_env</span><span class="p">(</span><span class="ss">:sample</span><span class="p">,</span> <span class="no">SamplePhoenix</span><span class="o">.</span><span class="no">Endpoint</span><span class="p">,</span> <span class="ss">http:</span> <span class="p">[</span><span class="ss">ip:</span> <span class="p">{</span><span class="mi">127</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">},</span> <span class="ss">port:</span> <span class="mi">5001</span><span class="p">],</span> <span class="ss">server:</span> <span class="no">true</span><span class="p">,</span> <span class="ss">live_view:</span> <span class="p">[</span><span class="ss">signing_salt:</span> <span class="s2">"aaaaaaaa"</span><span class="p">],</span> <span class="ss">secret_key_base:</span> <span class="no">String</span><span class="o">.</span><span class="n">duplicate</span><span class="p">(</span><span class="s2">"a"</span><span class="p">,</span> <span class="mi">64</span><span class="p">)</span> <span class="p">)</span> </code></pre></div><p>This isn&#39;t the <em>only</em> way to configure something. We could have included an option to Mix.install like so:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="no">Mix</span><span class="o">.</span><span class="n">install</span><span class="p">([</span> <span class="ss">:bandit</span><span class="p">,</span> <span class="ss">:phoenix</span><span class="p">,</span> <span class="p">{</span><span class="ss">:jason</span><span class="p">,</span> <span class="s2">"~&gt; 1.0"</span><span class="p">}</span> <span class="p">],</span> <span class="ss">config:</span> <span class="p">[</span> <span class="ss">sample:</span> <span class="p">[</span> <span class="no">SamplePhoenix</span><span class="o">.</span><span class="ss">Endpoint:</span> <span class="p">[</span> <span class="ss">http:</span> <span class="p">[</span><span class="ss">ip:</span> <span class="p">{</span><span class="mi">127</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">},</span> <span class="ss">port:</span> <span class="mi">5001</span><span class="p">],</span> <span class="ss">server:</span> <span class="no">true</span><span class="p">,</span> <span class="ss">live_view:</span> <span class="p">[</span><span class="ss">signing_salt:</span> <span class="s2">"aaaaaaaa"</span><span class="p">],</span> <span class="ss">secret_key_base:</span> <span class="no">String</span><span class="o">.</span><span class="n">duplicate</span><span class="p">(</span><span class="s2">"a"</span><span class="p">,</span> <span class="mi">64</span><span class="p">)</span> <span class="p">]</span> <span class="p">]</span> <span class="p">]</span> <span class="p">)</span> </code></pre></div><h2 id='now-what' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#now-what' aria-label='Anchor'></a>Now What?</h2><p>With those two functions we have the basic foundation to do <em>anything</em> Elixir can do but in a single, portable file!</p> <p>We can do...</p> <h2 id='system-administration' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#system-administration' aria-label='Anchor'></a>System Administration</h2><div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="n">retirement</span> <span class="o">=</span> <span class="no">Path</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="no">System</span><span class="o">.</span><span class="n">user_home!</span><span class="p">(),</span> <span class="s2">"retirement"</span><span class="p">])</span> <span class="no">File</span><span class="o">.</span><span class="n">mkrp!</span><span class="p">(</span><span class="n">retirement</span><span class="p">)</span> <span class="c1"># Get rid of those old .ex files who needs em!</span> <span class="no">Path</span><span class="o">.</span><span class="n">wildcard</span><span class="p">(</span><span class="s2">"**/*.ex"</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="no">Enum</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="k">fn</span> <span class="n">f</span> <span class="o">-&gt;</span> <span class="p">{{</span><span class="n">year</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">_</span><span class="p">,},</span> <span class="n">_</span><span class="p">}</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">stat!</span><span class="p">(</span><span class="n">f</span><span class="p">)</span><span class="o">.</span><span class="n">mtime</span> <span class="n">year</span> <span class="o">&lt;</span> <span class="mi">2023</span> <span class="k">end</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="no">Enum</span><span class="o">.</span><span class="n">each</span><span class="p">(</span><span class="k">fn</span> <span class="n">compiled_file</span> <span class="o">-&gt;</span> <span class="no">File</span><span class="o">.</span><span class="n">mv!</span><span class="p">(</span><span class="n">compiled_file</span><span class="p">,</span> <span class="n">retirement</span><span class="p">)</span> <span class="c1"># we only need .exs files now</span> <span class="k">end</span><span class="p">)</span> </code></pre></div><h2 id='data-processing' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#data-processing' aria-label='Anchor'></a>Data Processing</h2><div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="no">Mix</span><span class="o">.</span><span class="n">install</span><span class="p">([</span> <span class="ss">:req</span><span class="p">,</span> <span class="ss">:nimble_csv</span> <span class="p">])</span> <span class="c1"># Req will parse CSVs for us!</span> <span class="no">Req</span><span class="o">.</span><span class="n">get!</span><span class="p">(</span><span class="s2">"https://api.covidtracking.com/v1/us/daily.csv"</span><span class="p">)</span><span class="o">.</span><span class="n">body</span> <span class="o">|&gt;</span> <span class="no">Enum</span><span class="o">.</span><span class="n">reduce</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="k">fn</span> <span class="n">row</span><span class="p">,</span> <span class="n">count</span> <span class="o">-&gt;</span> <span class="n">death_increase</span> <span class="o">=</span> <span class="no">String</span><span class="o">.</span><span class="n">to_integer</span><span class="p">(</span><span class="no">Enum</span><span class="o">.</span><span class="n">at</span><span class="p">(</span><span class="n">row</span><span class="p">,</span> <span class="mi">19</span><span class="p">))</span> <span class="n">count</span> <span class="o">+</span> <span class="n">death_increase</span> <span class="k">end</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="no">IO</span><span class="o">.</span><span class="n">puts</span><span class="p">()</span> </code></pre></div><h2 id='report-phoenix-liveview-bugs' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#report-phoenix-liveview-bugs' aria-label='Anchor'></a>Report Phoenix LiveView Bugs</h2><p>Let&#39;s say you&#39;ve discovered a bug in LiveView and want to report it. You can increase the odds of it getting fixed quickly by providing a bare-bones example. You could <code>mix phx.new</code> a project and push it up to GitHub, or you could make a single file example and put it in a gist! In fact, Phoenix core contributor <a href="https://github.com/Gazler">Gary Rennie</a> does this so often that I affectionately call these files Garyfiles.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="no">Application</span><span class="o">.</span><span class="n">put_env</span><span class="p">(</span><span class="ss">:sample</span><span class="p">,</span> <span class="no">SamplePhoenix</span><span class="o">.</span><span class="no">Endpoint</span><span class="p">,</span> <span class="ss">http:</span> <span class="p">[</span><span class="ss">ip:</span> <span class="p">{</span><span class="mi">127</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">},</span> <span class="ss">port:</span> <span class="mi">5001</span><span class="p">],</span> <span class="ss">server:</span> <span class="no">true</span><span class="p">,</span> <span class="ss">live_view:</span> <span class="p">[</span><span class="ss">signing_salt:</span> <span class="s2">"aaaaaaaa"</span><span class="p">],</span> <span class="ss">secret_key_base:</span> <span class="no">String</span><span class="o">.</span><span class="n">duplicate</span><span class="p">(</span><span class="s2">"a"</span><span class="p">,</span> <span class="mi">64</span><span class="p">)</span> <span class="p">)</span> <span class="no">Mix</span><span class="o">.</span><span class="n">install</span><span class="p">([</span> <span class="p">{</span><span class="ss">:plug_cowboy</span><span class="p">,</span> <span class="s2">"~&gt; 2.5"</span><span class="p">},</span> <span class="p">{</span><span class="ss">:jason</span><span class="p">,</span> <span class="s2">"~&gt; 1.0"</span><span class="p">},</span> <span class="p">{</span><span class="ss">:phoenix</span><span class="p">,</span> <span class="s2">"~&gt; 1.7.0-rc.2"</span><span class="p">,</span> <span class="ss">override:</span> <span class="no">true</span><span class="p">},</span> <span class="p">{</span><span class="ss">:phoenix_live_view</span><span class="p">,</span> <span class="s2">"~&gt; 0.18.2"</span><span class="p">}</span> <span class="p">])</span> <span class="k">defmodule</span> <span class="no">SamplePhoenix</span><span class="o">.</span><span class="no">ErrorView</span> <span class="k">do</span> <span class="k">def</span> <span class="n">render</span><span class="p">(</span><span class="n">template</span><span class="p">,</span> <span class="n">_</span><span class="p">),</span> <span class="k">do</span><span class="p">:</span> <span class="no">Phoenix</span><span class="o">.</span><span class="no">Controller</span><span class="o">.</span><span class="n">status_message_from_template</span><span class="p">(</span><span class="n">template</span><span class="p">)</span> <span class="k">end</span> <span class="k">defmodule</span> <span class="no">SamplePhoenix</span><span class="o">.</span><span class="no">SampleLive</span> <span class="k">do</span> <span class="kn">use</span> <span class="no">Phoenix</span><span class="o">.</span><span class="no">LiveView</span><span class="p">,</span> <span class="ss">layout:</span> <span class="p">{</span><span class="bp">__MODULE__</span><span class="p">,</span> <span class="ss">:live</span><span class="p">}</span> <span class="k">def</span> <span class="n">mount</span><span class="p">(</span><span class="n">_params</span><span class="p">,</span> <span class="n">_session</span><span class="p">,</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span> <span class="p">{</span><span class="ss">:oops</span><span class="p">,</span> <span class="n">assign</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="ss">:count</span><span class="p">,</span> <span class="mi">0</span><span class="p">)}</span> <span class="k">end</span> <span class="k">def</span> <span class="n">render</span><span class="p">(</span><span class="s2">"live.html"</span><span class="p">,</span> <span class="n">assigns</span><span class="p">)</span> <span class="k">do</span> <span class="sx">~H""</span><span class="s2">" &lt;script src="</span><span class="ss">https:</span><span class="o">//</span><span class="n">cdn</span><span class="o">.</span><span class="n">jsdelivr</span><span class="o">.</span><span class="n">net</span><span class="o">/</span><span class="n">npm</span><span class="o">/</span><span class="n">phoenix</span><span class="err">@</span><span class="mf">1.7</span><span class="o">.</span><span class="mi">0</span><span class="o">-</span><span class="n">rc</span><span class="o">.</span><span class="mi">2</span><span class="o">/</span><span class="n">priv</span><span class="o">/</span><span class="n">static</span><span class="o">/</span><span class="n">phoenix</span><span class="o">.</span><span class="n">min</span><span class="o">.</span><span class="n">js</span><span class="s2">"&gt;&lt;/script&gt; &lt;script src="</span><span class="ss">https:</span><span class="o">//</span><span class="n">cdn</span><span class="o">.</span><span class="n">jsdelivr</span><span class="o">.</span><span class="n">net</span><span class="o">/</span><span class="n">npm</span><span class="o">/</span><span class="n">phoenix_live_view</span><span class="err">@</span><span class="mf">0.18</span><span class="o">.</span><span class="mi">2</span><span class="o">/</span><span class="n">priv</span><span class="o">/</span><span class="n">static</span><span class="o">/</span><span class="n">phoenix_live_view</span><span class="o">.</span><span class="n">min</span><span class="o">.</span><span class="n">js</span><span class="s2">"&gt;&lt;/script&gt; &lt;script&gt; let liveSocket = new window.LiveView.LiveSocket("</span><span class="o">/</span><span class="n">live</span><span class="s2">", window.Phoenix.Socket) liveSocket.connect() &lt;/script&gt; &lt;style&gt; * { font-size: 1.1em; } &lt;/style&gt; """</span> <span class="k">end</span> <span class="k">def</span> <span class="n">render</span><span class="p">(</span><span class="n">assigns</span><span class="p">)</span> <span class="k">do</span> <span class="sx">~H""</span><span class="s2">" &lt;button phx-click="</span><span class="n">inc</span><span class="s2">"&gt;+&lt;/button&gt; &lt;button phx-click="</span><span class="n">dec</span><span class="s2">"&gt;-&lt;/button&gt; """</span> <span class="k">end</span> <span class="k">def</span> <span class="n">handle_event</span><span class="p">(</span><span class="s2">"inc"</span><span class="p">,</span> <span class="n">_params</span><span class="p">,</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span> <span class="p">{</span><span class="ss">:noreply</span><span class="p">,</span> <span class="n">assign</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="ss">:count</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">assigns</span><span class="o">.</span><span class="n">count</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)}</span> <span class="k">end</span> <span class="k">def</span> <span class="n">handle_event</span><span class="p">(</span><span class="s2">"dec"</span><span class="p">,</span> <span class="n">_params</span><span class="p">,</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span> <span class="p">{</span><span class="ss">:noreply</span><span class="p">,</span> <span class="n">assign</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="ss">:count</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">assigns</span><span class="o">.</span><span class="n">count</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)}</span> <span class="k">end</span> <span class="k">end</span> <span class="k">defmodule</span> <span class="no">Router</span> <span class="k">do</span> <span class="kn">use</span> <span class="no">Phoenix</span><span class="o">.</span><span class="no">Router</span> <span class="kn">import</span> <span class="no">Phoenix</span><span class="o">.</span><span class="no">LiveView</span><span class="o">.</span><span class="no">Router</span> <span class="n">pipeline</span> <span class="ss">:browser</span> <span class="k">do</span> <span class="n">plug</span><span class="p">(</span><span class="ss">:accepts</span><span class="p">,</span> <span class="p">[</span><span class="s2">"html"</span><span class="p">])</span> <span class="k">end</span> <span class="n">scope</span> <span class="s2">"/"</span><span class="p">,</span> <span class="no">SamplePhoenix</span> <span class="k">do</span> <span class="n">pipe_through</span><span class="p">(</span><span class="ss">:browser</span><span class="p">)</span> <span class="n">live</span><span class="p">(</span><span class="s2">"/"</span><span class="p">,</span> <span class="no">SampleLive</span><span class="p">,</span> <span class="ss">:index</span><span class="p">)</span> <span class="k">end</span> <span class="k">end</span> <span class="k">defmodule</span> <span class="no">SamplePhoenix</span><span class="o">.</span><span class="no">Endpoint</span> <span class="k">do</span> <span class="kn">use</span> <span class="no">Phoenix</span><span class="o">.</span><span class="no">Endpoint</span><span class="p">,</span> <span class="ss">otp_app:</span> <span class="ss">:sample</span> <span class="n">socket</span><span class="p">(</span><span class="s2">"/live"</span><span class="p">,</span> <span class="no">Phoenix</span><span class="o">.</span><span class="no">LiveView</span><span class="o">.</span><span class="no">Socket</span><span class="p">)</span> <span class="n">plug</span><span class="p">(</span><span class="no">Router</span><span class="p">)</span> <span class="k">end</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">_</span><span class="p">}</span> <span class="o">=</span> <span class="no">Supervisor</span><span class="o">.</span><span class="n">start_link</span><span class="p">([</span><span class="no">SamplePhoenix</span><span class="o">.</span><span class="no">Endpoint</span><span class="p">],</span> <span class="ss">strategy:</span> <span class="ss">:one_for_one</span><span class="p">)</span> <span class="no">Process</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="ss">:infinity</span><span class="p">)</span> </code></pre></div><p>Turns out the bug wasn&#39;t in Phoenix at all and was an oopsie on my part. Can you spot it?</p> <p>This one is slightly more involved and is based on the <a href="https://github.com/wojtekmach/mix_install_examples/"><code>wojtekmach/mix_install_examples</code></a> project. With this file you have a fully functional Phoenix LiveView application in a single file running on port 5001!</p> <p>And you can see all of the stuff you <em>need</em> to make Phoenix Work, and frankly it&#39;s not that much. When people say we need a &quot;lightweight web framework&quot; ask them what&#39;s unnecessary in this file!</p> <aside class="callout"> <strong class='font-semibold text-navy'>One word of warning</strong>, if you plan on putting this up on a small Fly.io machine you will need to use Bandit instead of Cowboy. Building the deps for Cowboy will use a ton of memory to build when using Mix.install.</aside><h2 id='report-fly-io-issues' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#report-fly-io-issues' aria-label='Anchor'></a>Report Fly.io Issues</h2><p>Here at Fly.io we try to be super responsive on the questions on our <a href="https://community.fly.io/">community forum</a>. Let&#39;s say we have an issue with using <code>mnesia</code> and fly volumes, like some users <a href="https://community.fly.io/t/using-fly-volumes-with-mnesia-phoenix-and-pow/1756/18">recently posted</a>. If we wanted to post an isolated bug report, we could set up a minimal project to help really get the attention of the support team.</p> <p>First, we&#39;d want a Dockerfile that can run Elixir scripts</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight docker'><code><span class="c"># syntax = docker/dockerfile:1</span> <span class="k">FROM</span><span class="s"> "hexpm/elixir:1.14.2-erlang-25.2-debian-bullseye-20221004-slim"</span> <span class="c"># install dependencies</span> <span class="k">RUN </span>apt-get update <span class="nt">-y</span> <span class="o">&amp;&amp;</span> apt-get <span class="nb">install</span> <span class="nt">-y</span> build-essential git libstdc++6 openssl libncurses5 locales <span class="se">\ </span> <span class="o">&amp;&amp;</span> apt-get clean <span class="o">&amp;&amp;</span> <span class="nb">rm</span> <span class="nt">-f</span> /var/lib/apt/lists/<span class="k">*</span>_<span class="k">*</span> <span class="c"># Set the locale</span> <span class="k">RUN </span><span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">'/en_US.UTF-8/s/^# //g'</span> /etc/locale.gen <span class="o">&amp;&amp;</span> locale-gen <span class="c"># Env variables we might want</span> <span class="k">ENV</span><span class="s"> LANG en_US.UTF-8</span> <span class="k">ENV</span><span class="s"> LANGUAGE en_US:en</span> <span class="k">ENV</span><span class="s"> LC_ALL en_US.UTF-8</span> <span class="k">ENV</span><span class="s"> ECTO_IPV6 true</span> <span class="k">ENV</span><span class="s"> ERL_AFLAGS "-proto_dist inet6_tcp"</span> <span class="k">WORKDIR</span><span class="s"> "/app"</span> <span class="c"># Copy our files over</span> <span class="k">COPY</span><span class="s"> bug.exs /app</span> <span class="c"># install hex + rebar if you plan on using Mix.install</span> <span class="k">RUN </span>mix local.hex <span class="nt">--force</span> <span class="o">&amp;&amp;</span> <span class="se">\ </span> mix local.rebar <span class="nt">--force</span> <span class="k">CMD</span><span class="s"> elixir /app/bug.exs</span> </code></pre></div><p>Finally add our <code>bug.exs</code></p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="n">vol_dir</span> <span class="o">=</span> <span class="no">System</span><span class="o">.</span><span class="n">get_env</span><span class="p">(</span><span class="s2">"VOL_DIR"</span><span class="p">)</span> <span class="o">||</span> <span class="s2">"/data"</span> <span class="c1"># Setup mnesiua</span> <span class="no">Application</span><span class="o">.</span><span class="n">put_env</span><span class="p">(</span><span class="ss">:mnesia</span><span class="p">,</span> <span class="ss">:dir</span><span class="p">,</span> <span class="n">to_charlist</span><span class="p">(</span><span class="n">vol_dir</span><span class="p">))</span> <span class="ss">:ok</span> <span class="o">=</span> <span class="no">Application</span><span class="o">.</span><span class="n">start</span><span class="p">(</span><span class="ss">:mnesia</span><span class="p">)</span> <span class="c1"># Check that mnesia is working</span> <span class="n">dbg</span><span class="p">(</span><span class="ss">:mnesia</span><span class="o">.</span><span class="n">change_table_copy_type</span><span class="p">(</span><span class="ss">:schema</span><span class="p">,</span> <span class="n">node</span><span class="p">(),</span> <span class="ss">:disc_copies</span><span class="p">))</span> <span class="c1"># Maybe try writing a file to see whatsup</span> <span class="n">path</span> <span class="o">=</span> <span class="no">Path</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">vol_dir</span><span class="p">,</span> <span class="s2">"hello.txt"</span><span class="p">])</span> <span class="no">File</span><span class="o">.</span><span class="n">write!</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="s2">"Hello from elixir!"</span><span class="p">)</span> <span class="no">IO</span><span class="o">.</span><span class="n">puts</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">read!</span><span class="p">(</span><span class="n">path</span><span class="p">))</span> <span class="no">Process</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="ss">:infinity</span><span class="p">)</span> <span class="c1"># Keep it running so fly knows its okay</span> </code></pre></div><p>And our <code>fly.toml</code></p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight '><code>app = "APP NAME" [mounts] source = "data" destination = "/data" </code></pre></div><p>Now we can <code>fly create APP_NAME</code>, <code>fly volumes create data</code>, <code>fly deploy</code> and then check the logs <code>fly logs</code> to see what failed.</p> <p>In this case, I couldn&#39;t reproduce the error they were seeing. But it is helpful to have some code that&#39;s isolated to only the problem you are having. We could also see starting up a Phoenix server this way and deploying a weekend tiny app. I wouldn&#39;t recommend it, but you could!</p> <h2 id='in-conclusion' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#in-conclusion' aria-label='Anchor'></a>In Conclusion</h2><p>If you take nothing else away from this post, I hope you click around <a href="https://github.com/wojtekmach">Wojtek Mach</a>&#39;s FANTASTIC <a href="https://github.com/wojtekmach/mix_install_examples/"><code>mix_install_examples</code></a> repository for Elixir script inspiration. You can do just about anything from Machine Learning to low level Systems Programming, all from a single file and the Elixir runtime.</p> <p>And finally, please don&#39;t be afraid to use them as a development tools. If you encounter a nasty bug in a library or your code, it can really help to isolate it to JUST the failing code and build out a simple repeatable test case like this.</p> <p>Or maybe instead of asking ChatGPT to write you a shell script, write it in Elixir, so a human can read it.</p> <figure class="post-cta"> <figcaption> <h1> Fly.io ❤️ Elixir</h1><p> Fly.io is a great way to run your Phoenix LiveView app close to your users. It&#39;s really easy to get started. You can be running in minutes.</p><p><a class="button bg-white text-violet-600 hover:bg-opacity-75 hover:text-violet-700 transition-colors" href="https://fly.io/docs/elixir/"> Deploy a Phoenix app today!&nbsp;&nbsp;<span class='opacity:50'>&rarr;</span> </a></p> </figcaption><div class="image-container"> <img src="/static/images/cta-rabbit.webp" srcset="/static/images/cta-rabbit@2x.webp 2x" alt=""></div></figure></content>
</entry>
<entry>
<title>Phoenix Dev Blog - Streams</title>
<link rel="alternate" href="https://fly.io/phoenix-files/phoenix-dev-blog-streams/"/>
<id>https://fly.io/phoenix-files/phoenix-dev-blog-streams/</id>
<published>2023-02-27T00:00:00+00:00</published>
<updated>2023-04-06T14:48:02+00:00</updated>
<content type="html"><p class="lead"> This dev blog introduces LiveView&#39;s new Streams feature. It lets us elegantly work with large collections of items without keeping them all in memory on the server. Fly.io is a great place to run a Phoenix application! Check out how to <a href="/docs/elixir/">get started</a>!</p><p>This is the first installment of the Phoenix development blog where we&#39;ll talk about in progress features or day-to-day development updates in between major releases and milestones.</p> <h2 id='what-s-the-problem' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#what-s-the-problem' aria-label='Anchor'></a>What&#39;s the Problem?</h2><p>For at least a few years, the Phoenix team has wanted a solution that elegantly addresses large collections of items without requiring the collection to live in memory on the server. We&#39;ve had a hack in place by allowing a container to be marked with <code>phx-update=&quot;append&quot;</code> or <code>phx-update=&quot;prepend&quot;</code> . It worked for some use cases, but it sucked even when it worked. Let&#39;s see why.</p> <p>Today it works by marking an assign as &quot;temporary&quot;, which means the server throws it away after rendering it. Then to append a new item, we allow the developer to render only the new items, and the client would automagically leave the old ones in place instead of removing them. In practice it looked like this:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">def</span> <span class="n">render</span><span class="p">(</span><span class="n">assigns</span><span class="p">)</span> <span class="k">do</span> <span class="sx">~H""</span><span class="s2">" &lt;div id="</span><span class="n">users</span><span class="s2">" phx-update="</span><span class="n">append</span><span class="s2">"&gt; &lt;div :for={user &lt;- @users} id={"</span><span class="n">user</span><span class="o">-</span><span class="c1">#{user.id}"}&gt;</span> <span class="o">&lt;%=</span> <span class="n">user</span><span class="o">.</span><span class="n">name</span> <span class="p">%</span><span class="o">&gt;</span> <span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span> <span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span> <span class="s2">""" end def mount(_, _, socket) do users = Accounts.list_users() {:ok, assign(socket, users: users), temporary_assigns: [users: []] end def handle_info({:user_added, new_user}) do {:noreply, assign(socket, users: [new_user])} end </span></code></pre></div><p>The append/prepend trick allowed developers to start with a &quot;naive&quot; in-memory store of the collection, then optimize it without changing much of their code. They render the collection in <code>render/1</code> with a regular <code>for</code> comprehension, and assign it in the callbacks with regular <code>assign</code>.</p> <p>The trick can be seen on line 17, where we re-assign the empty users collection to a single element list with only our new users. When Phoenix LiveView goes to patch the DOM, it will see the parent container is marked with <code>phx-update=&quot;append&quot;</code> and leave the existing children alone, while adding the new ones.</p> <p>Great! Everyone is happy, except this approach sucked for a number of reasons.</p> <p>First, deletions were not supported. You&#39;d need to write some JavaScript yourself to remove the DOM elements, and in the case of components you could easily break our own component tracking. Next, the containers only supported two modes of operation: append or prepend. It was not easy to swap the behaviors such as appending a list of posts in a timeline while also prepending new posts on top. Sorting was also not possible. Finally, the internal implementation was expensive and brittle. Before each DOM patch, we had to &quot;fake&quot; the DOM tree to make it look like newly patched items were present in the new tree to ensure <a href="https://github.com/patrick-steele-idem/morphdom">morphdom</a> would leave our existing items intact rather than considering them removed.</p> <h2 id='enter-streams' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#enter-streams' aria-label='Anchor'></a>Enter Streams</h2><p>We are introducing a new &quot;streams&quot; feature to solve the issues above. New Phoenix 1.7 applications will use streams out of the box for the <code>phx.gen.live</code> LiveView generators.</p> <p>Streams bring a new <code>stream</code> interface while also carrying over the ease of gradual optimization we had before. Streams support dynamic ordering, which makes appending, prepending, or reordering trivial for the developer. Deletes are also just as trivial. Let&#39;s refactor our original example to see how:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight diff'><code><span class="p">def render(assigns) do </span> ~H""" &lt;div id="users" phx-update="stream"&gt; <span class="gd">- &lt;div :for={user &lt;- @users} id={"user-#{user.id}"}&gt; </span><span class="gi">+ &lt;div :for={{id, user} &lt;- @streams.users} id={id}&gt; </span> &lt;%= user.name %&gt; &lt;/div&gt; &lt;/div&gt; """ <span class="p">end </span><span class="err"> </span><span class="p">def mount(_, _, socket) do </span> users = Accounts.list_users() <span class="gd">- {:ok, assign(socket, users: users), temporary_assigns: [users: []] </span><span class="gi">+ {:ok, stream(socket, :users, users)} </span><span class="p">end </span><span class="err"> </span><span class="p">def handle_info({:user_added, new_user}) do </span><span class="gd">- {:noreply, assign(socket, users: [new_user])} </span><span class="gi">+ {:noreply, stream_insert(socket, :users, new_user)} </span><span class="p">end </span></code></pre></div><p>In <code>mount/3</code>, we define a stream with <code>stream/3</code>. Streams clean up after themselves, so there is no need to mess with temporary assigns yourself. Like before, streams identify their items by DOM id. By default, it will use the item <code>:id</code> field if the item is a map or struct with such a field. The following two lines are equivalent:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="n">stream</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="ss">:users</span><span class="p">,</span> <span class="n">users</span><span class="p">)</span> <span class="n">stream</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="ss">:users</span><span class="p">,</span> <span class="n">users</span><span class="p">,</span> <span class="ss">dom_id:</span> <span class="o">&amp;</span><span class="s2">"users-</span><span class="si">#{</span><span class="nv">&amp;1</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span> </code></pre></div><p>Next, in the template in <code>render/1</code>, we mark the container as <code>phx-update=&quot;stream&quot;</code>, then we use a regular <code>for</code> comprehension, but with two changes. Streams are placed under a <code>@streams</code> assign, and when you enumerate a stream you get the computed DOM id along with each item. We then render the DOM id and content as before.</p> <p>Finally, in <code>handle_info/2</code> we see the stream interface in action. <code>stream_insert</code> allows inserting or updating items in the stream. By default, items will be appended on the client, but you can programmatically place them with the <code>:at</code> option, which mimics the behavior of Elixir&#39;s <code>List.insert_at</code>. The following two lines are equivalent:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="n">stream_insert</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="ss">:users</span><span class="p">,</span> <span class="n">new_user</span><span class="p">)</span> <span class="n">stream_insert</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="ss">:users</span><span class="p">,</span> <span class="n">new_user</span><span class="p">,</span> <span class="ss">at:</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> </code></pre></div><p>To prepend the new user in the UI instead:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="n">stream_insert</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="ss">:users</span><span class="p">,</span> <span class="n">new_user</span><span class="p">,</span> <span class="ss">at:</span> <span class="mi">0</span><span class="p">)</span> </code></pre></div><p>You can also place the user at an arbitrary index, which makes reordering items in the UI a breeze.</p> <p>For deletes, <code>stream_delete</code> works as you&#39;d expect:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="n">stream_delete</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="ss">:users</span><span class="p">,</span> <span class="n">user</span><span class="p">)</span> </code></pre></div><p>Here&#39;s a fully realized example of what streams unlock for LiveView developers. We updated our flagship <a href="https://fly.io/blog/livebeats/">LiveBeats</a> example app to use streams for its playlist, with drag and drop re-ordering, deletion, and more:</p> <p><video title="Animated GIF showing a LiveBeats song list being reordered by drag and drop and updating on a remote player" src="/phoenix-files/2023-02-27/streams-in-livebeats.mp4?card&amp;center" autoplay="autoplay" loop="loop" muted="muted" playsinline="" disablePictureInPicture="" /></p> <h2 id='should-streams-be-used-by-default-now-for-lists-of-items' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#should-streams-be-used-by-default-now-for-lists-of-items' aria-label='Anchor'></a>Should streams Be Used by Default Now for Lists of Items?</h2><p>Streams by default for any kind of collection is a good intuition to have. You should use streams any time you don’t want to hold the list of items in memory – which is most times. Streams are also a goto when you want to efficiently update a single list item without refactoring to a layer of LiveComponents for the items.</p> <h2 id='streams-retrospective' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#streams-retrospective' aria-label='Anchor'></a>Streams Retrospective</h2><p>There&#39;s something really satisfying about implementing a long-term feature, then shedding all that knowledge by being a <em>user</em> of the feature<em>.</em> LiveView features continue to do this kind of thing to me. I wrote it all – and it still feels like magic when using it!</p> <p>After playing with the top-level stream API as a user, I am also struck by how simple it is. I constantly wonder “how did it take this long to do this?”, but then you look at the PR. It touched every layer of the LiveView stack – it required features/additions to the HTML engine at the parser level, the diffing engine, the client diff merging, and patches to morphdom.</p> <p>The best thing about streams is the internal implementation is optimized for both the server and the client. We introduced new features in morphdom to drop all the fake DOM tree hacks from the previous approach.</p> <p>I&#39;m excited to finally offer a comprehensive solution to an area I was never really satisfied with before. I can&#39;t wait to see what folks ship with this!</p> <p>Happy hacking!</p> <p>–Chris</p> <figure class="post-cta"> <figcaption> <h1> Fly.io ❤️ Elixir</h1><p> Fly.io is a great way to run your Phoenix LiveView app close to your users. It&#39;s really easy to get started. You can be running in minutes.</p><p><a class="button bg-white text-violet-600 hover:bg-opacity-75 hover:text-violet-700 transition-colors" href="https://fly.io/docs/elixir/"> Deploy a Phoenix app today!  <span class='opacity:50'>→</span> </a></p> </figcaption><div class="image-container"> <img src="/static/images/cta-cat.webp" srcset="/static/images/cta-cat@2x.webp 2x" alt=""></div></figure></content>
</entry>
<entry>
<title>Phoenix LiveView and SQLite Autocomplete</title>
<link rel="alternate" href="https://fly.io/phoenix-files/phoenix-liveview-and-sqlite-autocomplete/"/>
<id>https://fly.io/phoenix-files/phoenix-liveview-and-sqlite-autocomplete/</id>
<published>2023-02-16T00:00:00+00:00</published>
<updated>2023-04-06T14:48:02+00:00</updated>
<content type="html"><p class="lead"> This is a series using SQLite3 Full Text Search and Elixir. Fly.io is a great place to run Elixir applications! Check out how to <a href="/docs/elixir/">get started</a>!</p><p>In our <a href="/phoenix-files/sqlite3-full-text-search-with-phoenix/">last post</a> we saw an example of how we could use the built-in Full Text Search capability, FTS5, of SQLite3 to create a search index and query it with Ecto. We also know it&#39;s fast to query and especially so since it is in memory.</p> <p>Let&#39;s see how easy it is to <em>show</em> those results using Phoenix LiveView!</p> <p>To begin we&#39;ll need some data; I just so happen to have a SQLite database built indexing the Fly.io/docs. My schema is set up the same as the previous examples with a title, URL and body, I also include a levels or hierarchy listing to match the hierarchy in the fly.io/docs.</p> <p>The design I am working towards is inspired by the existing Fly.io/docs search, and when we are done we should have something that looks like this:</p> <p><video title="A search UI filters results as the user types" src="/phoenix-files/2023-02-16/doc-search-final.mp4?card&amp;center" autoplay="autoplay" loop="loop" muted="muted" playsinline="" disablePictureInPicture="" /></p> <p>First thing we should do when given a design like this is break it down into smaller components and try to work out the ultimate structure of what will become our code. I am using a tool called <a href="https://www.excalidraw.com">Excalidraw</a> but pen and paper works too!</p> <p><img src="/phoenix-files/2023-02-16/components.webp" alt="Wireframe diagram of a modal with search input and results list" /></p> <p>Breaking this down:</p> <ul> <li>A modal that will show up once we click the search dialog </li><li>A new search input, which should be automatically focused, </li><li> Search Results list with many result items. </li></ul> <p>We will scaffold out a <code>live_component</code> that does just that! Create the file <code>lib/app_web/live/document_live/search_component.ex</code>:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">defmodule</span> <span class="no">AppWeb</span><span class="o">.</span><span class="no">DocumentLive</span><span class="o">.</span><span class="no">SearchComponent</span> <span class="k">do</span> <span class="kn">use</span> <span class="no">AppWeb</span><span class="p">,</span> <span class="ss">:live_component</span> <span class="nv">@impl</span> <span class="no">true</span> <span class="k">def</span> <span class="n">render</span><span class="p">(</span><span class="n">assigns</span><span class="p">)</span> <span class="k">do</span> <span class="sx">~H""</span><span class="s2">" """</span> <span class="k">end</span> <span class="k">def</span> <span class="n">search_input</span><span class="p">(</span><span class="n">assigns</span><span class="p">)</span> <span class="k">do</span> <span class="sx">~H""</span><span class="s2">" """</span> <span class="k">end</span> <span class="k">def</span> <span class="n">results</span><span class="p">(</span><span class="n">assigns</span><span class="p">)</span> <span class="k">do</span> <span class="sx">~H""</span><span class="s2">" """</span> <span class="k">end</span> <span class="k">def</span> <span class="n">result_item</span><span class="p">(</span><span class="n">assigns</span><span class="p">)</span> <span class="k">do</span> <span class="sx">~H""</span><span class="s2">" """</span> <span class="k">end</span> <span class="k">def</span> <span class="n">search_modal</span><span class="p">(</span><span class="n">assigns</span><span class="p">)</span> <span class="k">do</span> <span class="sx">~H""</span><span class="s2">" """</span> <span class="k">end</span> <span class="nv">@impl</span> <span class="no">true</span> <span class="k">def</span> <span class="n">update</span><span class="p">(</span><span class="n">assigns</span><span class="p">,</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">socket</span><span class="p">}</span> <span class="k">end</span> <span class="k">end</span> </code></pre></div><p>We have our main render function, our update function and the three components we highlighted above. Since this component will be stateful we need to render it in one of our live pages, in my case <code>lib/app_web/live/document_live/index.html.heex</code>:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight xml'><code><span class="err">&lt;</span>.live_component module={SearchComponent} id="search-results" show={true} on_cancel={%JS{}} /&gt; </code></pre></div><p>Here, you would wire up <code>show</code> and <code>on_cancel</code> to an assigns or click event. In the video above I hooked it up to a click event on my fake search input. This is left as an exercise to the reader.</p> <p>From here there are many paths one could take; personally, I prefer to have some real data loaded up into my assigns before I begin. Let us modify the <code>update/2</code> to call to our Context function <code>search_documents/1</code> with a default query.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code> <span class="nv">@impl</span> <span class="no">true</span> <span class="k">def</span> <span class="n">update</span><span class="p">(</span><span class="n">assigns</span><span class="p">,</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">socket</span> <span class="o">|&gt;</span> <span class="n">assign</span><span class="p">(</span><span class="n">assigns</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="n">assign_new</span><span class="p">(</span><span class="ss">:documents</span><span class="p">,</span> <span class="n">search_documents</span><span class="p">(</span><span class="s2">"sqlite"</span><span class="p">,</span> <span class="p">[]))</span> <span class="o">|&gt;</span> <span class="n">assign_new</span><span class="p">(</span><span class="ss">:query</span><span class="p">,</span> <span class="s2">"sqlite"</span><span class="p">)</span> <span class="p">}</span> <span class="k">end</span> </code></pre></div><p>Here we apply all the default assigns that came from update, and we include <code>documents</code> and <code>query</code>.</p> <p>Now when querying the SQLite3 FTS5 index it can be a little finicky and it will raise an exception if you send it something it can&#39;t handle. We will handle that case in our <code>search_documents</code> function</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code> <span class="k">defp</span> <span class="n">search_documents</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="n">default</span><span class="p">)</span> <span class="ow">when</span> <span class="n">is_binary</span><span class="p">(</span><span class="n">query</span><span class="p">)</span> <span class="k">do</span> <span class="k">try</span> <span class="k">do</span> <span class="no">Content</span><span class="o">.</span><span class="n">search_documents</span><span class="p">(</span><span class="n">query</span><span class="p">)</span> <span class="k">rescue</span> <span class="no">Exqlite</span><span class="o">.</span><span class="no">Error</span> <span class="o">-&gt;</span> <span class="n">default</span> <span class="k">end</span> <span class="k">end</span> <span class="k">defp</span> <span class="n">search_documents</span><span class="p">(</span><span class="n">_</span><span class="p">,</span> <span class="n">default</span><span class="p">),</span> <span class="k">do</span><span class="p">:</span> <span class="n">default</span> </code></pre></div><p>Pretty self-explanatory, if Exqlite doesn&#39;t love our query and throws a parse error, we simply return the last known good results. This protects us from users trying out nefarious inputs and the user from SQLite&#39;s finicky parser.</p> <aside class="callout"> Normally in Elixir we have a &quot;Let it fail!&quot; attitude where errors result in the supervisor restarting your process, but in this case it would result in LiveView reloading the page and losing the user&#39;s position. So lets protect the user from that.</aside><p>Finally, we&#39;ve got some search results data loaded up and can render the results! So let&#39;s call our functions in our top level <code>render</code> function:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code> <span class="nv">@impl</span> <span class="no">true</span> <span class="k">def</span> <span class="n">render</span><span class="p">(</span><span class="n">assigns</span><span class="p">)</span> <span class="k">do</span> <span class="sx">~H""</span><span class="s2">" &lt;div&gt; &lt;.search_modal :if={@show} id="</span><span class="n">search</span><span class="o">-</span><span class="n">modal</span><span class="s2">" show on_cancel={@on_cancel}&gt; &lt;.search_input value={@query} phx-target={@myself} phx-keyup="</span><span class="k">do</span><span class="o">-</span><span class="n">search</span><span class="s2">" phx-debounce="</span><span class="mi">200</span><span class="s2">" /&gt; &lt;.results docs={@documents} /&gt; &lt;/.search_modal&gt; &lt;/div&gt; """</span> <span class="k">end</span> </code></pre></div><p>What we&#39;re doing here is setting up our modal, conditionally showing it based on the <code>@show</code> assign, rendering our <code>search_input</code> and <code>results</code>. Thanks to our stubbed functions, this should render nothing at all! The beauty is, as we fill in the pieces, it will all start showing up on the page.</p> <p>Starting with the modal, let&#39;s not dive too deep into how it is set up because frankly it&#39;s copied from the default <code>core_components.ex</code> and modified to work better for our use case.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code> <span class="n">attr</span> <span class="ss">:id</span><span class="p">,</span> <span class="ss">:string</span><span class="p">,</span> <span class="ss">required:</span> <span class="no">true</span> <span class="n">attr</span> <span class="ss">:show</span><span class="p">,</span> <span class="ss">:boolean</span><span class="p">,</span> <span class="ss">default:</span> <span class="no">false</span> <span class="n">attr</span> <span class="ss">:on_cancel</span><span class="p">,</span> <span class="no">JS</span><span class="p">,</span> <span class="ss">default:</span> <span class="p">%</span><span class="no">JS</span><span class="p">{}</span> <span class="n">slot</span> <span class="ss">:inner_block</span><span class="p">,</span> <span class="ss">required:</span> <span class="no">true</span> <span class="k">def</span> <span class="n">search_modal</span><span class="p">(</span><span class="n">assigns</span><span class="p">)</span> <span class="k">do</span> <span class="sx">~H""</span><span class="s2">" &lt;div id={@id} phx-mounted={@show &amp;&amp; show_modal(@id)} phx-remove={hide_modal(@id)} class="</span><span class="n">relative</span> <span class="n">z</span><span class="o">-</span><span class="mi">50</span> <span class="n">hidden</span><span class="s2">" &gt; &lt;div id={"</span><span class="c1">#{@id}-bg"} class="fixed inset-0 bg-zinc-50/90 transition-opacity" aria-hidden="true" /&gt;</span> <span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">"fixed inset-0 overflow-y-auto"</span> <span class="n">aria</span><span class="o">-</span><span class="n">labelledby</span><span class="o">=</span><span class="p">{</span><span class="s2">"</span><span class="si">#{</span><span class="nv">@id</span><span class="si">}</span><span class="s2">-title"</span><span class="p">}</span> <span class="n">aria</span><span class="o">-</span><span class="n">describedby</span><span class="o">=</span><span class="p">{</span><span class="s2">"</span><span class="si">#{</span><span class="nv">@id</span><span class="si">}</span><span class="s2">-description"</span><span class="p">}</span> <span class="n">role</span><span class="o">=</span><span class="s2">"dialog"</span> <span class="n">aria</span><span class="o">-</span><span class="n">modal</span><span class="o">=</span><span class="s2">"true"</span> <span class="n">tabindex</span><span class="o">=</span><span class="s2">"0"</span> <span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">"flex min-h-full justify-center"</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">"w-full min-h-12 max-w-3xl p-2 sm:p-4 lg:py-6"</span><span class="o">&gt;</span> <span class="o">&lt;.</span><span class="n">focus_wrap</span> <span class="n">id</span><span class="o">=</span><span class="p">{</span><span class="s2">"</span><span class="si">#{</span><span class="nv">@id</span><span class="si">}</span><span class="s2">-container"</span><span class="p">}</span> <span class="n">phx</span><span class="o">-</span><span class="n">mounted</span><span class="o">=</span><span class="p">{</span><span class="nv">@show</span> <span class="o">&amp;&amp;</span> <span class="n">show_modal</span><span class="p">(</span><span class="nv">@id</span><span class="p">)}</span> <span class="n">phx</span><span class="o">-</span><span class="n">window</span><span class="o">-</span><span class="n">keydown</span><span class="o">=</span><span class="p">{</span><span class="n">hide_modal</span><span class="p">(</span><span class="nv">@on_cancel</span><span class="p">,</span> <span class="nv">@id</span><span class="p">)}</span> <span class="n">phx</span><span class="o">-</span><span class="n">key</span><span class="o">=</span><span class="s2">"escape"</span> <span class="n">phx</span><span class="o">-</span><span class="n">click</span><span class="o">-</span><span class="n">away</span><span class="o">=</span><span class="p">{</span><span class="n">hide_modal</span><span class="p">(</span><span class="nv">@on_cancel</span><span class="p">,</span> <span class="nv">@id</span><span class="p">)}</span> <span class="n">class</span><span class="o">=</span><span class="s2">"hidden relative rounded-2xl bg-white p-2 shadow-lg shadow-zinc-700/10 ring-1 ring-zinc-700/10 transition min-h-[30vh] max-h-[50vh] overflow-y-scroll"</span> <span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">div</span> <span class="n">id</span><span class="o">=</span><span class="p">{</span><span class="s2">"</span><span class="si">#{</span><span class="nv">@id</span><span class="si">}</span><span class="s2">-content"</span><span class="p">}</span><span class="o">&gt;</span> <span class="o">&lt;%=</span> <span class="n">render_slot</span><span class="p">(</span><span class="nv">@inner_block</span><span class="p">)</span> <span class="p">%</span><span class="o">&gt;</span> <span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span> <span class="o">&lt;/.</span><span class="n">focus_wrap</span><span class="o">&gt;</span> <span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span> <span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span> <span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span> <span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span> <span class="s2">""" end </span></code></pre></div><p>We set up our <code>attrs</code> at the top, and render the modal. The major changes are:</p> <ul> <li>removed the header, button areas and the close button </li><li>added spacing and shifted the whole thing up </li></ul> <p>This will accept an inner block and handle opening and closing the modal for us, and shares all the modal logic and transitions for doing so!</p> <p>The next item in our modal is the search input but I like to see the modal in action so lets jump straight to rendering results.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code> <span class="n">attr</span> <span class="ss">:docs</span><span class="p">,</span> <span class="ss">:list</span><span class="p">,</span> <span class="ss">required:</span> <span class="no">true</span> <span class="k">def</span> <span class="n">search_results</span><span class="p">(</span><span class="n">assigns</span><span class="p">)</span> <span class="k">do</span> <span class="sx">~H""</span><span class="s2">" &lt;ul class="</span><span class="o">-</span><span class="n">mb</span><span class="o">-</span><span class="mi">2</span> <span class="n">py</span><span class="o">-</span><span class="mi">2</span> <span class="n">text</span><span class="o">-</span><span class="n">sm</span> <span class="n">text</span><span class="o">-</span><span class="n">gray</span><span class="o">-</span><span class="mi">800</span> <span class="n">flex</span> <span class="n">space</span><span class="o">-</span><span class="n">y</span><span class="o">-</span><span class="mi">2</span> <span class="n">flex</span><span class="o">-</span><span class="n">col</span><span class="s2">" id="</span><span class="n">options</span><span class="s2">" role="</span><span class="n">listbox</span><span class="s2">"&gt; &lt;li :if={@docs == []} id="</span><span class="n">option</span><span class="o">-</span><span class="n">none</span><span class="s2">" role="</span><span class="n">option</span><span class="s2">" tabindex="</span><span class="o">-</span><span class="mi">1</span><span class="s2">" class="</span><span class="n">cursor</span><span class="o">-</span><span class="n">default</span> <span class="n">select</span><span class="o">-</span><span class="n">none</span> <span class="n">rounded</span><span class="o">-</span><span class="n">md</span> <span class="n">px</span><span class="o">-</span><span class="mi">4</span> <span class="n">py</span><span class="o">-</span><span class="mi">2</span> <span class="n">text</span><span class="o">-</span><span class="n">xl</span><span class="s2">"&gt; No Results &lt;/li&gt; &lt;.link navigate={~p"</span><span class="o">/</span><span class="n">documents</span><span class="o">/</span><span class="c1">#{doc.id}"} id={"doc-#{doc.id}"} :for={doc &lt;- @docs}&gt;</span> <span class="o">&lt;.</span><span class="n">result_item</span> <span class="n">doc</span><span class="o">=</span><span class="p">{</span><span class="n">doc</span><span class="p">}</span> <span class="o">/&gt;</span> <span class="o">&lt;/.</span><span class="n">link</span><span class="o">&gt;</span> <span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span> <span class="s2">""" end </span></code></pre></div><p>Here we declare we are expecting an list of <code>@docs</code> we setup a <code>ul</code> and conditionally render an <code>li</code> if we have no results, otherwise we iterate using the <code>:for={doc &lt;- @docs}</code> helper and we call into <code>result_item</code></p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code> <span class="n">attr</span> <span class="ss">:doc</span><span class="p">,</span> <span class="ss">:map</span><span class="p">,</span> <span class="ss">required:</span> <span class="no">true</span> <span class="k">def</span> <span class="n">result_item</span><span class="p">(</span><span class="n">assigns</span><span class="p">)</span> <span class="k">do</span> <span class="sx">~H""</span><span class="s2">" &lt;li class="</span><span class="n">cursor</span><span class="o">-</span><span class="n">default</span> <span class="n">select</span><span class="o">-</span><span class="n">none</span> <span class="n">rounded</span><span class="o">-</span><span class="n">md</span> <span class="n">px</span><span class="o">-</span><span class="mi">4</span> <span class="n">py</span><span class="o">-</span><span class="mi">2</span> <span class="n">text</span><span class="o">-</span><span class="n">xl</span> <span class="n">bg</span><span class="o">-</span><span class="n">zinc</span><span class="o">-</span><span class="mi">100</span> <span class="ss">hover:</span><span class="n">bg</span><span class="o">-</span><span class="n">zinc</span><span class="o">-</span><span class="mi">800</span> <span class="ss">hover:</span><span class="n">text</span><span class="o">-</span><span class="n">white</span> <span class="ss">hover:</span><span class="n">cursor</span><span class="o">-</span><span class="n">pointer</span> <span class="n">flex</span> <span class="n">flex</span><span class="o">-</span><span class="n">row</span> <span class="n">space</span><span class="o">-</span><span class="n">x</span><span class="o">-</span><span class="mi">2</span> <span class="n">items</span><span class="o">-</span><span class="n">center</span><span class="s2">" id={"</span><span class="n">option</span><span class="o">-</span><span class="c1">#{@doc.id}"} role="option" tabindex="-1" &gt;</span> <span class="o">&lt;</span><span class="n">!</span><span class="o">--</span> <span class="n">svg</span> <span class="n">of</span> <span class="n">a</span> <span class="n">document</span> <span class="o">--&gt;</span> <span class="o">&lt;</span><span class="n">div</span><span class="o">&gt;</span> <span class="o">&lt;%=</span> <span class="nv">@doc</span><span class="o">.</span><span class="n">title</span> <span class="p">%</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">"text-xs"</span><span class="err">&gt;</span><span class="o">&lt;%=</span> <span class="n">clean_levels</span><span class="p">(</span><span class="nv">@doc</span><span class="o">.</span><span class="n">levels</span><span class="p">)</span> <span class="p">%</span><span class="err">&gt;</span><span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span> <span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span> <span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span> <span class="s2">""" end </span></code></pre></div><p>Which is almost unnecessary, it simply renders an <code>li</code>, with a title and our doc hierarchy. I left out the SVG heroicon for a document for brevity. If we check our webpage, what we should be seeing is something like this:</p> <p><img src="/phoenix-files/2023-02-16/search-results.webp" alt="" /></p> <p>Which is great! The last step is to add an input and wire up some interactivity, so lets fill in the <code>search_input</code> function now</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code> <span class="n">attr</span> <span class="ss">:rest</span><span class="p">,</span> <span class="ss">:global</span> <span class="k">def</span> <span class="n">search_input</span><span class="p">(</span><span class="n">assigns</span><span class="p">)</span> <span class="k">do</span> <span class="sx">~H""</span><span class="s2">" &lt;div class="</span><span class="n">relative</span> <span class="s2">"&gt; &lt;!-- Heroicon name: mini/magnifying-glass --&gt; &lt;input {@rest} type="</span><span class="n">text</span><span class="s2">" class="</span><span class="n">h</span><span class="o">-</span><span class="mi">12</span> <span class="n">w</span><span class="o">-</span><span class="n">full</span> <span class="n">border</span><span class="o">-</span><span class="n">none</span> <span class="ss">focus:</span><span class="n">ring</span><span class="o">-</span><span class="mi">0</span> <span class="n">pl</span><span class="o">-</span><span class="mi">11</span> <span class="n">pr</span><span class="o">-</span><span class="mi">4</span> <span class="n">text</span><span class="o">-</span><span class="n">gray</span><span class="o">-</span><span class="mi">800</span> <span class="n">placeholder</span><span class="o">-</span><span class="n">gray</span><span class="o">-</span><span class="mi">400</span> <span class="ss">sm:</span><span class="n">text</span><span class="o">-</span><span class="n">sm</span><span class="s2">" placeholder="</span><span class="no">Search</span> <span class="n">the</span> <span class="n">docs</span><span class="o">..</span><span class="s2">" role="</span><span class="n">combobox</span><span class="s2">" aria-expanded="</span><span class="no">false</span><span class="s2">" aria-controls="</span><span class="n">options</span><span class="s2">"&gt; &lt;/div&gt; """</span> <span class="k">end</span> </code></pre></div><p>Which is almost a bare input! Once again, we left out the SVG for brevity, and the only thing we do here is assign all the attributes straight to the input. Let&#39;s take a closer look at the call to <code>search_input</code>:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="o">&lt;.</span><span class="n">search_input</span> <span class="n">value</span><span class="o">=</span><span class="p">{</span><span class="nv">@query</span><span class="p">}</span> <span class="n">phx</span><span class="o">-</span><span class="n">target</span><span class="o">=</span><span class="p">{</span><span class="nv">@myself</span><span class="p">}</span> <span class="n">phx</span><span class="o">-</span><span class="n">keyup</span><span class="o">=</span><span class="s2">"do-search"</span> <span class="n">phx</span><span class="o">-</span><span class="n">debounce</span><span class="o">=</span><span class="s2">"200"</span> <span class="o">/&gt;</span> </code></pre></div><p>We set the value straight to our <code>@query</code> value. We also set the special <code>phx-target</code> attribute to <code>@myself</code> which tells Phoenix, &quot;hey, this event should be routed to this component, not my parent.&quot; Without this declaration, the <code>key-up</code> event would be dispatched to the caller of this component. Then we hook up the event to the <code>do-search</code> event, and we tell the front end to <code>debounce</code> this event.</p> <aside class="callout"> Debounce here means the browser will only send an event every 200 milliseconds. The etymology for debounce is from electrical engineers working with mechanical switches. When a switch closes it doesn&#39;t happen instantly, it has many points of partial contact as the two pieces of metal come close. This would cause a &quot;ripple&quot; of electricity through the wires, the act of debouncing was removing this &quot;bouncing&quot; ripple.</aside><p>And the last step is that we need to remove our initialized code from update and to handle the input event:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code> <span class="nv">@impl</span> <span class="no">true</span> <span class="k">def</span> <span class="n">mount</span><span class="p">(</span><span class="n">socket</span><span class="p">)</span> <span class="k">do</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">socket</span><span class="p">,</span> <span class="ss">temporary_assigns:</span> <span class="p">[</span><span class="ss">docs:</span> <span class="p">[]]}</span> <span class="k">end</span> <span class="nv">@impl</span> <span class="no">true</span> <span class="k">def</span> <span class="n">update</span><span class="p">(</span><span class="n">assigns</span><span class="p">,</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">socket</span> <span class="o">|&gt;</span> <span class="n">assign</span><span class="p">(</span><span class="n">assigns</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="n">assign_new</span><span class="p">(</span><span class="ss">:documents</span><span class="p">,</span> <span class="p">[])</span> <span class="o">|&gt;</span> <span class="n">assign_new</span><span class="p">(</span><span class="ss">:search</span><span class="p">,</span> <span class="s2">""</span><span class="p">)</span> <span class="p">}</span> <span class="k">end</span> <span class="nv">@impl</span> <span class="no">true</span> <span class="k">def</span> <span class="n">handle_event</span><span class="p">(</span><span class="s2">"do-search"</span><span class="p">,</span> <span class="p">%{</span><span class="s2">"value"</span> <span class="o">=&gt;</span> <span class="n">value</span><span class="p">},</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span> <span class="p">{</span><span class="ss">:noreply</span><span class="p">,</span> <span class="n">socket</span> <span class="o">|&gt;</span> <span class="n">assign</span><span class="p">(</span><span class="ss">:search</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="n">assign</span><span class="p">(</span><span class="ss">:documents</span><span class="p">,</span> <span class="n">search_documents</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">assigns</span><span class="o">.</span><span class="n">documents</span><span class="p">))</span> <span class="p">}</span> <span class="k">end</span> </code></pre></div><p>And finally we are there! If you want to see it once more, scroll up! I did add one small optimization and that was adding a <code>mount</code> function and declaring <code>@docs</code> to be a <code>temporary_assign</code>, this simply tells LiveView to not keep all the <code>@docs</code> in memory after every change, render the results then toss the data.</p> <aside class="callout"> Notice when you have partially typed words the results can kinda flicker. This is the result of how the SQLite3 FTS5 indexes your text. It indexes based on tokens which are whole words separated by spaces, it does not do partial word matching. For example, if the word <code>sqlite</code> with spaces around it, is not in a document it won&#39;t return any results. The same goes, if we type <code>sq</code> it will look for the token <code>sq</code> and not match <code>sqlite</code>.</p> <p>If you want partial word matches don&#39;t dismay! You simply need to use the <a href="https://www.sqlite.org/fts5.html#the_experimental_trigram_tokenizer">Experimental Trigram Tokenizer!</a> which can handle partial matching. I won&#39;t be going into details in this post but follow that link and you can set it up for your usecases!</aside><p>One thing that is immediately clear to me is that results are near instant! And that is because SQLite lives right in memory next to your application! We have no round trip to the database, minimal encoding and decoding and zero chance of dropping packets. And thanks to LiveView the user facing implementation is frankly boring!</p> <p>This is what gets me so excited about SQLite, LiveView and Fly.io. If you use Fly.io&#39;s global network you can deploy this to wherever <em>your</em> users are. You don&#39;t need to use some kind of lambda running on wasm, calling propreitary databases and propreitary API&#39;s, this is normal code that you own. And as always with LiveView there is no JavaScript to think about, just elixir code running on the server.</p> <p>Next time we discuss some ways you could Architect your search, trying out the distributed SQLite Database LiteFS, and ways to keep your data fresh!</p> <figure class="post-cta"> <figcaption> <h1> Fly.io ❤️ Elixir</h1><p> Fly.io is a great way to run your Phoenix LiveView app close to your users. It&#39;s really easy to get started. You can be running in minutes.</p><p><a class="button bg-white text-violet-600 hover:bg-opacity-75 hover:text-violet-700 transition-colors" href="https://fly.io/docs/elixir/"> Deploy a Phoenix app today!  <span class='opacity:50'>→</span> </a></p> </figcaption><div class="image-container"> <img src="/static/images/cta-turtle.webp" srcset="/static/images/cta-turtle@2x.webp 2x" alt=""></div></figure></content>
</entry>
<entry>
<title>Pass User Agent info to your LiveView</title>
<link rel="alternate" href="https://fly.io/phoenix-files/pass-user-agent-info-to-your-liveview/"/>
<id>https://fly.io/phoenix-files/pass-user-agent-info-to-your-liveview/</id>
<published>2023-02-15T00:00:00+00:00</published>
<updated>2023-04-06T14:48:02+00:00</updated>
<content type="html"><p class="lead"> In this article we talk about getting User Agent inside your LiveView. Fly.io is a great place to run your Phoenix LiveView applications! Check out how to <a href="/docs/elixir/">get started</a>!</p><p>Here&#39;s a quick recipe. Say your LiveView needs to show something based on the device your user is on such as Mac or Windows. You can parse that from your User Agent header, in fact LiveView already gives you a simple method for that: <code>get_connect_info(socket, :user_agent)</code>.</p> <p>The <code>get_connect_info/2</code> function allows you to retrieve connection information that is only available during the mount lifecycle, such as header or IP information.</p> <p>Here&#39;s a simple LiveView that just shows your current device based on your user agent. You can use the <a href="https://hexdocs.pm/ua_parser/readme.html"><code>ua_parser</code></a> library to do the weird stuff.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">defmodule</span> <span class="no">GetUserAgentWeb</span><span class="o">.</span><span class="no">UserAgentLive</span> <span class="k">do</span> <span class="kn">use</span> <span class="no">GetUserAgentWeb</span><span class="p">,</span> <span class="ss">:live_view</span> <span class="k">def</span> <span class="n">render</span><span class="p">(</span><span class="n">assigns</span><span class="p">)</span> <span class="k">do</span> <span class="sx">~H""</span><span class="s2">" &lt;div class="</span><span class="n">text</span><span class="o">-</span><span class="n">xl</span><span class="s2">"&gt;Device: &lt;/div&gt; """</span> <span class="k">end</span> <span class="k">def</span> <span class="n">mount</span><span class="p">(</span><span class="n">_params</span><span class="p">,</span> <span class="n">_session</span><span class="p">,</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span> <span class="n">device</span> <span class="o">=</span> <span class="k">case</span> <span class="no">UAParser</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">get_connect_info</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="ss">:user_agent</span><span class="p">))</span> <span class="k">do</span> <span class="p">%</span><span class="no">UAParser</span><span class="o">.</span><span class="no">UA</span><span class="p">{</span><span class="ss">device:</span> <span class="p">%</span><span class="no">UAParser</span><span class="o">.</span><span class="no">Device</span><span class="p">{</span><span class="ss">family:</span> <span class="n">fam</span><span class="p">}}</span> <span class="o">-&gt;</span> <span class="n">fam</span> <span class="n">_</span> <span class="o">-&gt;</span> <span class="s2">"I don't know your device"</span> <span class="k">end</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">assign</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="ss">device:</span> <span class="n">device</span><span class="p">)}</span> <span class="k">end</span> <span class="k">end</span> </code></pre></div><p>But there&#39;s a catch!</p> <p><video title="LiveView page being refreshed, slowed down 50%. At the initial frame the 'Device: Mac' message appears and then 'Mac' disappears leaving only 'Device:'" src="/phoenix-files/2023-02-15/device-appearing-and-disappearing.mp4?card&amp;border" autoplay="autoplay" loop="loop" muted="muted" playsinline="" disablePictureInPicture="" /></p> <p>Why your device appears and disappears immediately, you ask? Let&#39;s go through how LiveViews render.</p> <p><img src="/phoenix-files/2023-02-15/how-liveview-render-works.webp" alt="A sequence of 5 states connected by arrows: the first state is your user opening the page doing a HTTP request, the second state is LiveView rendering a disconnected mount, the third state is the user seeing the app and requesting to be connected to the WebSocket, the fourth state is LiveView rendering a connected version and replying to the user, and the fifth and final state is the user having a dynamic web page." /></p> <figure class="post-cta"> <figcaption> <h1> Run your LiveViews on Fly.io</h1><p> You can host your LiveView form apps here on Fly.io and get free SSL so users know only your server knows their User Agent.</p><p><a class="button bg-white text-violet-600 hover:bg-opacity-75 hover:text-violet-700 transition-colors" href="https://fly.io/docs/speedrun/"> Try Fly for free&nbsp;&nbsp;<span class='opacity-50'>&rarr;</span> </a></p> </figcaption><div class="image-container"> <img src="/static/images/cta-cat.webp" srcset="/static/images/cta-cat@2x.webp 2x" alt=""></div></figure><p>User agents come as HTTP headers so when LiveView first receive an HTTP request that information is already available, the server will reply with a simple HTML response and the device will be rendered. As for WebSockets, they work like this: your browser does a simple HTTP request to a server but the server replies telling that this request will be <a href="https://en.wikipedia.org/wiki/WebSocket?useskin=vector#WebSocket_protocol_handshake">upgraded to an WebSocket</a>.</p> <p>During the socket upgrade you lose your User Agent—The WebSocket connection doesn’t carry this info—so this second render clears the device value from the screen. You need to tell Phoenix to store it under your socket state so you can use it later. Go to your <code>endpoint.ex</code> file and let&#39;s edit it a little bit:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="o">-</span> <span class="n">socket</span> <span class="s2">"/live"</span><span class="p">,</span> <span class="no">Phoenix</span><span class="o">.</span><span class="no">LiveView</span><span class="o">.</span><span class="no">Socket</span><span class="p">,</span> <span class="ss">websocket:</span> <span class="p">[</span><span class="ss">connect_info:</span> <span class="p">[</span><span class="ss">session:</span> <span class="nv">@session_options</span><span class="p">]]</span> <span class="o">+</span> <span class="n">socket</span> <span class="s2">"/live"</span><span class="p">,</span> <span class="no">Phoenix</span><span class="o">.</span><span class="no">LiveView</span><span class="o">.</span><span class="no">Socket</span><span class="p">,</span> <span class="ss">websocket:</span> <span class="p">[</span><span class="ss">connect_info:</span> <span class="p">[</span><span class="ss">:user_agent</span><span class="p">,</span> <span class="ss">session:</span> <span class="nv">@session_options</span><span class="p">]]</span> </code></pre></div><p>You just added <code>:user_agent</code> to the <a href="https://hexdocs.pm/phoenix/Phoenix.Endpoint.html#socket/3">WebSocket config</a> and now everything should just work! Don&#39;t forget to restart your server; <code>endpoint.ex</code> doesn&#39;t get reloaded automatically.</p> </content>
</entry>
<entry>
<title>Making a CheckboxGroup Input</title>
<link rel="alternate" href="https://fly.io/phoenix-files/making-a-checkboxgroup-input/"/>
<id>https://fly.io/phoenix-files/making-a-checkboxgroup-input/</id>
<published>2023-02-13T00:00:00+00:00</published>
<updated>2023-04-11T16:48:45+00:00</updated>
<content type="html"><p class="lead"> This post builds on the previous work with <a href="/phoenix-files/tag-all-the-things/">tagging database records</a>. Here we build a custom multi-select checkbox group input for selecting which tags to associate with a database record in our Phoenix application. Fly.io is a great place to run Phoenix applications! Check out how to <a href="/docs/elixir/">get started</a>!</p><p><strong class='font-semibold text-navy'>UPDATED</strong>: This was updated to support clearing a list of tags. The <a href="/phoenix-files/tag-all-the-things">underlying tag functions</a> were updated and a hidden input ensures a value is passed. See the updated <a href="https://gist.github.com/brainlid/9dcf78386e68ca03d279ae4a9c8c2373">gist</a> as well.</p> <p>Phoenix 1.7.0 brings a lot of new things when we run <code>mix phx.gen my_app</code>. These new and cool ways of doing things aren&#39;t automatically brought to existing projects because they come from the generators. This means you don&#39;t <em>need</em> to adopt any of these new approaches. After all, Phoenix 1.7 is backward compatible!</p> <p>However, of the many new things we <em>could</em> bring to an existing project, we&#39;ll focus here on the new approach to form input components. Why? Because it&#39;s both cool and useful!</p> <p>Earlier we saw how we can <a href="/phoenix-files/flying-with-a-fledgling-phoenix/">play with new Phoenix features</a>. If you&#39;ve played with the 1.7.0 release, you may have noticed the slick new <code>core_components.ex</code> approach. This file is generated for new projects. Here we&#39;ll explore how to build a custom input component that follows this design.</p> <h2 id='problem' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#problem' aria-label='Anchor'></a>Problem</h2><p>We like the new <code>core_components.ex</code> approach that fresh Phoenix apps get. The file is generated into a project and is intended to be customized.</p> <p>The first step towards customizing the file is to change the CSS classes to match the look and feel of our application. By default, it uses Tailwind CSS but those can be replaced or customized as we see fit.</p> <p>The next step is to create custom components that are useful in our application.</p> <p>How do we create a custom input in <code>core_component.ex</code>? It&#39;s actually easy. The component we want is a multi-select checkbox group input. It&#39;s perfect for a &quot;check all that apply&quot; or when you have a list of tags that people can choose from.</p> <p>In our application, a book can be tagged with the genres that apply to it. The input should look something like this:</p> <p><img src="/phoenix-files/2023-02-13/checkbox-group-appearance.webp?card&amp;center" alt="Screenshot of a multi-select checkbox group input with book genre names." /></p> <p>Ideally, we want the this input to behave like a normal HTML input linked to a Phoenix form and changeset. The question is, how do we create a custom multi-select checkbox group input using the new <code>core_components.ex</code> design?</p> <h2 id='solution' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#solution' aria-label='Anchor'></a>Solution</h2><p>Before we dive headlong into creating our new component, let&#39;s do some reconnaissance and get the &quot;lay of the land&quot;.</p> <h3 id='our-first-peek-at-core_components-ex' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#our-first-peek-at-core_components-ex' aria-label='Anchor'></a>Our First Peek at <code>core_components.ex</code></h3><p>When we generate a new Phoenix 1.7.x project, it creates a <code>core_components.ex</code> file for us. For those who haven&#39;t checked it out yet, it contains a number of components we can use and extend, but here we&#39;ll focus on the <code>input</code> function.</p> <p>The <code>input</code> function has multiple versions that use pattern matching to determine which function body is executed.</p> <p>Here&#39;s a simplified view:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code> <span class="k">def</span> <span class="n">input</span><span class="p">(%{</span><span class="ss">type:</span> <span class="s2">"checkbox"</span><span class="p">}</span> <span class="o">=</span> <span class="n">assigns</span><span class="p">)</span> <span class="k">do</span> <span class="c1"># ...</span> <span class="k">end</span> <span class="k">def</span> <span class="n">input</span><span class="p">(%{</span><span class="ss">type:</span> <span class="s2">"select"</span><span class="p">}</span> <span class="o">=</span> <span class="n">assigns</span><span class="p">)</span> <span class="k">do</span> <span class="c1"># ...</span> <span class="k">end</span> <span class="k">def</span> <span class="n">input</span><span class="p">(%{</span><span class="ss">type:</span> <span class="s2">"textarea"</span><span class="p">}</span> <span class="o">=</span> <span class="n">assigns</span><span class="p">)</span> <span class="k">do</span> <span class="c1"># ...</span> <span class="k">end</span> <span class="c1"># ...</span> </code></pre></div><p>A pattern match on the <code>type</code> assign signals what type of component to render. Nice! This makes it easy for us to add a custom type!</p> <p>Using the component in a HEEx template looks like this:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight html'><code><span class="nt">&lt;</span><span class="err">.</span><span class="na">input</span> <span class="na">field=</span><span class="s">{@form[:title]}</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">label=</span><span class="s">"Title"</span> <span class="nt">/&gt;</span> </code></pre></div><h3 id='our-multi-select-checkbox-group-s-data' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#our-multi-select-checkbox-group-s-data' aria-label='Anchor'></a>Our Multi-select Checkbox Group&#39;s Data</h3><p>Previously we <a href="/phoenix-files/tag-all-the-things/#database-migration">talked about the underlying database structure</a> and the GIN index that makes it all speedy. Let&#39;s review briefly what the Ecto schema looks like, since the input is sending data for the <code>genres</code> field.</p> <p>Our <code>book.ex</code> schema:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="n">schema</span> <span class="s2">"books"</span> <span class="k">do</span> <span class="n">field</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">:string</span><span class="p">,</span> <span class="ss">required:</span> <span class="no">true</span> <span class="c1"># ...</span> <span class="n">field</span> <span class="ss">:genres</span><span class="p">,</span> <span class="p">{</span><span class="ss">:array</span><span class="p">,</span> <span class="ss">:string</span><span class="p">},</span> <span class="ss">default:</span> <span class="p">[],</span> <span class="ss">required:</span> <span class="no">true</span> <span class="c1"># ...</span> <span class="k">end</span> </code></pre></div><p>We&#39;re taking advantage of Ecto&#39;s support for fields of type <a href="https://hexdocs.pm/ecto/Ecto.Type.html#cast/2">array of string</a>. Time to put that feature to use!</p> <h3 id='new-input-type' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#new-input-type' aria-label='Anchor'></a>New Input Type</h3><p>Our new input type needs a name. It displays a group of checkboxes for the possible list of tags to apply. So, let&#39;s call our new input type a <code>checkgroup</code>.</p> <p>Building on the existing design, let&#39;s add our new input with a pattern match on the new type. Be sure to group this with all the other <code>input/1</code> functions. It will look like this:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">def</span> <span class="n">input</span><span class="p">(%{</span><span class="ss">type:</span> <span class="s2">"checkgroup"</span><span class="p">}</span> <span class="o">=</span> <span class="n">assigns</span><span class="p">)</span> <span class="k">do</span> <span class="c1"># ...</span> <span class="k">end</span> </code></pre></div><p>Using our component for book genres in a <code>HEEx</code> template will look like this:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight html'><code><span class="nt">&lt;</span><span class="err">.</span><span class="na">input</span> <span class="na">field=</span><span class="s">{@form[:genres]}</span> <span class="na">type=</span><span class="s">"checkgroup"</span> <span class="na">label=</span><span class="s">"Genres"</span> <span class="na">multiple=</span><span class="s">{true}</span> <span class="na">options=</span><span class="s">{Book.genre_options()}</span> <span class="nt">/&gt;</span> </code></pre></div><p>This is the first time we&#39;re looking at the input&#39;s usage. There are a few points to note.</p> <ul> <li>Instead of passing a changeset, we use a <a href="https://hexdocs.pm/phoenix_html/Phoenix.HTML.Form.html">Phoenix.HTML.Form</a> and index into it for the field. The field is a <a href="https://hexdocs.pm/phoenix_html/Phoenix.HTML.FormField.html"><code>%Phoenix.HTML.FormField{}</code></a> struct. This is how the new <code>input</code> components work in <code>core_components.ex</code>. </li><li>There is an option called <code>multiple</code> that must be set to <code>true</code>. More on this in a second. </li><li><code>options</code> provides a list of the possible tags/genres to display. Inputs of type <code>&quot;select&quot;</code> already support options that conform to <code>Phoenix.HTML.Form.options_for_select/2</code>. </li></ul> <h3 id='multiple' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#multiple' aria-label='Anchor'></a>Multiple?</h3><p>The <code>multiple={true}</code> attribute is really important. As I started using the new input component, I kept forgetting to include the <code>multiple={true}</code> setting. What happened? It didn&#39;t error, but it only sent one checked value for the form. So… it was quietly broken. Why?</p> <p>In general, in HTML, if we create multiple checkboxes, each with the same name of <code>name=&quot;genres[]&quot;</code> (note the square brackets!), then Phoenix interprets the set of values as an array of strings for the checked values. This is exactly what we want!</p> <p>When we neglect to include the option, it doesn&#39;t add the <code>[]</code> to the input name for us and results in an easy-to-create bug.</p> <p>The <code>multiple</code> option is processed in the default generated <code>input/1</code> function, so we can&#39;t access it and use it in our pattern matched <code>input(%{type: &quot;checkgroup&quot;})</code> function.</p> <p>What to do?</p> <p>Because this setting is so critical and we don&#39;t <em>ever</em> want to forget it, let&#39;s write a function wrapper to use instead.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code> <span class="nv">@doc</span> <span class="sd">""" Generate a checkbox group for multi-select. """</span> <span class="n">attr</span> <span class="ss">:id</span><span class="p">,</span> <span class="ss">:any</span> <span class="n">attr</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:any</span> <span class="n">attr</span> <span class="ss">:label</span><span class="p">,</span> <span class="ss">:string</span><span class="p">,</span> <span class="ss">default:</span> <span class="no">nil</span> <span class="n">attr</span> <span class="ss">:field</span><span class="p">,</span> <span class="no">Phoenix</span><span class="o">.</span><span class="no">HTML</span><span class="o">.</span><span class="no">FormField</span><span class="p">,</span> <span class="ss">doc:</span> <span class="s2">"..."</span> <span class="n">attr</span> <span class="ss">:errors</span><span class="p">,</span> <span class="ss">:list</span> <span class="n">attr</span> <span class="ss">:required</span><span class="p">,</span> <span class="ss">:boolean</span><span class="p">,</span> <span class="ss">default:</span> <span class="no">false</span> <span class="n">attr</span> <span class="ss">:options</span><span class="p">,</span> <span class="ss">:list</span><span class="p">,</span> <span class="ss">doc:</span> <span class="s2">"..."</span> <span class="n">attr</span> <span class="ss">:rest</span><span class="p">,</span> <span class="ss">:global</span><span class="p">,</span> <span class="ss">include:</span> <span class="sx">~w(disabled form readonly)</span> <span class="n">attr</span> <span class="ss">:class</span><span class="p">,</span> <span class="ss">:string</span><span class="p">,</span> <span class="ss">default:</span> <span class="no">nil</span> <span class="k">def</span> <span class="n">checkgroup</span><span class="p">(</span><span class="n">assigns</span><span class="p">)</span> <span class="k">do</span> <span class="n">new_assigns</span> <span class="o">=</span> <span class="n">assigns</span> <span class="o">|&gt;</span> <span class="n">assign</span><span class="p">(</span><span class="ss">:multiple</span><span class="p">,</span> <span class="no">true</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="n">assign</span><span class="p">(</span><span class="ss">:type</span><span class="p">,</span> <span class="s2">"checkgroup"</span><span class="p">)</span> <span class="n">input</span><span class="p">(</span><span class="n">new_assigns</span><span class="p">)</span> <span class="k">end</span> </code></pre></div><p>The bulk of this simple function wrapper is defining the arguments, all of which were borrowed and customized from the existing <code>input/1</code> function. All the function does is explicitly set <code>multiple</code> to <code>true</code> so we <em>can&#39;t</em> forget it and we set the <code>type</code> since the function name makes the purpose clear.</p> <p>Now we can use our component like this in our templates:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight html'><code><span class="nt">&lt;</span><span class="err">.</span><span class="na">checkgroup</span> <span class="na">field=</span><span class="s">{@form[:genres]}</span> <span class="na">label=</span><span class="s">"Genres"</span> <span class="na">options=</span><span class="s">{Book.genre_options()}</span> <span class="nt">/&gt;</span> </code></pre></div><p>Looking good!</p> <p>Next, let&#39;s think about how our list of displayed options works.</p> <h3 id='options' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#options' aria-label='Anchor'></a>Options</h3><p>We need to decide how our list of genre options should appear. Do we want to show the stored value or do we want a &quot;friendly&quot; display version shown? It might be the difference between displaying &quot;Science Fiction&quot; versus &quot;sci-fi&quot;. The &quot;right&quot; choice depends on our application, the tags, and how they are used.</p> <p>For our solution, we&#39;d prefer to see the friendly text of &quot;Science Fiction&quot; displayed but store the tag value of &quot;sci-fi&quot;.</p> <p>Because we are building a custom component, we could structure this any way we want. For consistency, we&#39;ll borrow the same structure used for select inputs and do it like this:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="nv">@genre_options</span> <span class="p">[</span> <span class="p">{</span><span class="s2">"Fantasy"</span><span class="p">,</span> <span class="s2">"fantasy"</span><span class="p">},</span> <span class="p">{</span><span class="s2">"Science Fiction"</span><span class="p">,</span> <span class="s2">"sci-fi"</span><span class="p">},</span> <span class="p">{</span><span class="s2">"Dystopian"</span><span class="p">,</span> <span class="s2">"dystopian"</span><span class="p">},</span> <span class="p">{</span><span class="s2">"Adventure"</span><span class="p">,</span> <span class="s2">"adventure"</span><span class="p">},</span> <span class="p">{</span><span class="s2">"Romance"</span><span class="p">,</span> <span class="s2">"romance"</span><span class="p">},</span> <span class="p">{</span><span class="s2">"Detective &amp; Mystery"</span><span class="p">,</span> <span class="s2">"mystery"</span><span class="p">},</span> <span class="p">{</span><span class="s2">"Horror"</span><span class="p">,</span> <span class="s2">"horror"</span><span class="p">},</span> <span class="p">{</span><span class="s2">"Thriller"</span><span class="p">,</span> <span class="s2">"thriller"</span><span class="p">},</span> <span class="p">{</span><span class="s2">"Historical Fiction"</span><span class="p">,</span> <span class="s2">"historical-fiction"</span><span class="p">},</span> <span class="p">{</span><span class="s2">"Young Adult (YA)"</span><span class="p">,</span> <span class="s2">"young-adult"</span><span class="p">},</span> <span class="p">{</span><span class="s2">"Children's Fiction"</span><span class="p">,</span> <span class="s2">"children-fiction"</span><span class="p">},</span> <span class="p">{</span><span class="s2">"Memoir &amp; Autobiography"</span><span class="p">,</span> <span class="s2">"autobiography"</span><span class="p">},</span> <span class="p">{</span><span class="s2">"Biography"</span><span class="p">,</span> <span class="s2">"biography"</span><span class="p">},</span> <span class="p">{</span><span class="s2">"Cooking"</span><span class="p">,</span> <span class="s2">"cooking"</span><span class="p">},</span> <span class="c1"># ...</span> <span class="p">]</span> </code></pre></div><p>Because our list of allowed tags is defined in code, it makes sense to define it with our schema; after all, we will use the values in our validations.</p> <p>With the above structure, our validations can&#39;t use the data in <code>@genre_options</code> directly. Our validation needs a list of just the valid values. To address this, we can write the following line of code to compute the list of valid values at compile time.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="nv">@valid_genres</span> <span class="no">Enum</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="nv">@genre_options</span><span class="p">,</span> <span class="k">fn</span><span class="p">({</span><span class="n">_text</span><span class="p">,</span> <span class="n">val</span><span class="p">})</span> <span class="o">-&gt;</span> <span class="n">val</span> <span class="k">end</span><span class="p">)</span> </code></pre></div><p>The above code essentially turns into the following:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="nv">@valid_genres</span> <span class="p">[</span><span class="s2">"fantasy"</span><span class="p">,</span> <span class="s2">"sci-fi"</span><span class="p">,</span> <span class="s2">"dystopian"</span><span class="p">,</span> <span class="s2">"adventure"</span><span class="p">,</span> <span class="o">...</span><span class="p">]</span> </code></pre></div><p>A benefit of using a function at compile time is we don&#39;t have to remember to keep the two lists in sync and it only runs the function once when compiling.</p> <p>Then, in our changeset, we can use <code>Ecto.Changeset.validate_subset/4</code> like this:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="n">changeset</span> <span class="c1"># ...</span> <span class="o">|&gt;</span> <span class="n">validate_subset</span><span class="p">(</span><span class="ss">:genres</span><span class="p">,</span> <span class="nv">@valid_genres</span><span class="p">)</span> <span class="c1"># ...</span> </code></pre></div><p>Nice! We can display friendly values to the user but we store and validate using the internal tag values.</p> <h3 id='options-in-the-template' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#options-in-the-template' aria-label='Anchor'></a>Options in the Template</h3><p>Our template can&#39;t access the internal module attribute <code>@genre_options</code>. If we recall back to the HEEx template and how our component will be used, it calls <code>Book.genre_options/0</code>. Template usage looks like this:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight html'><code><span class="nt">&lt;</span><span class="err">.</span><span class="na">checkgroup</span> <span class="na">field=</span><span class="s">{@form[:genres]}</span> <span class="na">label=</span><span class="s">"Genres"</span> <span class="na">options=</span><span class="s">{Book.genre_options()}</span> <span class="nt">/&gt;</span> </code></pre></div><p>Our template needs a public function to call that returns our options for display. Fortunately, this single line of code is all that&#39;s needed:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">def</span> <span class="n">genre_options</span><span class="p">,</span> <span class="k">do</span><span class="p">:</span> <span class="nv">@genre_options</span> </code></pre></div><p>With that, our schema is set to supply the component with everything needed. Let&#39;s take a look at the final version of component!</p> <h2 id='component' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#component' aria-label='Anchor'></a>Component</h2><p>Here&#39;s the <a href="https://gist.github.com/brainlid/9dcf78386e68ca03d279ae4a9c8c2373">full source</a> for our new &quot;checkgroup&quot; input component. We&#39;ll go over some of the interesting bits next. (NOTE: the Tailwind classes are truncated here.)</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">defmodule</span> <span class="no">MyAppWeb</span><span class="o">.</span><span class="no">CoreComponents</span> <span class="k">do</span> <span class="kn">use</span> <span class="no">Phoenix</span><span class="o">.</span><span class="no">Component</span> <span class="c1"># ...</span> <span class="k">def</span> <span class="n">input</span><span class="p">(%{</span><span class="ss">type:</span> <span class="s2">"checkgroup"</span><span class="p">}</span> <span class="o">=</span> <span class="n">assigns</span><span class="p">)</span> <span class="k">do</span> <span class="sx">~H""</span><span class="s2">" &lt;div phx-feedback-for={@name} class="</span><span class="n">text</span><span class="o">-</span><span class="n">sm</span><span class="s2">"&gt; &lt;.label for={@id} required={@required}&gt;&lt;%= @label %&gt;&lt;/.label&gt; &lt;div class="</span><span class="n">mt</span><span class="o">-</span><span class="mi">1</span> <span class="n">w</span><span class="o">-</span><span class="n">full</span> <span class="n">bg</span><span class="o">-</span><span class="n">white</span> <span class="n">border</span> <span class="n">border</span><span class="o">-</span><span class="n">gray</span><span class="o">-</span><span class="mi">300</span> <span class="o">...</span><span class="s2">"&gt; &lt;div class="</span><span class="n">grid</span> <span class="n">grid</span><span class="o">-</span><span class="n">cols</span><span class="o">-</span><span class="mi">1</span> <span class="n">gap</span><span class="o">-</span><span class="mi">1</span> <span class="n">text</span><span class="o">-</span><span class="n">sm</span> <span class="n">items</span><span class="o">-</span><span class="n">baseline</span><span class="s2">"&gt; &lt;input type="</span><span class="n">hidden</span><span class="s2">" name={@name} value="" /&gt; &lt;div class="</span><span class="o">...</span><span class="s2">" :for={{label, value} &lt;- @options}&gt; &lt;label for={"</span><span class="c1">#{@name}-#{value}"} class="..."&gt;</span> <span class="o">&lt;</span><span class="n">input</span> <span class="n">type</span><span class="o">=</span><span class="s2">"checkbox"</span> <span class="n">id</span><span class="o">=</span><span class="p">{</span><span class="s2">"</span><span class="si">#{</span><span class="nv">@name</span><span class="si">}</span><span class="s2">-</span><span class="si">#{</span><span class="n">value</span><span class="si">}</span><span class="s2">"</span><span class="p">}</span> <span class="n">name</span><span class="o">=</span><span class="p">{</span><span class="nv">@name</span><span class="p">}</span> <span class="n">value</span><span class="o">=</span><span class="p">{</span><span class="n">value</span><span class="p">}</span> <span class="n">checked</span><span class="o">=</span><span class="p">{</span><span class="n">value</span> <span class="ow">in</span> <span class="nv">@value</span><span class="p">}</span> <span class="n">class</span><span class="o">=</span><span class="s2">"mr-2 h-4 w-4 rounded ..."</span> <span class="p">{</span><span class="nv">@rest</span><span class="p">}</span> <span class="o">/&gt;</span> <span class="o">&lt;%=</span> <span class="n">label</span> <span class="p">%</span><span class="o">&gt;</span> <span class="o">&lt;/</span><span class="n">label</span><span class="o">&gt;</span> <span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span> <span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span> <span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span> <span class="o">&lt;.</span><span class="n">error</span> <span class="ss">:for=</span><span class="p">{</span><span class="n">msg</span> <span class="o">&lt;-</span> <span class="nv">@errors</span><span class="p">}</span><span class="err">&gt;</span><span class="o">&lt;%=</span> <span class="n">msg</span> <span class="p">%</span><span class="err">&gt;</span><span class="o">&lt;/.</span><span class="n">error</span><span class="o">&gt;</span> <span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span> <span class="s2">""" end # ... end </span></code></pre></div><p>Here are some points to note:</p> <ul> <li>The function declaration includes the pattern match for <code>type: &quot;checkgroup&quot;</code>. </li><li>A hidden input is included with the value of <code>&quot;&quot;</code>. This ensures we can clear all the checked tags and the browser still has a value to submit to the server. </li><li>The code <code>&lt;div … :for={{label, value} &lt;- @options}&gt;</code> expects our options to be tuples in the format of <code>{label, value}</code>. If using a different options structure, this is where it matters. </li><li>We render a &quot;checkbox&quot; input for every option. The label is displayed and the value is what is stored. </li><li>The <code>@name</code> is changed previously by the existing <code>input</code> function that adapts it to end with the <code>[]</code> when we pass <code>multiple={true}</code> to the component. This is important for correctly submitting the values back to the server. </li></ul> <h3 id='wrapping-up-the-changes' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#wrapping-up-the-changes' aria-label='Anchor'></a>Wrapping Up the Changes</h3><p>We get a warning from the <code>input</code> component that the <code>type</code> isn&#39;t valid. The last thing to do before we are done with the component is update the <code>attr :type</code> declaration on the generated <code>input/1</code> function. We want to add our <code>checkgroup</code> type to the list of valid values. NOTE: The <code>checkgroup</code> entry was added to the end of the <code>values</code> list.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="n">attr</span> <span class="ss">:type</span><span class="p">,</span> <span class="ss">:string</span><span class="p">,</span> <span class="ss">default:</span> <span class="s2">"text"</span><span class="p">,</span> <span class="ss">values:</span> <span class="sx">~w(checkbox color date datetime-local email file hidden month number password range radio search select tel text textarea time url week csv checkgroup)</span> </code></pre></div><p>That&#39;s it! Let&#39;s see how it looks and behaves.</p> <p>(For a complete view of the code, please refer to <a href="https://gist.github.com/brainlid/9dcf78386e68ca03d279ae4a9c8c2373">this Gist</a>.)</p> <h3 id='our-component-in-action' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#our-component-in-action' aria-label='Anchor'></a>Our Component in Action</h3><p>This is what it looks like in action:</p> <p><img src="/phoenix-files/2023-02-13/checkbox-group-appearance-checks.webp?card&amp;center" alt="Screenshot of a multi-select checkbox group input with selected book." /></p> <p>Alright! That&#39;s what we want!</p> <p>The big question now is, &quot;What happens when the form data is submitted to the server?&quot;</p> <h2 id='submitting-the-values' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#submitting-the-values' aria-label='Anchor'></a>Submitting the Values</h2><p>Our component does the work of creating a correctly configured group of many checkbox inputs. When the form is validated or submitted and the selected genres pictured previously are sent, in Phoenix we receive this in our params:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="p">%{</span><span class="s2">"book"</span> <span class="o">=&gt;</span> <span class="p">%{</span><span class="s2">"genres"</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s2">"sci-fi"</span><span class="p">,</span> <span class="s2">"dystopian"</span><span class="p">,</span> <span class="s2">"romance"</span><span class="p">]}}</span> </code></pre></div><p>If we <a href="/phoenix-files/tag-all-the-things/">recall</a>, our schema is setup to handle data formatted this way perfectly! There is nothing left for us to do! The schema casts the <code>genres</code> list of strings and validates it. It works just as expected!</p> <figure class="post-cta"> <figcaption> <h1> Fly.io ❤️ Elixir</h1><p> Fly.io is a great way to run your Phoenix app close to your users. It&#39;s really easy to get started. You can be running in minutes.</p><p><a class="button bg-white text-violet-600 hover:bg-opacity-75 hover:text-violet-700 transition-colors" href="https://fly.io/docs/elixir/"> Deploy a Phoenix app today!&nbsp;&nbsp;<span class='opacity:50'>&rarr;</span> </a></p> </figcaption><div class="image-container"> <img src="/static/images/cta-kitty.webp" srcset="/static/images/cta-kitty@2x.webp 2x" alt=""></div></figure><h2 id='discussion' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#discussion' aria-label='Anchor'></a>Discussion</h2><p>We saw first hand how easy it is to tweak the generated <code>core_components.ex</code> file. Beyond customizing the classes for our application, it is easy to even create new input components!</p> <p>There are a few other points that came out during this little project.</p> <ul> <li>The realization of how easy it was. We added a new input type with a single 25 line function where almost all of it is markup. </li><li>Our new input integrates smoothly with standard forms and changesets. </li><li>The previous approach of using <a href="https://hexdocs.pm/phoenix_html/Phoenix.HTML.Form.html#checkbox/3">Phoenix.HTML.Form.checkbox/3</a> isn&#39;t used anymore in the new <code>core_components.ex</code> approach. The new approach, particularly around <code>input</code>, goes back to more pure HTML. </li><li>Creating a simple pre-configured wrapper component like <code>&lt;.checkgroup ...&gt;</code> ensures we won&#39;t forget important settings like the <code>multiple={true}</code> attribute. </li></ul> <p>In the end, I&#39;m pleased with how well our custom input works with both LiveView and non-LiveView templates.</p> <p>This completes our UI for <a href="/phoenix-files/tag-all-the-things/">adding tag support</a> to a Phoenix application. Go grab the code from <a href="https://gist.github.com/brainlid/9dcf78386e68ca03d279ae4a9c8c2373">this gist</a> and I hope you enjoy customizing your <code>core_components.ex</code>!</p> <p>And tag on!</p> </content>
</entry>
<entry>
<title>Custom styling with LiveView function component attributes</title>
<link rel="alternate" href="https://fly.io/phoenix-files/customizable-classes-lv-component/"/>
<id>https://fly.io/phoenix-files/customizable-classes-lv-component/</id>
<published>2023-02-08T00:00:00+00:00</published>
<updated>2023-04-06T14:48:02+00:00</updated>
<content type="html"><p class="lead"> In this post we use function component attributes to add new CSS classes to our component&#39;s default classes. Fly.io is a great place to run your Phoenix LiveView applications! Check out how to <a href="/docs/elixir/">get started</a>!</p><h2 id='problem' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#problem' aria-label='Anchor'></a>Problem</h2><p>You&#39;re writing a new function component that has default styling. You&#39;ve defined default CSS classes in the component&#39;s template, but you want it to have the flexibility to add a few others when calling the function.</p> <p>How can we give a component some default CSS classes and still customize it to add our own for custom styling?</p> <h2 id='solution' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#solution' aria-label='Anchor'></a>Solution</h2><p>In LiveView 0.18 <a href="https://hexdocs.pm/phoenix_live_view/Phoenix.Component.html#module-attributes">function component attributes</a> were added to define the attributes that the function component expects to receive —either required or not. We can define the type of the attributes, and even default values if we want to.</p> <p>Among the different types that we can use to define the component&#39;s attributes, there are <a href="https://hexdocs.pm/phoenix_live_view/Phoenix.Component.html#module-global-attributes">global attributes</a>. By default, a <code>:global</code> attribute can accept a set of attributes that are common to all standard HTML tags —id, class, hidden, autocapitalize, etc— so we don&#39;t need to individually and repeatedly specify these attributes on every component we define.</p> <p>How can we use all this to customize our function component&#39;s classes? let&#39;s see it!</p> <h3 id='attempt-1' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#attempt-1' aria-label='Anchor'></a>Attempt 1</h3><p>We&#39;re specifying an HTML attribute —class— and we want to set a default value for it. Based on what we just learned, a function component attribute of type <code>:global</code> sounds like just what we need!</p> <p>We define a <code>:rest</code> attribute as global, and we define a map with the default <code>:class</code> values. Then we interpolate the <code>:rest</code> attributes in the <code>&lt;img&gt;</code> tag:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="n">attr</span> <span class="ss">:rest</span><span class="p">,</span> <span class="ss">:global</span><span class="p">,</span> <span class="ss">default:</span> <span class="p">%{</span><span class="ss">class:</span> <span class="s2">"rounded-full"</span><span class="p">}</span> <span class="k">def</span> <span class="n">user_logo</span><span class="p">(</span><span class="n">assigns</span><span class="p">)</span> <span class="k">do</span> <span class="sx">~H""</span><span class="s2">" &lt;img {@rest} /&gt; """</span> <span class="k">end</span> </code></pre></div><p>When calling the function component <code>:user_logo</code> we no longer need to specify any CSS classes, but we do need to give it the image&#39;s source:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="o">&lt;.</span><span class="n">user_logo</span> <span class="n">src</span><span class="o">=</span><span class="p">{</span><span class="n">img</span><span class="o">.</span><span class="n">src</span><span class="p">}</span><span class="err">&gt;</span><span class="o">&lt;/.</span><span class="n">user_logo</span><span class="o">&gt;</span> </code></pre></div><p>It would render something like this:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="o">&lt;</span><span class="n">img</span> <span class="n">class</span><span class="o">=</span><span class="s2">"rounded-full"</span> <span class="n">src</span><span class="o">=</span><span class="s2">"https://avatars..."</span><span class="o">&gt;</span> </code></pre></div><p>But what if we want to add some other CSS classes to the function component besides the default ones?</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="o">&lt;.</span><span class="n">user_logo</span> <span class="n">src</span><span class="o">=</span><span class="p">{</span><span class="n">img</span><span class="o">.</span><span class="n">src</span><span class="p">}</span> <span class="n">class</span><span class="o">=</span><span class="s2">"w-10 h-10"</span><span class="err">&gt;</span><span class="o">&lt;/.</span><span class="n">user_logo</span><span class="o">&gt;</span> </code></pre></div><p>If we set our component&#39;s default class using a global attribute like that, it&#39;s just that: a default. If we specify a new class value when we call the component, the new value overrides the default.</p> <p>It would render something like this:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="o">&lt;</span><span class="n">img</span> <span class="n">class</span><span class="o">=</span><span class="s2">"w-10 h-10"</span> <span class="n">src</span><span class="o">=</span><span class="s2">"https://avatars..."</span><span class="o">&gt;</span> </code></pre></div><p>We can use the default CSS classes without sending anything to the component, or we can define our own from scratch. That&#39;s great!</p> <p>But we don&#39;t have any way to <em>add</em> classes, and that&#39;s not what we&#39;re looking for!</p> <h3 id='attempt-2-it-works' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#attempt-2-it-works' aria-label='Anchor'></a>Attempt 2 - It Works!</h3><p>Instead of using a structured global attribute for the default class, we can turn it around: put the desired default value into the function component template, and make our <code>:class</code> attribute a string with a default value of <code>nil</code>.</p> <p>This way we can group both classes in a list, and interpolate them inside the class attribute of our HTML tag:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="n">attr</span> <span class="ss">:class</span><span class="p">,</span> <span class="ss">:string</span><span class="p">,</span> <span class="ss">default:</span> <span class="no">nil</span> <span class="n">attr</span> <span class="ss">:rest</span><span class="p">,</span> <span class="ss">:global</span> <span class="k">def</span> <span class="n">user_icon</span><span class="p">(</span><span class="n">assigns</span><span class="p">)</span> <span class="k">do</span> <span class="sx">~H""</span><span class="s2">" &lt;img class={["</span><span class="n">rounded</span><span class="o">-</span><span class="n">full</span><span class="s2">", @class]} {@rest} /&gt; """</span> <span class="k">end</span> </code></pre></div><aside class="right-sidenote"> Here we kept the global <code>:rest</code> attribute for any other HTML attributes we may want to set when we call the function, but which we don&#39;t have default values for. In this example, to set the image&#39;s <code>:src</code> path.</aside><p>If we render the updated function component just as we did above, we keep the default classes, and the additional ones:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="o">&lt;</span><span class="n">img</span> <span class="n">class</span><span class="o">=</span><span class="s2">"rounded-full w-10 h-10"</span> <span class="n">src</span><span class="o">=</span><span class="s2">"..."</span><span class="o">&gt;</span> </code></pre></div><p>That&#39;s all! now we can add as many classes as we want without losing the default ones.</p> <figure class="post-cta"> <figcaption> <h1> Fly.io ❤️ Elixir</h1><p> Fly.io is a great way to run your Phoenix LiveView app close to your users. It&#39;s really easy to get started. You can be running in minutes.</p><p><a class="button bg-white text-violet-600 hover:bg-opacity-75 hover:text-violet-700 transition-colors" href="https://fly.io/docs/elixir/"> Deploy a Phoenix app today!&nbsp;&nbsp;<span class='opacity:50'>&rarr;</span> </a></p> </figcaption><div class="image-container"> <img src="/static/images/cta-rabbit.webp" srcset="/static/images/cta-rabbit@2x.webp 2x" alt=""></div></figure><h2 id='discussion' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#discussion' aria-label='Anchor'></a>Discussion</h2><p>We set out to have our components start with some basic CSS styles and then possibly extend them at the point where we use them. We succeeded in making our component flexible enough to be styled with extra classes when needed.</p> <p>We looked at two ways of doing it and ended up with one we&#39;re really happy with. Beyond just classes, we saw how we can pass arbitrary HTML attributes through to our component as well!</p> <p>We also saw how our components and their attributes allow us to describe our components. We can easily define the style, structure and functionality of our components with a clear and easy to use API. That&#39;s pretty cool!</p> </content>
</entry>
<entry>
<title>SQLite3 Full Text Search with Phoenix</title>
<link rel="alternate" href="https://fly.io/phoenix-files/sqlite3-full-text-search-with-phoenix/"/>
<id>https://fly.io/phoenix-files/sqlite3-full-text-search-with-phoenix/</id>
<published>2023-01-31T00:00:00+00:00</published>
<updated>2023-04-06T14:48:02+00:00</updated>
<content type="html"><p class="lead"> This is a start of a series using SQLite3 Full Text Search and Elixir. Fly.io is a great place to run Elixir applications! Check out how to <a href="/docs/elixir/">get started</a>!</p><p>One of the benefits of SQLite is that you can query lightning quick because your database is colocated next to your server. And a bonus it also comes with built-in Full Text search capabilities! But how does this work with Ecto?</p> <p>In this Series we will walk through</p> <ul> <li>Use SQLite Full Text with Ecto. </li><li>Building a LiveView autocomplete using the new index. </li><li>How to set up LiteFS and Fly.io to distribute your search index close to the users. </li></ul> <h2 id='setup' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#setup' aria-label='Anchor'></a>Setup</h2><p>Before we begin we will need to set up our existing or new application to use SQLite3, luckily we have a guide to help with just that: <a href="https://fly.io/docs/elixir/advanced-guides/sqlite3/">SQLite3</a>!</p> <p>In this guide we will be using the built-in <a href="https://www.sqlite.org/fts5.html">FTS5</a> plugin. This is compiled and shipped with the <a href="https://hex.pm/packages/ecto_sqlite3">ecto_sqlite3</a> library, so we should be all set. If you have problems here because you have a custom setup check here first.</p> <h2 id='background' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#background' aria-label='Anchor'></a>Background</h2><p>The FTS5 plugin will only work on FTS5 specified virtual tables. In SQLite3 we have the concept of a <a href="[https://www.sqlite.org/vtab.html](https://www.sqlite.org/vtab.html)">Virtual Table</a> which SQLite sees as a normal table with columns. This virtual table can be queried normally but plugin&#39;s can manipulate the data before it&#39;s written to disc or returned in a query. In this case FTS5 maintains an index and will build the correct result set and give each result row a <code>rank</code> based on its content. This plugin also gives us special syntax to query the virtual table and rank them.</p> <p>In this guide we&#39;ll first start with the phoenix generators, and we&#39;ll change the generated code as we go. So lets begin</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight bash'><code>mix phx.gen.context Data Document documents title:string body:string author:string url:string <span class="k">*</span> creating lib/app/data/document.ex <span class="k">*</span> creating priv/repo/migrations/20230118183954_create_documents.exs <span class="k">*</span> creating lib/app/data.ex <span class="k">*</span> injecting lib/app/data.ex <span class="k">*</span> creating <span class="nb">test</span>/app/data_test.exs <span class="k">*</span> injecting <span class="nb">test</span>/app/data_test.exs <span class="k">*</span> creating <span class="nb">test</span>/support/fixtures/data_fixtures.ex <span class="k">*</span> injecting <span class="nb">test</span>/support/fixtures/data_fixtures.ex Remember to update your repository by running migrations: <span class="nv">$ </span>mix ecto.migrate </code></pre></div><p>This will generate everything we need to get started. Before running the migrations lets replace them wholesale to look like so:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">defmodule</span> <span class="no">App</span><span class="o">.</span><span class="no">Repo</span><span class="o">.</span><span class="no">Migrations</span><span class="o">.</span><span class="no">CreateDocuments</span> <span class="k">do</span> <span class="kn">use</span> <span class="no">Ecto</span><span class="o">.</span><span class="no">Migration</span> <span class="k">def</span> <span class="n">change</span> <span class="k">do</span> <span class="n">execute</span><span class="p">(</span><span class="sd">""" CREATE VIRTUAL TABLE documents USING fts5( updated_at UNINDEXED, inserted_at UNINDEXED, url UNINDEXED, title, author, body ); """</span><span class="p">,</span> <span class="sd">""" DROP TABLE documents; """</span> <span class="p">)</span> <span class="k">end</span> <span class="k">end</span> </code></pre></div><p>Ecto SQL does not come with facilities to allow us to define a virtual table using custom functions so we will be using <a href="https://hexdocs.pm/ecto_sql/Ecto.Migration.html#execute/2">execute/2</a> migration function which accepts an up string and down string.</p> <p>In the up we are defining a virtual table named <code>documents</code> using the <code>fts5</code> function which accepts a list of columns and column attributes. We included the default timestamps and URL, marking them as <code>UNINDEXED</code> this tells the index to ignore those columns.</p> <p>And now by default SQLite3 will index the title, author and body column and allow us to directly search them. Notice we don&#39;t have a primary key and that is cause FTS5 has a built-in primary key of <code>rowid</code>.</p> <p>Next up we need to update our schema in Elixir to handle the new table structure so lets change the <code>lib/app/data/document.ex</code> like so:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight diff'><code><span class="p">defmodule App.Data.Document do </span> use Ecto.Schema import Ecto.Changeset <span class="err"> </span><span class="gi">+ @primary_key {:id, :id, autogenerate: true, source: :rowid} </span> schema "documents" do field :author, :string field :body, :string field :title, :string field :url, :string <span class="gi">+ field :rank, :float, virtual: true </span><span class="err"> </span> timestamps() end ... <span class="p">end </span></code></pre></div><p>Here we are telling ecto that our primary key is called <code>:id</code> but when queried it&#39;s called <code>:rowid</code> this lets us use the built-in SQLite functions seamlessly with Ecto Queries. And we&#39;re also adding a virtual <code>:rank</code> column that lets us query and order by the special column <code>:rank</code> provided by FTS5.</p> <p>And finally lets query it using the most basic query syntax:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code> <span class="nv">@doc</span> <span class="sd">""" Searchs our documents based on a simple query. ## Examples iex&gt; search_documents("hello") [%Document{}, ...] """</span> <span class="k">def</span> <span class="n">search_documents</span><span class="p">(</span><span class="n">q</span><span class="p">)</span> <span class="k">do</span> <span class="n">from</span><span class="p">(</span><span class="n">d</span> <span class="ow">in</span> <span class="no">Document</span><span class="p">,</span> <span class="ss">select:</span> <span class="p">[</span><span class="ss">:title</span><span class="p">,</span> <span class="ss">:url</span><span class="p">,</span> <span class="ss">:rank</span><span class="p">,</span> <span class="ss">:id</span><span class="p">],</span> <span class="ss">where:</span> <span class="n">fragment</span><span class="p">(</span><span class="s2">"documents MATCH ?"</span><span class="p">,</span> <span class="o">^</span><span class="n">q</span><span class="p">),</span> <span class="ss">order_by:</span> <span class="p">[</span><span class="ss">asc:</span> <span class="ss">:rank</span><span class="p">]</span> <span class="p">)</span> <span class="o">|&gt;</span> <span class="no">Repo</span><span class="o">.</span><span class="n">all</span><span class="p">()</span> <span class="k">end</span> </code></pre></div><p>The bulk of the magic happens in the <code>where</code> where we use a <code>fragment(&quot;documents MATCH ?&quot;, ^q)</code> which is the syntax for querying an FTS5 virtual table. It is a little strange since we&#39;re matching an entire table name and not a specific column but the intuition of it is all indexed columns are searched as one string.</p> <p>With the <code>order_by</code> returning the results ordered by <code>rank</code>, which is required otherwise results with be ordered unpredictably.</p> <p>Finally when we are ready we can insert, update and delete documents normally using our <code>Data</code> context functions generated for us.</p> <p>And there we go, we now have the basic structure and setup required to do full text searching with Ecto and SQLite3. But this is just scratching the surface here on what&#39;s possible with some extra effort.</p> <h2 id='further-considerations' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#further-considerations' aria-label='Anchor'></a>Further Considerations</h2><h3 id='keep-your-data-in-sync' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#keep-your-data-in-sync' aria-label='Anchor'></a>Keep Your Data in Sync</h3><p>No matter what you are responsible for building your and keeping your index fresh.</p> <p>If this is a specific search index for external data we might run a nightly job to rebuild it, or we might kick off a build every time something changes. We might even set up an <a href="https://getoban.pro/">Oban</a> job to do this periodically or asynchronously whenever our content changes.</p> <p>If this search works on other content already in the database we have other options:</p> <ul> <li>We could manually update our index within the Context whenever the base data changes. </li><li>We could set up triggers to automagically change the underlying data whenever we need it to change. That is left up as a challenge to the reader. </li><li>Or we could use the built-in <a href="https://www.sqlite.org/fts5.html#external_content_and_contentless_tables">External Content and Contentless Tables</a> functionality. This can be helpful if the content you are searching is large and you need to reduce your SQLite database size. This will build the index in the FTS5 table, and then query the original table to show the data as needed. We won&#39;t deep dive into this as the guides do a good job of it, and it is almost entirely something that lives in migrations anyway. </li></ul> <h3 id='advanced-queries' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#advanced-queries' aria-label='Anchor'></a>Advanced Queries</h3><p>The basic query syntax can work if your content is text heavy like documents or blog posts but, sometimes you need to specify certain columns more directly. The FTS5 documentation go directly into this with the <a href="https://www.sqlite.org/fts5.html#full_text_query_syntax">Full Text Query Syntax</a> section of the documentation. Suffice to say we will need to build out our query string and then shove them into fragments. I won&#39;t go into super detail here as the steps are specific to each use case.</p> <figure class="post-cta"> <figcaption> <h1> Fly.io ❤️ Elixir</h1><p> Fly.io is a great way to run your Phoenix LiveView app close to your users. It&#39;s really easy to get started. You can be running in minutes.</p><p><a class="button bg-white text-violet-600 hover:bg-opacity-75 hover:text-violet-700 transition-colors" href="https://fly.io/docs/elixir/"> Deploy a Phoenix app today!&nbsp;&nbsp;<span class='opacity:50'>&rarr;</span> </a></p> </figcaption><div class="image-container"> <img src="/static/images/cta-dog.webp" srcset="/static/images/cta-dog@2x.webp 2x" alt=""></div></figure></content>
</entry>
<entry>
<title>Tag All the Things!</title>
<link rel="alternate" href="https://fly.io/phoenix-files/tag-all-the-things/"/>
<id>https://fly.io/phoenix-files/tag-all-the-things/</id>
<published>2023-01-30T00:00:00+00:00</published>
<updated>2023-04-06T14:48:02+00:00</updated>
<content type="html"><p class="lead"> This is about a simple way of tagging database records using Postgres and Ecto that fits a number of situations. Fly.io is a great place to run Elixir applications! Check out how to <a href="/docs/elixir/">get started</a>!</p><p><strong class='font-semibold text-navy'>UPDATED</strong>: This was updated to support clearing a list of tags from a <a href="/phoenix-files/making-a-checkboxgroup-input/">UI input component</a>.</p> <p>Whether you link labels to a Github issue, track the different muscle groups strengthened by an exercise, or describe a book by the set of genres that apply to it, it&#39;s all the same thing, <strong class='font-semibold text-navy'>tagging</strong>. Developers define tags that apply to things like cars listings, a job posting, or a property listing and it adds richness and meaning to the tagged item. It often isn&#39;t called a &quot;tag&quot;, it may be referred to as &quot;categories&quot;, &quot;labels&quot;, &quot;traits&quot;, &quot;genres&quot;, whatever!</p> <p>There are numerous ways to add tagging to a system and the &quot;right way&quot; depends on the system and the problem being solved. Here we&#39;ll explore a very easy way to add tagging to our Phoenix applications that also uses of a cool feature in <a href="https://www.postgresql.org/">PostgreSQL</a>.</p> <h2 id='problem' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#problem' aria-label='Anchor'></a>Problem</h2><p>We have a book tracking system. In our system, we let trusted users create new book entries. A book can belong to multiple genres. There is a finite set of pre-defined genres we support. The application provides the full set of supported and possible genres.</p> <p>A book entry should support being tagged as &quot;Sci-Fi&quot;, &quot;Mystery&quot; and &quot;Young Adult&quot; all at the same time. In our system, we call it &quot;genres&quot;, but it&#39;s really just tagging, isn&#39;t it?</p> <p>How do we add the ability to &quot;tag&quot; a database entry (i.e. book) with a set of tags (i.e. genres)?</p> <h2 id='solution' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#solution' aria-label='Anchor'></a>Solution</h2><p>For this discussion, a &quot;tag&quot; is a custom descriptor added to a database record.</p> <p>This solution assumes the list of possible tags are defined by the system and not user managed. For instance, when talking about book genres, we don&#39;t allow users to create a new genre called &quot;stupid&quot;. A genre has specific meaning in the book tracking system and users don&#39;t get a vote.</p> <p>Similarly, this applies to exercises and the impacted muscle groups. People don&#39;t get to create new muscle groups! They just exist and as users, we tag an item with one or more of the pre-defined tags.</p> <p>This solution is for that type of system.</p> <p>Given that constraint, this solution covers how to do the following:</p> <ul> <li>enable an item to be tagged in our Postgres DB </li><li>add the tag field to our Ecto schema </li><li>process tags through a changeset </li><li>query items using the tags </li></ul> <h3 id='database-migration' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#database-migration' aria-label='Anchor'></a>Database Migration</h3><p>Our solution starts in the database. We&#39;re using <a href="https://www.postgresql.org/">Postgres</a> for our application (the default DB for Phoenix applications). We&#39;ll take advantage of Postgres&#39; <a href="https://www.postgresql.org/docs/current/arrays.html">array column type</a>. This let&#39;s us create a single field on a table that holds an array of values. For our tags, it will be an array of strings.</p> <p>Here&#39;s the relevant part of a DB migration to add a <code>books</code> table with a <code>genres</code> field that holds an array of strings.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="n">create</span> <span class="n">table</span><span class="p">(</span><span class="ss">:books</span><span class="p">)</span> <span class="k">do</span> <span class="n">add</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">:string</span><span class="p">,</span> <span class="ss">null:</span> <span class="no">false</span> <span class="c1"># ...</span> <span class="n">add</span> <span class="ss">:genres</span><span class="p">,</span> <span class="p">{</span><span class="ss">:array</span><span class="p">,</span> <span class="ss">:string</span><span class="p">}</span> <span class="c1"># ...</span> <span class="k">end</span> <span class="c1"># add an index on the genres</span> <span class="n">execute</span><span class="p">(</span><span class="s2">"create index books_genres_index on books using gin (genres);"</span><span class="p">)</span> </code></pre></div><aside class="right-sidenote"> GIN indexes are “inverted indexes” which are appropriate for data values that contain multiple component values, such as arrays.</aside><p>Notice that the field type used is <code>{:array, :string}</code>. Also note, the last line executes an SQL statement to create a special <a href="https://www.postgresql.org/docs/15/indexes-types.html#INDEXES-TYPES-GIN">GIN index</a> on our array field. The <a href="https://www.postgresql.org/docs/9.3/textsearch-indexes.html">GIN index will keep our look ups fast</a>!</p> <p>With our database table ready, let&#39;s move on to Ecto.</p> <h3 id='ecto-schema' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#ecto-schema' aria-label='Anchor'></a>Ecto Schema</h3><p>Next, we need to mirror the database change in our <a href="https://hexdocs.pm/ecto/Ecto.Schema.html">Ecto Schema</a>. Here&#39;s the relevant part of our schema definition:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="n">schema</span> <span class="s2">"books"</span> <span class="k">do</span> <span class="n">field</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">:string</span><span class="p">,</span> <span class="ss">required:</span> <span class="no">true</span> <span class="c1"># ...</span> <span class="n">field</span> <span class="ss">:genres</span><span class="p">,</span> <span class="p">{</span><span class="ss">:array</span><span class="p">,</span> <span class="ss">:string</span><span class="p">},</span> <span class="ss">default:</span> <span class="p">[],</span> <span class="ss">required:</span> <span class="no">true</span> <span class="c1"># ...</span> <span class="k">end</span> </code></pre></div><p>Again, the field is described as an array of strings. Yes, that means Ecto natively supports working with an <a href="https://hexdocs.pm/ecto/Ecto.Type.html#cast/2">array of strings</a>. Nice! That will come in handy!</p> <p>We have the structure part handled. Now we want to control how data is stored there.</p> <h3 id='validate-the-array' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#validate-the-array' aria-label='Anchor'></a>Validate the Array</h3><p>In this section, we&#39;re talking about the changeset functions used on our data. We will parse, cast, validate, and process user values.</p> <p>Let&#39;s start with an abbreviated list of the valid genres. Since the allowed genres are built-in to our application, we can code it with our schema.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">defmodule</span> <span class="no">MyApp</span><span class="o">.</span><span class="no">Books</span><span class="o">.</span><span class="no">Book</span> <span class="k">do</span> <span class="kn">use</span> <span class="no">Ecto</span><span class="o">.</span><span class="no">Schema</span> <span class="kn">import</span> <span class="no">Ecto</span><span class="o">.</span><span class="no">Query</span><span class="p">,</span> <span class="ss">warn:</span> <span class="no">false</span> <span class="kn">import</span> <span class="no">Ecto</span><span class="o">.</span><span class="no">Changeset</span> <span class="n">schema</span> <span class="s2">"books"</span> <span class="k">do</span> <span class="n">field</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:string</span><span class="p">,</span> <span class="ss">required:</span> <span class="no">true</span> <span class="n">field</span> <span class="ss">:genres</span><span class="p">,</span> <span class="p">{</span><span class="ss">:array</span><span class="p">,</span> <span class="ss">:string</span><span class="p">},</span> <span class="ss">default:</span> <span class="p">[],</span> <span class="ss">required:</span> <span class="no">true</span> <span class="c1"># ...</span> <span class="k">end</span> <span class="nv">@genre_options</span> <span class="p">[</span> <span class="s2">"fantasy"</span><span class="p">,</span> <span class="s2">"sci-fi"</span><span class="p">,</span> <span class="s2">"dystopian"</span><span class="p">,</span> <span class="s2">"adventure"</span><span class="p">,</span> <span class="s2">"romance"</span><span class="p">,</span> <span class="s2">"mystery"</span><span class="p">,</span> <span class="s2">"horror"</span><span class="p">,</span> <span class="s2">"thriller"</span><span class="p">,</span> <span class="s2">"historical-fiction"</span><span class="p">,</span> <span class="s2">"young-adult"</span><span class="p">,</span> <span class="s2">"children-fiction"</span><span class="p">,</span> <span class="s2">"autobiography"</span><span class="p">,</span> <span class="s2">"biography"</span><span class="p">,</span> <span class="s2">"cooking"</span><span class="p">,</span> <span class="c1"># ...</span> <span class="p">]</span> <span class="c1"># ...</span> </code></pre></div><p>The changeset steps to address here are validating the array of values and sorting them. Why sort? We&#39;ll come back to that later. We can use the <code>@genre_options</code> module attribute in our changeset function to validate the user&#39;s data.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">defp</span> <span class="n">common_validations</span><span class="p">(</span><span class="n">changeset</span><span class="p">)</span> <span class="k">do</span> <span class="n">changeset</span> <span class="c1"># ...</span> <span class="o">|&gt;</span> <span class="n">validate_required</span><span class="p">([</span><span class="ss">:name</span><span class="p">])</span> <span class="o">|&gt;</span> <span class="n">trim_array</span><span class="p">(</span><span class="ss">:genres</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="n">validate_array</span><span class="p">(</span><span class="ss">:genres</span><span class="p">,</span> <span class="nv">@genre_options</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="n">sort_array</span><span class="p">(</span><span class="ss">:genres</span><span class="p">)</span> <span class="k">end</span> </code></pre></div><aside class="right-sidenote"> Instead of creating our own <code>validate_array</code>, we could leverage Ecto&#39;s existing <a href="https://hexdocs.pm/ecto/Ecto.Changeset.html#validate_subset/4"><code>validate_subset/4</code></a> function to ensure only our listed <code>@genres_options</code> are accepted.</aside><p>Note that the <code>trim_array/2</code>, <code>validate_array/3</code> and <code>sort_array/2</code> functions don&#39;t exist in Ecto, we will create them. We want <code>trim_array</code> to handle data from our UI and <code>validate_array</code> to enforce that only values in our <code>@genre_options</code> list are accepted.</p> <p>We&#39;ll talk more about <code>trim_array</code> in a bit. First, here&#39;s one way to build <code>validate_array</code>:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="nv">@doc</span> <span class="sd">""" Validate that the array of string on the changeset are all in the set of valid values. """</span> <span class="k">def</span> <span class="n">validate_array</span><span class="p">(</span><span class="n">changeset</span><span class="p">,</span> <span class="n">field</span><span class="p">,</span> <span class="n">valid_values</span><span class="p">)</span> <span class="k">do</span> <span class="n">validate_change</span><span class="p">(</span><span class="n">changeset</span><span class="p">,</span> <span class="n">field</span><span class="p">,</span> <span class="k">fn</span> <span class="o">^</span><span class="n">field</span><span class="p">,</span> <span class="n">new_values</span> <span class="o">-&gt;</span> <span class="k">if</span> <span class="no">Enum</span><span class="o">.</span><span class="n">all?</span><span class="p">(</span><span class="n">new_values</span><span class="p">,</span> <span class="o">&amp;</span><span class="p">(</span><span class="nv">&amp;1</span> <span class="ow">in</span> <span class="n">valid_values</span><span class="p">))</span> <span class="k">do</span> <span class="p">[]</span> <span class="k">else</span> <span class="n">unsupported</span> <span class="o">=</span> <span class="n">new_values</span> <span class="o">--</span> <span class="n">valid_values</span> <span class="p">[{</span><span class="n">field</span><span class="p">,</span> <span class="s2">"Only the defined values are allowed. Unsupported: </span><span class="si">#{</span><span class="n">inspect</span><span class="p">(</span><span class="n">unsupported</span><span class="p">)</span><span class="si">}</span><span class="s2">"</span><span class="p">}]</span> <span class="k">end</span> <span class="k">end</span><span class="p">)</span> <span class="k">end</span> </code></pre></div><p>Our <code>validate_array</code> uses <a href="https://hexdocs.pm/ecto/Ecto.Changeset.html#validate_change/3">Ecto.Changeset.validate_change/3</a> to run our custom validation function only when the field value changes. It checks each item in the new array to ensure they are part of the approved set of <code>valid_values</code>. If any are not valid, an error is added to the changeset.</p> <h3 id='sort-the-array' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#sort-the-array' aria-label='Anchor'></a>Sort the Array</h3><p>In this step, we&#39;ll process the tag values to sort them. Why sort it here? There are a couple reasons:</p> <ol> <li>We want the tag values to appear in a consistent order. For instance, when listing our books, we might display different books of a series together and they all share the same genre. It looks <em>wrong</em> for the genres to appear in different order when viewed this way! <ol> <li>Harry Potter 1 - Genres: <strong class='font-semibold text-navy'>young-adult, fantasy, adventure</strong> </li><li>Harry Potter 2 - Genres: <strong class='font-semibold text-navy'>adventure, young-adult, fantasy</strong> </li><li>Harry Potter 3 - Genres: <strong class='font-semibold text-navy'>fantasy, adventure, young-adult</strong> </li></ol> </li><li>It is more efficient to sort the values when setting them so later, when it&#39;s displayed, we won&#39;t be repeatedly doing the work to sort them. </li></ol> <p>How to sort them?</p> <p>The values <em>could</em> be sorted logically or according to a pre-determined order. However, here we&#39;ll take the simple approach of sorting them alphabetically.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="nv">@doc</span> <span class="sd">""" When working with a field that is an array of strings, this function sorts the values in the array. """</span> <span class="k">def</span> <span class="n">sort_array</span><span class="p">(</span><span class="n">changeset</span><span class="p">,</span> <span class="n">field</span><span class="p">)</span> <span class="k">do</span> <span class="n">update_change</span><span class="p">(</span><span class="n">changeset</span><span class="p">,</span> <span class="n">field</span><span class="p">,</span> <span class="o">&amp;</span><span class="p">(</span><span class="no">Enum</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="nv">&amp;1</span><span class="p">)))</span> <span class="k">end</span> </code></pre></div><p>The <code>sort_array</code> function leans heavily on the nifty <a href="https://hexdocs.pm/ecto/Ecto.Changeset.html#update_change/3">Ecto.Changeset.update_change/3</a> function. When the field value is changed it runs it through the <a href="https://hexdocs.pm/elixir/Enum.html#sort/1">Enum.sort/1</a> function.</p> <h3 id='trimming-the-array' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#trimming-the-array' aria-label='Anchor'></a>Trimming the Array</h3><p>We want to be able to clear the array, or replace it with an empty array. It works fine to do that in Elixir code, but this last step supports the UI needs of our code. This article doesn&#39;t deal with the UI, but if we <a href="/phoenix-files/making-a-checkboxgroup-input/">peer into the future</a>, here&#39;s the problem we need to address.</p> <p>HTML forms can&#39;t easily send an &quot;empty&quot; array. A simple way to deal with that is to have it send <em>something</em> that indicates a blank value. Then, after removing the blank value, we&#39;ll be left with the array value we need. In our case, we&#39;ll assume that the blank value is <code>&quot;&quot;</code>. So, if the array value looks like this:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="p">%{</span><span class="s2">"genres"</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s2">""</span><span class="p">]}</span> </code></pre></div><p>Then after trimming the list, it ends up like this:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="p">%{</span><span class="s2">"genres"</span> <span class="o">=&gt;</span> <span class="p">[]}</span> </code></pre></div><p>Here&#39;s a function to do that for us. Additionally, we&#39;ll let the &quot;blank&quot; value be specified.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="nv">@doc</span> <span class="sd">""" Remove the blank value from the array. """</span> <span class="k">def</span> <span class="n">trim_array</span><span class="p">(</span><span class="n">changeset</span><span class="p">,</span> <span class="n">field</span><span class="p">,</span> <span class="n">blank</span> <span class="p">\\</span> <span class="s2">""</span><span class="p">)</span> <span class="k">do</span> <span class="n">update_change</span><span class="p">(</span><span class="n">changeset</span><span class="p">,</span> <span class="n">field</span><span class="p">,</span> <span class="o">&amp;</span><span class="no">Enum</span><span class="o">.</span><span class="n">reject</span><span class="p">(</span><span class="nv">&amp;1</span><span class="p">,</span> <span class="k">fn</span> <span class="n">item</span> <span class="o">-&gt;</span> <span class="n">item</span> <span class="o">==</span> <span class="n">blank</span> <span class="k">end</span><span class="p">))</span> <span class="k">end</span> </code></pre></div><h3 id='combining-the-changeset-functions' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#combining-the-changeset-functions' aria-label='Anchor'></a>Combining the Changeset Functions</h3><p>Our helper functions <code>validate_array/3</code>, <code>sort_array/2</code>, and <code>trim_array/3</code> can be moved to a separate module for easy reuse when needed using an <code>import MyApp.EctoHelpers</code>.</p> <p>While we&#39;re refactoring, we&#39;ll create a single function that does all three operations at once for us.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="nv">@doc</span> <span class="sd">""" Clean and process the array values and validate the selected values against an approved list. """</span> <span class="k">def</span> <span class="n">clean_and_validate_array</span><span class="p">(</span><span class="n">changeset</span><span class="p">,</span> <span class="n">field</span><span class="p">,</span> <span class="n">valid_values</span><span class="p">,</span> <span class="n">blank</span> <span class="p">\\</span> <span class="s2">""</span><span class="p">)</span> <span class="k">do</span> <span class="n">changeset</span> <span class="o">|&gt;</span> <span class="n">trim_array</span><span class="p">(</span><span class="n">field</span><span class="p">,</span> <span class="n">blank</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="n">sort_array</span><span class="p">(</span><span class="n">field</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="n">validate_array</span><span class="p">(</span><span class="n">field</span><span class="p">,</span> <span class="n">valid_values</span><span class="p">)</span> <span class="k">end</span> </code></pre></div><p>Now our schema&#39;s <code>common_validations</code> can be cleaned up. Instead of 3 changeset functions for every field that works with some type of tags, it is instead a single line:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">defp</span> <span class="n">common_validations</span><span class="p">(</span><span class="n">changeset</span><span class="p">)</span> <span class="k">do</span> <span class="n">changeset</span> <span class="c1"># ...</span> <span class="o">|&gt;</span> <span class="n">validate_required</span><span class="p">([</span><span class="ss">:name</span><span class="p">])</span> <span class="o">|&gt;</span> <span class="n">clean_and_validate_array</span><span class="p">(</span><span class="ss">:genres</span><span class="p">,</span> <span class="nv">@genre_options</span><span class="p">)</span> <span class="k">end</span> </code></pre></div><p>This is one of the powerful benefits of changeset functions that I love! 😍 They are composable and easy to reuse!</p> <p>See <a href="https://gist.github.com/brainlid/9dcf78386e68ca03d279ae4a9c8c2373">this gist</a> for the full code including the <a href="/phoenix-files/making-a-checkboxgroup-input/">UI component</a>.</p> <h3 id='setting-the-array' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#setting-the-array' aria-label='Anchor'></a>Setting the Array</h3><p>It helps to see how the values are set. Writing tests is a great way to explore the behavior and ensure it works as we expect. For now, we can play with setting the array in an IEx session:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="n">alias</span> <span class="no">MyApp</span><span class="o">.</span><span class="no">Books</span><span class="o">.</span><span class="no">Book</span> <span class="n">changeset</span> <span class="o">=</span> <span class="no">Book</span><span class="o">.</span><span class="n">changeset</span><span class="p">(%</span><span class="no">Book</span><span class="p">{},</span> <span class="p">%{</span><span class="ss">genres:</span> <span class="p">[</span><span class="s2">"historical-fiction"</span><span class="p">,</span> <span class="s2">"thriller"</span><span class="p">]})</span> </code></pre></div><p>Nice! We can play with sending both valid and invalid tags and see the changeset validate and sort our array.</p> <p>Because Ecto natively supports the array of string field type, we don&#39;t need to do anything to get the data back. It&#39;s just up to us to represent and display the tag data in a way that makes sense in our application.</p> <p>With the ability to store tags in the database, we&#39;re ready to query our data using those tags. Let&#39;s see how that works!</p> <h3 id='query-using-tags' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#query-using-tags' aria-label='Anchor'></a>Query Using Tags</h3><p>When it comes to querying our records using the tags, recall that we added the index to the field in the migration. This makes filtering by a tag something we can do without any hassle.</p> <p>Let&#39;s try it out!</p> <h3 id='how-can-we-query-for-only-books-tagged-as-historical-fiction' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#how-can-we-query-for-only-books-tagged-as-historical-fiction' aria-label='Anchor'></a>How Can We Query for Only Books Tagged as &quot;historical-fiction&quot;?</h3><div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="kn">import</span> <span class="no">Ecto</span><span class="o">.</span><span class="no">Query</span> <span class="n">alias</span> <span class="no">MyApp</span><span class="o">.</span><span class="no">Books</span><span class="o">.</span><span class="no">Book</span> <span class="n">books</span> <span class="o">=</span> <span class="n">from</span><span class="p">(</span><span class="n">b</span> <span class="ow">in</span> <span class="no">Book</span><span class="p">,</span> <span class="ss">where:</span> <span class="s2">"historical-fiction"</span> <span class="ow">in</span> <span class="n">b</span><span class="o">.</span><span class="n">genres</span><span class="p">)</span> </code></pre></div><p>Nice!</p> <h3 id='how-do-we-query-for-multiple-tags-at-the-same-time' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#how-do-we-query-for-multiple-tags-at-the-same-time' aria-label='Anchor'></a>How Do We Query for Multiple Tags at the Same Time?</h3><p>We don&#39;t want to say <code>where b.genres == ^genre_list</code> because that returns only the books that match the <em>exact</em> set of genres. We want to be able to find books where the genres include &quot;historical-fiction&quot; and &quot;thriller&quot; but may also include &quot;mystery&quot; or other genres.</p> <p>Here&#39;s how we write that query:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="kn">import</span> <span class="no">Ecto</span><span class="o">.</span><span class="no">Query</span> <span class="n">alias</span> <span class="no">MyApp</span><span class="o">.</span><span class="no">Books</span><span class="o">.</span><span class="no">Book</span> <span class="n">books</span> <span class="o">=</span> <span class="n">from</span><span class="p">(</span><span class="n">b</span> <span class="ow">in</span> <span class="no">Book</span><span class="p">,</span> <span class="ss">where:</span> <span class="s2">"adventure"</span> <span class="ow">in</span> <span class="n">b</span><span class="o">.</span><span class="n">genres</span><span class="p">,</span> <span class="ss">where:</span> <span class="s2">"fantasy"</span> <span class="ow">in</span> <span class="n">b</span><span class="o">.</span><span class="n">genres</span> <span class="p">)</span> </code></pre></div><h3 id='how-do-we-query-for-adventure-and-fantasy-but-exclude-all-tagged-as-young-adult' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#how-do-we-query-for-adventure-and-fantasy-but-exclude-all-tagged-as-young-adult' aria-label='Anchor'></a>How Do We Query for &quot;adventure&quot; and &quot;fantasy&quot; but Exclude All Tagged as &quot;young-adult&quot;?</h3><div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="kn">import</span> <span class="no">Ecto</span><span class="o">.</span><span class="no">Query</span> <span class="n">alias</span> <span class="no">MyApp</span><span class="o">.</span><span class="no">Books</span><span class="o">.</span><span class="no">Book</span> <span class="n">books</span> <span class="o">=</span> <span class="n">from</span><span class="p">(</span><span class="n">b</span> <span class="ow">in</span> <span class="no">Book</span><span class="p">,</span> <span class="ss">where:</span> <span class="s2">"adventure"</span> <span class="ow">in</span> <span class="n">b</span><span class="o">.</span><span class="n">genres</span><span class="p">,</span> <span class="ss">where:</span> <span class="s2">"fantasy"</span> <span class="ow">in</span> <span class="n">b</span><span class="o">.</span><span class="n">genres</span><span class="p">,</span> <span class="ss">where:</span> <span class="s2">"young-adult"</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">b</span><span class="o">.</span><span class="n">genres</span> <span class="p">)</span> </code></pre></div><p>Makes sense right? We can build up the conditions to help us filter down our results.</p> <p>Armed with the knowledge of how to query and filter using tags, we can write that logic into some handy helper functions to make querying easier.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">def</span> <span class="n">where_in_array</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="n">column</span><span class="p">,</span> <span class="n">tag_value</span><span class="p">)</span> <span class="k">do</span> <span class="n">from</span><span class="p">(</span><span class="n">q</span> <span class="ow">in</span> <span class="n">query</span><span class="p">,</span> <span class="ss">where:</span> <span class="o">^</span><span class="n">tag_value</span> <span class="ow">in</span> <span class="n">field</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="o">^</span><span class="n">column</span><span class="p">))</span> <span class="k">end</span> <span class="k">def</span> <span class="n">where_not_in_array</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="n">column</span><span class="p">,</span> <span class="n">tag_value</span><span class="p">)</span> <span class="k">do</span> <span class="n">from</span><span class="p">(</span><span class="n">q</span> <span class="ow">in</span> <span class="n">query</span><span class="p">,</span> <span class="ss">where:</span> <span class="o">^</span><span class="n">tag_value</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">field</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="o">^</span><span class="n">column</span><span class="p">))</span> <span class="k">end</span> </code></pre></div><p>Theses query helpers let us write more composable queries like this:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="n">books</span> <span class="o">=</span> <span class="n">from</span><span class="p">(</span><span class="n">b</span> <span class="ow">in</span> <span class="no">Book</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="n">where_in_array</span><span class="p">(</span><span class="ss">:genres</span><span class="p">,</span> <span class="s2">"adventure"</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="n">where_in_array</span><span class="p">(</span><span class="ss">:genres</span><span class="p">,</span> <span class="s2">"fantasy"</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="n">where_not_in_array</span><span class="p">(</span><span class="ss">:genres</span><span class="p">,</span> <span class="s2">"young-adult"</span><span class="p">)</span> </code></pre></div><p>Great! We built the tagging feature we needed for our application! Users can tag a book with one or more of the allowed genre options and we validate the data and sort it when it&#39;s written.</p> <p>We also saw how to query our list of books using the tagged genres!</p> <h2 id='discussion' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#discussion' aria-label='Anchor'></a>Discussion</h2><p>We can tag lots of things this way! Keep in mind that this approach works for systems where the possible tags are defined in code and the list does not come from the database. That happens to still apply to a lot of situations!</p> <p>Once you start tagging records and you realize how easy it is, you may be tempted to tag all the things!</p> <p><img src="/phoenix-files/2023-01-30/tag-all-the-things-meme.webp?center&amp;card&amp;2/3" alt="Tag all the things meme image" /></p> <p>But don&#39;t go too crazy with it!</p> <p>Having said that, I have added &quot;categories&quot; and &quot;tags&quot; to the same table because they had different meanings and uses in the system. Still, the approach covered here works just great for that!</p> <p>Happy tagging!</p> <p>Want more? Grab the code from <a href="https://gist.github.com/brainlid/9dcf78386e68ca03d279ae4a9c8c2373">the gist</a> and check out <a href="/phoenix-files/making-a-checkboxgroup-input/">Making a CheckboxGroup Input</a> to build a custom checkbox group input component for setting your tags with a Phoenix rendered UI!</p> <figure class="post-cta"> <figcaption> <h1> Fly.io ❤️ Elixir</h1><p> Fly.io is a great way to run your Phoenix LiveView app close to your users. It&#39;s really easy to get started. You can be running in minutes.</p><p><a class="button bg-white text-violet-600 hover:bg-opacity-75 hover:text-violet-700 transition-colors" href="https://fly.io/docs/elixir/"> Deploy a Phoenix app today!&nbsp;&nbsp;<span class='opacity:50'>&rarr;</span> </a></p> </figcaption><div class="image-container"> <img src="/static/images/cta-rabbit.webp" srcset="/static/images/cta-rabbit@2x.webp 2x" alt=""></div></figure></content>
</entry>
<entry>
<title>Copy to Clipboard with Phoenix LiveView</title>
<link rel="alternate" href="https://fly.io/phoenix-files/copy-to-clipboard-with-phoenix-liveview/"/>
<id>https://fly.io/phoenix-files/copy-to-clipboard-with-phoenix-liveview/</id>
<published>2023-01-25T00:00:00+00:00</published>
<updated>2023-04-06T14:48:02+00:00</updated>
<content type="html"><p class="lead"> In this article we show how a LiveView and a snippet of JS can make it easier for users to copy an important value to their clipboard. Fly.io is a great place to run your Phoenix LiveView applications! Check out how to <a href="/docs/elixir/">get started</a>!</p><h2 id='problem' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#problem' aria-label='Anchor'></a>Problem</h2><p>When you need to make sure a user copies an important string of text, don&#39;t let their mouse and keyboard stand in the way. Give them a button to press so they don&#39;t need to manually move a cursor around.</p> <p>But how might you do this with LiveView? It&#39;s not like our servers have access to the user&#39;s clipboard?</p> <h2 id='solution' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#solution' aria-label='Anchor'></a>Solution</h2><p>First lets make our copy button. Put this wherever you need it!</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight xml'><code><span class="nt">&lt;button</span> <span class="na">phx-click=</span><span class="s">{JS.dispatch("phx:copy",</span> <span class="err">to:</span> <span class="err">"#control-codes")}</span><span class="nt">&gt;</span> 📋 <span class="nt">&lt;/button&gt;</span> </code></pre></div><p>This uses the <a href="https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.JS.html#dispatch/2">Phoenix.LiveView.JS.dispatch/2</a> function to dispatch a JavaScript Custom Event to the element matching your selector. In this case the <code>#control-codes</code> element should contain the text we want to copy as its value.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight html'><code><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">id=</span><span class="s">"control-codes"</span> <span class="na">value=</span><span class="s">{@control-codes}</span> <span class="nt">/&gt;</span> </code></pre></div><p>Now lets wire up a little bit of javascript and append it to the bottom of our <code>assets/js/app.js</code>:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight javascript'><code><span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">phx:copy</span><span class="dl">"</span><span class="p">,</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="kd">let</span> <span class="nx">text</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span> <span class="c1">// Alternatively use an element or data tag!</span> <span class="nb">navigator</span><span class="p">.</span><span class="nx">clipboard</span><span class="p">.</span><span class="nx">writeText</span><span class="p">(</span><span class="nx">text</span><span class="p">).</span><span class="nx">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">All done!</span><span class="dl">"</span><span class="p">);</span> <span class="c1">// Or a nice tooltip or something.</span> <span class="p">})</span> <span class="p">})</span> </code></pre></div><p>And we&#39;ve done it! We have a simple generic handler for any and all copy functionality. If we add some CSS and dress it up, we could have something like this.</p> <p><video title="" src="/phoenix-files/2023-01-25/copy-to-clipboard.mp4?card&amp;center&amp;3/4&amp;border" autoplay="autoplay" loop="loop" muted="muted" playsinline="" disablePictureInPicture="" /></p> <p>It&#39;s worth pointing out that this code runs 100% on the client. The <code>JS.dispatch</code> is essentially writing the JavaScript required for us to create the event and if we take a peak in the inspector we can see it!</p> <p><img src="/phoenix-files/2023-01-25/copy-to-clipboard-screenshot.webp" alt="" /></p> <p>That&#39;s pretty neat if you ask me!</p> <h3 id='client-hooks' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#client-hooks' aria-label='Anchor'></a>Client Hooks</h3><p>This is not the only way to accomplish the JavaScript integration. We could use the <a href="https://hexdocs.pm/phoenix_live_view/js-interop.html#client-hooks-via-phx-hook">Client Hooks</a> functionality. First, we create our hook to handle the copy.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight javascript'><code><span class="kd">let</span> <span class="nx">Hooks</span> <span class="o">=</span> <span class="p">{}</span> <span class="nx">Hooks</span><span class="p">.</span><span class="nx">Copy</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">mounted</span><span class="p">()</span> <span class="p">{</span> <span class="kd">let</span> <span class="p">{</span> <span class="nx">to</span> <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">dataset</span><span class="p">;</span> <span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">click</span><span class="dl">"</span><span class="p">,</span> <span class="p">(</span><span class="nx">ev</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="nx">ev</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span> <span class="kd">let</span> <span class="nx">text</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="nx">to</span><span class="p">).</span><span class="nx">value</span> <span class="nb">navigator</span><span class="p">.</span><span class="nx">clipboard</span><span class="p">.</span><span class="nx">writeText</span><span class="p">(</span><span class="nx">text</span><span class="p">).</span><span class="nx">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">All done again!</span><span class="dl">"</span><span class="p">)</span> <span class="p">})</span> <span class="p">});</span> <span class="p">},</span> <span class="p">}</span> <span class="kd">let</span> <span class="nx">liveSocket</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LiveSocket</span><span class="p">(</span><span class="dl">"</span><span class="s2">/live</span><span class="dl">"</span><span class="p">,</span> <span class="nx">Socket</span><span class="p">,</span> <span class="p">{</span><span class="na">hooks</span><span class="p">:</span> <span class="nx">Hooks</span><span class="p">,</span> <span class="p">...})</span> </code></pre></div><p>Now our button should look like below. Note that all Hooks need unique id&#39;s to work properly.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight xml'><code><span class="nt">&lt;button</span> <span class="na">id=</span><span class="s">"copy"</span> <span class="na">data-to=</span><span class="s">"#control-codes"</span> <span class="na">phx-hook=</span><span class="s">"Copy"</span><span class="nt">&gt;</span> 📋 <span class="nt">&lt;/button&gt;</span> </code></pre></div><p>This results in the same functionality with slightly more ceremony to accomplish it. We achieved the same goal: client-side only code handles the click and copying for us!</p> <h3 id='discussion' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#discussion' aria-label='Anchor'></a>Discussion</h3><p>We could also imagine using this for all kinds of simple and commonly used JavaScript while having a shared interface to do it. Maybe you want to play a sound or focus an element, it is just JavaScript so the browser is the limit!</p> <p>That&#39;s it! We walked through two approaches to copying text to a user&#39;s clipboard and hopefully learned a little bit about how Phoenix is helping write our JavaScript for us.</p> <figure class="post-cta"> <figcaption> <h1> Fly.io ❤️ Elixir</h1><p> Fly.io is a great way to run your Phoenix LiveView app close to your users. It&#39;s really easy to get started. You can be running in minutes.</p><p><a class="button bg-white text-violet-600 hover:bg-opacity-75 hover:text-violet-700 transition-colors" href="https://fly.io/docs/elixir/"> Deploy a Phoenix app today!&nbsp;&nbsp;<span class='opacity:50'>&rarr;</span> </a></p> </figcaption><div class="image-container"> <img src="/static/images/cta-cat.webp" srcset="/static/images/cta-cat@2x.webp 2x" alt=""></div></figure></content>
</entry>
<entry>
<title>Async processing in LiveView</title>
<link rel="alternate" href="https://fly.io/phoenix-files/liveview-async-task/"/>
<id>https://fly.io/phoenix-files/liveview-async-task/</id>
<published>2023-01-12T00:00:00+00:00</published>
<updated>2023-04-06T14:48:02+00:00</updated>
<content type="html"><p class="lead"> In this post we talk about how to perform async processing from a LiveView using easy Elixir concurrency. Fly.io is a great place to run your Elixir applications! Check out how to <a href="/docs/elixir/">get started</a>!</p><p>Last month Chris McCord developed an amazing <a href="https://github.com/chrismccord/single_file_phx_bumblebee_ml/blob/main/run.exs">single-file example for doing image classification</a> using <a href="https://hexdocs.pm/bumblebee/Bumblebee.html">Bumblebee</a>, <a href="https://hexdocs.pm/nx/Nx.html">Nx</a> and <a href="https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html">LiveView</a>. We can see all the parts together in one place, and run the example just with a single command… it must be said, it&#39;s impressive!</p> <p>The example works like this: You upload an image and the process for classifying images with Bumblebee runs in an asynchronous process while a small working indicator is shown. This means the user is not blocked and can still interact with the page while the process chugs away performing the work. Once the processing is done, the indicator disappears and the results are printed on the screen:</p> <p><video title="" src="/phoenix-files/2023-01-12/image_classification.mp4?card&amp;center&amp;3/4&amp;border" autoplay="autoplay" loop="loop" muted="muted" playsinline="" disablePictureInPicture="" /></p> <p>That little trick of asynchronously working in the background while being handled all from the server was just so elegantly simple and clean that it deserves a deeper look!</p> <h2 id='problem' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#problem' aria-label='Anchor'></a>Problem</h2><p>How can we run async processing in a LiveView? How can we return results of an async process to the LiveView?</p> <h2 id='solution' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#solution' aria-label='Anchor'></a>Solution</h2><p>The main actor is the <a href="https://hexdocs.pm/elixir/1.14/Task.html">Task</a> module, we can use it to spawn processes to complete a specific task.</p> <p>Sometimes we need to perform some processing asynchronously, and we need to wait for the result. This is possible with a couple of functions: <a href="https://hexdocs.pm/elixir/1.14/Task.html#async/1">Task.async/1</a> launches a process that, when it finishes its work, sends a message with the result to the caller. And <a href="https://hexdocs.pm/elixir/1.14/Task.html#await/2">Task.await/2</a> waits for the task&#39;s message and returns the result:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="n">task</span> <span class="o">=</span> <span class="no">Task</span><span class="o">.</span><span class="n">async</span><span class="p">(</span><span class="k">fn</span> <span class="o">-&gt;</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span> <span class="k">end</span><span class="p">)</span> <span class="c1"># %Task{</span> <span class="c1"># owner: #PID&lt;0.508.0&gt;,</span> <span class="c1"># pid: #PID&lt;0.518.0&gt;,</span> <span class="c1"># ref: #Reference&lt;0.4260127598.4204593153.204028&gt;</span> <span class="c1">#}</span> <span class="n">result</span> <span class="o">=</span> <span class="no">Task</span><span class="o">.</span><span class="n">await</span><span class="p">(</span><span class="n">task</span><span class="p">)</span> <span class="c1">#iex()&gt; 3</span> </code></pre></div><p>Let&#39;s take the image classification example we mentioned at the beginning.</p> <p>Once the user uploads an image, the classification process starts. Since it is an expensive operation that can take time to complete, a task is spawned to complete that process.</p> <p>While the processing is taking place a <code>:spinner</code> function component —defined in the same file— is displayed with the help of the assign <code>:running.</code> As long as the task is not completed, the value of this assign is <code>true</code> and the spinner is shown conditionally:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">def</span> <span class="n">handle_progress</span><span class="p">(</span><span class="ss">:image</span><span class="p">,</span> <span class="n">entry</span><span class="p">,</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span> <span class="o">...</span> <span class="no">Task</span><span class="o">.</span><span class="n">async</span><span class="p">(</span><span class="k">fn</span> <span class="o">-&gt;</span> <span class="no">Nx</span><span class="o">.</span><span class="no">Serving</span><span class="o">.</span><span class="n">batched_run</span><span class="p">(</span><span class="no">PhoenixDemo</span><span class="o">.</span><span class="no">Serving</span><span class="p">,</span> <span class="n">image</span><span class="p">)</span> <span class="k">end</span><span class="p">)</span> <span class="o">...</span> <span class="p">{</span><span class="ss">:noreply</span><span class="p">,</span> <span class="n">assign</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="ss">running:</span> <span class="no">true</span><span class="p">)}</span> <span class="k">end</span> </code></pre></div><p>When the task is spawned using <code>Task.async/1</code>, a couple of things happen in the background. The new process is monitored by the caller —our LiveView—, which means that the caller will receive a <code>{:DOWN, ref, :process, object, reason}</code> message once the process it is monitoring dies. And, a link is created between both processes.</p> <p>We&#39;re going to talk more about some considerations related to this last point in a couple of minutes, but now we have one more question to answer: how can we get the response of the task in the LiveView? Well that&#39;s simple.</p> <p>We no longer need to use <code>Task.await/2</code> , our LiveView already has the ability to receive messages from other processes using the <a href="https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html#c:handle_info/2">handle_info/2</a> callback:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">def</span> <span class="n">handle_info</span><span class="p">({</span><span class="n">ref</span><span class="p">,</span> <span class="n">result</span><span class="p">},</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span> <span class="no">Process</span><span class="o">.</span><span class="n">demonitor</span><span class="p">(</span><span class="n">ref</span><span class="p">,</span> <span class="p">[</span><span class="ss">:flush</span><span class="p">])</span> <span class="p">%{</span><span class="ss">predictions:</span> <span class="p">[%{</span><span class="ss">label:</span> <span class="n">label</span><span class="p">}]}</span> <span class="o">=</span> <span class="n">result</span> <span class="p">{</span><span class="ss">:noreply</span><span class="p">,</span> <span class="n">assign</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="ss">label:</span> <span class="n">label</span><span class="p">,</span> <span class="ss">running:</span> <span class="no">false</span><span class="p">)}</span> <span class="k">end</span> </code></pre></div><p>The received message contains a <code>{ref, result}</code> tuple, where ref is the monitor&#39;s reference. We use this reference to stop monitoring the task —and not receive a message if it dies—, since we received the result we needed from our task and we can discard an exit message.</p> <p>Finally we set the result in the assign <code>:label</code> to display it, and we hide our spinner by changing the content of the assign <code>:running</code>.</p> <p>An elegant solution, right? Just a couple lines of simple Elixir concurrency to delegate the work and limit the responsibilities of our LiveView.</p> <p>We don&#39;t even have to worry if the user closes the browser tab! The process dies just like the LiveView, and the work is automatically cancelled. No resources are spent on a process from which nobody expects the result anymore.</p> <p>José shows us this pattern in his recent video!</p> <div class="youtube-container"> <div class="youtube-video"> <iframe width="100%" height="100%" src="https://www.youtube.com/embed/g3oyh3g1AtQ" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen> </iframe></div></div><h2 id='additional-considerations' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#additional-considerations' aria-label='Anchor'></a>Additional Considerations</h2><p>1) When a task is spawned using <code>Task.async/2</code>, it is linked to the caller. Which means that both processes have a relationship: if one crashes, the other does too.</p> <p>We must take it into account. If we don&#39;t have control over the result of the task, and we don&#39;t want our LiveView to crash if the task crashes, we must use a different alternative to launch our task. We can use <a href="https://hexdocs.pm/elixir/1.14/Task.Supervisor.html#async_nolink/3">Task.Supervisor.async_nolink/3</a> to make sure that our LiveView won&#39;t die even if the task crashes and that the error will be reported.</p> <p>2) We need to think about what kind of work we want to do asynchronously.</p> <p>In a scenario where we&#39;re doing something that takes time and we don&#39;t save the result, we don&#39;t want the job to keep going if the user leaves. So this solution is a good fit.</p> <p>But, if we are building some report that must be generated even if the user closes the browser tab, then, this may not be the right solution.</p> <figure class="post-cta"> <figcaption> <h1> Fly.io ❤️ Elixir</h1><p> Fly.io is a great way to run your Phoenix LiveView app close to your users. It&#39;s really easy to get started. You can be running in minutes.</p><p><a class="button bg-white text-violet-600 hover:bg-opacity-75 hover:text-violet-700 transition-colors" href="https://fly.io/docs/elixir/"> Deploy a Phoenix app today!&nbsp;&nbsp;<span class='opacity:50'>&rarr;</span> </a></p> </figcaption><div class="image-container"> <img src="/static/images/cta-cat.webp" srcset="/static/images/cta-cat@2x.webp 2x" alt=""></div></figure><p>Tell us, what other options have you used to do async work in LiveView?</p> </content>
</entry>
<entry>
<title>Flying with a Fledgling Phoenix</title>
<link rel="alternate" href="https://fly.io/phoenix-files/flying-with-a-fledgling-phoenix/"/>
<id>https://fly.io/phoenix-files/flying-with-a-fledgling-phoenix/</id>
<published>2022-12-14T00:00:00+00:00</published>
<updated>2023-04-06T14:48:02+00:00</updated>
<content type="html"><p class="lead"> This is about trying out new Phoenix release candidates. Fly.io is a great place to run your Phoenix applications! Check out how to <a href="/docs/elixir/">get started</a>!</p><p><a href="https://www.phoenixframework.org/">Phoenix</a> is a living, breathing and active project. Prior to the release of a new major version, there is often a &quot;release candidate&quot; for people to test out and report issues. Getting and trying those pre-release versions isn&#39;t straight forward. We&#39;ll see at how to get an RC, try it out on a new project, and even how to compare differences with generated files created by different versions of Phoenix to better understand how to upgrade an existing project.</p> <h2 id='problem' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#problem' aria-label='Anchor'></a>Problem</h2><p>A new Phoenix release candidate has just landed and it includes some new features we want to try out. However, upgrading our existing project to the new release would be messy and time-consuming. We would encounter warnings, errors, and conflicts with other dependencies, and it would be difficult to see how the generators have changed.</p> <p>To play with our new fledgling Phoenix release candidate without getting burned, it is best to create a new project. The <a href="https://hexdocs.pm/phoenix/installation.html">Phoenix installation guides</a> instructs us to run <code>mix archive.install hex phx_new</code> to install Phoenix, but this will not get the release candidate.</p> <p>How do we install and manage a Phoenix release candidate? And once we have it, how can we compare the differences between a newly generated Phoenix project from a previous version?</p> <h2 id='solution' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#solution' aria-label='Anchor'></a>Solution</h2><p>Before we start messing with our Phoenix Installer version, let&#39;s take note of our current version by running the following command:</p> <div class='highlight relative group cmd'><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight bash'><code>mix phx.new <span class="nt">--version</span> </code></pre></div><div class='highlight relative group output'><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight '><code>Phoenix installer v1.6.15 </code></pre></div><p>This is useful to know if we want to revert back to our original version later.</p> <p>To try out a pre-release version like 1.7.0-rc.0, we use the command recommended in the <a href="https://www.phoenixframework.org/blog/phoenix-1.7-released">Phoenix release candidate blog post</a>:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight '><code>mix archive.install hex phx_new 1.7.0-rc.0 </code></pre></div><p>We will be prompted to replace our existing Phoenix Installer. There can only be one installed at a time. Say &quot;yes&quot; to install and replace any existing version.</p> <p>To confirm that we are now using the new Phoenix version, run the following command:</p> <div class='highlight relative group cmd'><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight bash'><code>mix phx.new <span class="nt">--version</span> </code></pre></div><div class='highlight relative group output'><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight '><code>Phoenix installer v1.7.0-rc.0 </code></pre></div><p>We&#39;re ready to create a new app!</p> <h3 id='generate-a-new-app' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#generate-a-new-app' aria-label='Anchor'></a>Generate a New App</h3><p>Before we create a new app, let&#39;s review the available flags to make sure we include the features we want. To see the available flags, run:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight '><code>mix help phx.new </code></pre></div><p>Now we can create a new Phoenix app to play with. For this example, let&#39;s use the name <code>my_app</code>. We will come back to the benefits of this name choice later.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight '><code>mix phx.new my_app </code></pre></div><p>For this example, we want to check out how the <code>phx.gen.auth</code> changed in the new release, specifically that it now supports LiveView. For a deeper look at this new feature, check out Berenice Medel&#39;s post <a href="/phoenix-files/phx-gen-auth/">Bringing Phoenix Authentication to Life</a>.</p> <p>Before we generate anything, let&#39;s review the available flags by running:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight '><code>mix help phx.gen.auth </code></pre></div><p>With this knowledge, we can now generate something:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight '><code>mix phx.gen.auth Accounts User users </code></pre></div><p>Great! We now have a working and interactive example of the new feature we are interested in. Personally, I&#39;m enjoying playing with the new authentication features and seeing how they render and feel! 😍</p> <h3 id='compare-against-previous-releases' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#compare-against-previous-releases' aria-label='Anchor'></a>Compare Against Previous Releases</h3><p>It is helpful seeing a newly generated Phoenix app and the generated templates we care about! But how can we compare these changes to a project that&#39;s been over a year in development with a whole team hacking on it? We <em>could</em> try directly comparing our existing app with the newly generated one, but that will be so noisy it&#39;s not worth doing. I promise. Ouch.</p> <p>Instead, we&#39;ll generate another Phoenix app using the version that our project was based on. This makes it easier to see the relevant pieces that changed. Then we can adapt those changes to our project!</p> <p>Before we start, let&#39;s rename the generated project folder to help keep track of it. Previously, we named it <code>my_app</code> and a folder with the same name was created. Let&#39;s rename the folder to <code>phx_1_7_rc_0</code>.</p> <p>Now, we&#39;re ready to generate an older Phoenix project. To prevent nearly every single file from being different, we&#39;ll use the same name, <code>my_app</code>.</p> <p>Let&#39;s install the desired version of the Phoenix Installer. In this case, we&#39;ll go with 1.6.15.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight '><code>mix archive.install hex phx_new 1.6.15 </code></pre></div><p>Now generate an older project with the same name, <code>my_app</code> and include any relevant flags.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight '><code>mix phx.new my_app </code></pre></div><p>After generating the app, let&#39;s rename the folder from <code>my_app</code> to <code>phx_1_6_15</code> to make it easier to tell what we&#39;re looking at.</p> <p>We now have two different generated Phoenix applications named <code>my_app</code> in two different versions of Phoenix! Let the comparisons begin!</p> <h3 id='comparing-versions-locally' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#comparing-versions-locally' aria-label='Anchor'></a>Comparing Versions Locally</h3><p>Navigating and comparing two full projects may feel daunting. Never fear! Using a free, cross-platform tool like <a href="https://meldmerge.org/">Meld</a>, we can easily compare two complete directories to see what changed from one version to the next.</p> <p>For this example, we are comparing the generated authentication templates, so we need to run the same generator on our older project. We need to <code>mix get.deps</code> and <code>mix compile</code> before the generator task is available. Then we can run it like this:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight '><code>mix phx.gen.auth Accounts User users </code></pre></div><p>Now we can compare the two projects using a directory comparison tool like Meld.</p> <p><img src="/phoenix-files/2022-12-14/meld-directory-comparison.webp?card&amp;2/3&amp;centered" alt="Meld application screenshot showing the compare directory button" /></p> <p>Select the directories with our projects.</p> <p><img src="/phoenix-files/2022-12-14/meld-directories-selected.webp?card&amp;2/3&amp;centered" alt="Meld application screenshot showing selected directories for comparison" /></p> <p>Directories with nested contents are compared.</p> <p><img src="/phoenix-files/2022-12-14/meld-directories-compared.webp?card&amp;2/3&amp;centered" alt="Meld application screenshot showing directories being compared" /></p> <p>When a specific files was modified, we can open that file for a single-file comparison.</p> <p>Now we can discover what changed and adapt those to our other projects.</p> <h3 id='comparing-versions-online' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#comparing-versions-online' aria-label='Anchor'></a>Comparing Versions Online</h3><p>For the impatient among us who want to quickly see the differences from one version to the next with different flags used when the projects were generated, there is a great community resource over on <a href="https://elixirstream.dev/">ElixirStream.dev</a> created and maintained by <a href="https://twitter.com/bernheisel">David Bernheisel</a>. The tool we&#39;re talking about is the <a href="https://elixirstream.dev/gendiff">Generator Diff</a>.</p> <p>Generator Diff caches computed comparisons, so here&#39;s a link to the <a href="https://elixirstream.dev/gendiff/phx_new/CB447D8FF307672A6824C11F577B1746">phx.gen.auth generator differences between Phoenix 1.6.15 and Phoenix 1.7.0-rc.0</a>. It also supports comparing the different flag options, so it&#39;s very helpful!</p> <p><img src="/phoenix-files/2022-12-14/elixirstream-gendiff.webp?card&amp;2/3&amp;centered" alt="ElixirStream.dev Generator Diff tool" /></p> <p>If you just want to see the diff for two project versions, this is a great resource!</p> <h2 id='summary' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#summary' aria-label='Anchor'></a>Summary</h2><p>As Phoenix continues to advance and improve, we may want to quickly try out the new features and, when we&#39;re ready, apply those changes to our projects to keep them up-to-date with current conventions.</p> <p>We started off by generating a fresh Phoenix app with the new features we want to explore and safely play with that enticing fledgling Phoenix release without getting ourselves burned in the process!</p> <p>We then saw how we can generate multiple versions of a Phoenix app locally. The benefits of this is we use the development tools we already know to inspect the projects. We can run and interact with these local projects too. This is a great way to try out and see how a new approach <em>feels</em> rather than inferring based on the code.</p> <p>We introduced the free, cross-platform tool <a href="https://meldmerge.org/">Meld</a> that helps us visually compare complete directories.</p> <p>We also covered how we can use online community resources like <a href="https://elixirstream.dev/gendiff">ElixirStream&#39;s Generator Diff</a> tool to quickly compare file diffs for changes from one version to another.</p> <p>With options like these available, we have the tools needed to keep our projects feeling fresh both inside and out!</p> <p>Now, I&#39;m off to play with the new LiveView authentication before applying the changes to my project. 🤩 What are you most excited to play with?</p> <figure class="post-cta"> <figcaption> <h1> Fly.io ❤️ Elixir</h1><p> Fly.io is a great way to run your Phoenix LiveView app close to your users. It&#39;s really easy to get started. You can be running in minutes.</p><p><a class="button bg-white text-violet-600 hover:bg-opacity-75 hover:text-violet-700 transition-colors" href="https://fly.io/docs/elixir/"> Deploy a Phoenix app today!&nbsp;&nbsp;<span class='opacity:50'>&rarr;</span> </a></p> </figcaption><div class="image-container"> <img src="/static/images/cta-turtle.webp" srcset="/static/images/cta-turtle@2x.webp 2x" alt=""></div></figure></content>
</entry>
<entry>
<title>Bringing Phoenix Authentication to Life</title>
<link rel="alternate" href="https://fly.io/phoenix-files/phx-gen-auth/"/>
<id>https://fly.io/phoenix-files/phx-gen-auth/</id>
<published>2022-12-13T00:00:00+00:00</published>
<updated>2023-04-06T14:48:02+00:00</updated>
<content type="html"><p class="lead"> With this post we reach the end a story we’ve <a href="../phx-trigger-action/">been</a> <a href="../live-session/">telling</a> <a href="../forms-testing/">you</a> over the past few months. It’s the tale of how we developed a LiveView auth system that you can generate with a few keystrokes. Fly.io is a great place to run your Elixir applications! Check out how to <a href="/docs/elixir/">get started</a>!</p><p>Many of us used the <code>phx.gen.auth</code> generator to quickly build out authentication systems in our Phoenix apps. It spits out well-designed auth logic so we can get on quickly to the more interesting parts of our app.</p> <p>But LiveView has increased in popularity, and in a LiveView app the generator’s “dead view” templates and views leave something to be desired. Wouldn’t it be great if those could be LiveView as well?</p> <p>The Phoenix team has developed a solution for that! We’ve been eagerly looking forward to the release of Phoenix 1.7 so we could announce some new and exciting functionality.</p> <p>We’ve created an auth system that uses only LiveView, and <code>phx.gen.auth</code> is ready to generate it for you. The command now takes a couple of options to let you choose whether to generate your auth system using Phoenix views &mdash;as before&mdash; or using LiveView:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="n">mix</span> <span class="n">phx</span><span class="o">.</span><span class="n">gen</span><span class="o">.</span><span class="n">auth</span> <span class="no">Accounts</span> <span class="no">User</span> <span class="n">users</span> <span class="o">--</span><span class="n">live</span> <span class="n">mix</span> <span class="n">phx</span><span class="o">.</span><span class="n">gen</span><span class="o">.</span><span class="n">auth</span> <span class="no">Accounts</span> <span class="no">User</span> <span class="n">users</span> <span class="o">--</span><span class="n">no</span><span class="o">-</span><span class="n">live</span> </code></pre></div><p>A whole authentication system for LiveView, with a single command? Magic! But behind the magic, we can find some interesting implementation details in the generated code.</p> <p>The team took existing logic and adapted it to work with LiveView. Initially, each of the pages &mdash;Log in, Registration, Forgot Password, etc&mdash; was separated into different LiveViews. The functionality of the controllers was migrated to each of the respective LiveViews and the existing HTML was rendered using the <a href="https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html#c:render/1">render/1</a> callback. However, the process was not linear, there were a few issues to resolve before everything was working smoothly.</p> <h2 id='setting-a-cookie-from-a-liveview-form' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#setting-a-cookie-from-a-liveview-form' aria-label='Anchor'></a>Setting a Cookie From a LiveView Form</h2><p>The main issue was to write the logged-in user data in session when submitting a form within a LiveView.</p> <p>When we store data in cookies &mdash;such as the current user&#39;s identifier&mdash;, the following process is carried out through HTTP requests:</p> <p><a href="/phoenix-files/2022-12-13/cookies.webp"><img src="/phoenix-files/2022-12-13/cookies.webp?centered&amp;card&amp;3/4&amp;border" alt="" /></a></p> <p>The browser identifies the <code>set-cookie</code> header and stores the cookie returned in the HTTP request response. We can’t do this directly from a LiveView, because LiveView-server communication goes through a websocket connection &mdash;no HTTP requests&mdash;. So how can we store session data?</p> <p>The solution we settled on: go ahead and make an HTTP route call to a controller when the user submits their log-in or sign-up form &mdash;but validate the form data within the LiveView first, to make sure we don’t pop out of our LiveView unnecessarily.</p> <p>You can find more details on how we did this, with the <code>:action</code> attribute of Phoenix forms together with the <code>:phx-trigger-action</code> LiveView form attribute, in &quot;<a href="../phx-trigger-action/">Triggering a Phoenix controller action from a form in a LiveView</a>&quot;.</p> <aside class="right-sidenote"> You can find some examples in login_live.ex and _registration_live.ex files.</aside><p><a href="../phx-trigger-action/"><img src="/phoenix-files/2022-08-16/phx-trigger-action-cover.webp?centered&amp;card" alt="" /></a></p> <h2 id='faster-navigation' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#faster-navigation' aria-label='Anchor'></a>Faster Navigation</h2><p>We also took care to make navigation between related LiveViews (like the sign_in and forgot_password views) even more efficient and introduced the concept of LiveSessions. By grouping live routes into a LiveSession, we can navigate between them using the existing websocket connection, thus avoiding making extra HTTP requests. Let&#39;s see it in action!</p> <p><video title="User is navigating between pages and logs are printed in the iex console at the same time, showing that there are no extra HTTP requests" src="/phoenix-files/2022-12-13/live_navigation.mp4?card&amp;center&amp;3/4&amp;border" autoplay="autoplay" loop="loop" muted="muted" playsinline="" disablePictureInPicture="" /></p> <p>That&#39;s really cool but it was only half the job. We also used <a href="https://hexdocs.pm/phoenix_live_view/0.10.0/Phoenix.LiveView.Helpers.html#live_redirect/2">live_redirect/2</a> from the <code>Phoenix.LiveView.Helpers</code> module to redirect between LiveViews in the same session &mdash;you won&#39;t find <code>live_redirect</code> in your generated code, though; more on that in a minute&mdash;.</p> <p>This is not all that LiveSessions can do, you can check how we used them together with Hooks to define different authorization strategies, and much more in &quot;<a href="../live-session/">LiveSessions in action</a>&quot;.</p> <aside class="right-sidenote"> Take a look at the code in router.ex</aside><p><a href="../live-session/"><img src="/phoenix-files/2022-09-05/live-session-cover.webp?centered&amp;card" alt="" /></a></p> <h2 id='testing-the-auth-system' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#testing-the-auth-system' aria-label='Anchor'></a>Testing the Auth System</h2><p>Once we had a working version, we also wanted to test that everything worked as expected. We used some functions of the <code>LiveViewTest</code> module to test, for example, that the LiveViews displayed the expected live errors and gave the user the necessary information, or test that the navigation between LiveViews was successful.</p> <p>You can check more examples in &quot;<a href="../forms-testing/">Testing LiveView forms</a>&quot;.</p> <aside class="right-sidenote"> You can find several examples in the test/your_app_web/live/ directory.</aside><p><a href="../forms-testing/"><img src="/phoenix-files/2022-09-30/forms-testing-cover.webp?centered&amp;card" alt="" /></a></p> <h2 id='the-new-liveview-and-phoenix-features' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#the-new-liveview-and-phoenix-features' aria-label='Anchor'></a>The New LiveView and Phoenix Features</h2><p>But this is not all you will find when using the <code>phx.gen.auth</code> generator, you will also find examples of new features introduced in LiveView 0.18!</p> <p>All LiveViews in the auth system use the UI components from the <code>CoreComponents</code> module (generated by creating a new project with <code>mix phx.new</code>). These components were designed by the Tailwind team exclusively for Phoenix and are defined using the new <a href="https://hexdocs.pm/phoenix_live_view/Phoenix.Component.html#module-attributes"><code>:attr</code></a> and <a href="https://hexdocs.pm/phoenix_live_view/Phoenix.Component.html#module-slots"><code>:slots</code></a> macros, taking a look at them is an excellent way to understand these new function component options.</p> <p>Remember the <code>live_redirect</code> function we used for faster navigation? Well, we won&#39;t actually find it in our auth system, since it was deprecated. Instead, we&#39;ll find the new <a href="https://hexdocs.pm/phoenix_live_view/Phoenix.Component.html#link/1">link/1</a> component of the <code>Phoenix.Component</code> module, where the <code>:navigate</code> option was used as a substitute.</p> <p>You will also find examples of another of the Phoenix 1.7 features that the community is most excited about: <a href="https://www.phoenixframework.org/blog/phoenix-1.7-released#:~:text=1.7.0%2Drc.0-,Verified%20Routes,-Verified%20routes%20replace">verified routes</a>!</p> <figure class="post-cta"> <figcaption> <h1> Fly.io ❤️ Elixir</h1><p> Fly.io is a great way to run your Phoenix LiveView app close to your users. It&#39;s really easy to get started. You can be running in minutes.</p><p><a class="button bg-white text-violet-600 hover:bg-opacity-75 hover:text-violet-700 transition-colors" href="https://fly.io/docs/elixir/"> Deploy a Phoenix app today!&nbsp;&nbsp;<span class='opacity:50'>&rarr;</span> </a></p> </figcaption><div class="image-container"> <img src="/static/images/cta-turtle.webp" srcset="/static/images/cta-turtle@2x.webp 2x" alt=""></div></figure><p>Tell us, have you already used the new generator? What was your favorite functionality?</p> </content>
</entry>
<entry>
<title>Persistent forms with your URL on LiveView</title>
<link rel="alternate" href="https://fly.io/phoenix-files/persistent-forms-with-your-url-on-liveview/"/>
<id>https://fly.io/phoenix-files/persistent-forms-with-your-url-on-liveview/</id>
<published>2022-12-12T00:00:00+00:00</published>
<updated>2023-04-06T14:48:02+00:00</updated>
<content type="html"><p class="lead"> In this article we talk about syncing LiveView state with URL. Fly.io is a great place to run your Phoenix LiveView applications! Check out how to <a href="/docs/elixir/">get started</a>!</p><h2 id='problem' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#problem' aria-label='Anchor'></a>Problem</h2><p>Say you have a simple posts search form LiveView like this one:</p> <p><img src="/phoenix-files/2022-12-12/initial-state.webp" alt="A form where you can search by post name and/or author" /></p> <p>Whenever users change the title or author on the search form you perform the search just fine but whenever you hit the refresh button your filters are emptied, poof. We did not persist those in any way, that&#39;s why.</p> <p><img src="/phoenix-files/2022-12-12/bad-case.gif" alt="When you refresh the page all your form input values are gone" /></p> <p>How can we persist our filters so that a page refresh would not make us have to do it all over again?</p> <h2 id='solution' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#solution' aria-label='Anchor'></a>Solution</h2><p>We will use a simple trick to sync your URL query string with you LiveView filters using nothing but <a href="https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html#push_patch/2"><code>push_patch/2</code></a> and <code>handle_params/3</code>.</p> <figure class="post-cta"> <figcaption> <h1> Run your forms on Fly.io</h1><p> You can host your LiveView form apps here on Fly.io and get free SSL so users can see the lock icon on their browsers when they also see their URL change too.</p><p><a class="button bg-white text-violet-600 hover:bg-opacity-75 hover:text-violet-700 transition-colors" href="https://fly.io/docs/speedrun/"> Try Fly for free&nbsp;&nbsp;<span class='opacity-50'>&rarr;</span> </a></p> </figcaption><div class="image-container"> <img src="/static/images/cta-turtle.webp" srcset="/static/images/cta-turtle@2x.webp 2x" alt=""></div></figure><h2 id='the-initial-state' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#the-initial-state' aria-label='Anchor'></a>The Initial State</h2><p>It&#39;s very likely you used Phoenix&#39;s generators so your code must look almost like this on your <code>index.ex</code>:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">defmodule</span> <span class="no">FormUrlRecipeWeb</span><span class="o">.</span><span class="no">PostLive</span><span class="o">.</span><span class="no">Index</span> <span class="k">do</span> <span class="kn">use</span> <span class="no">FormUrlRecipeWeb</span><span class="p">,</span> <span class="ss">:live_view</span> <span class="n">alias</span> <span class="no">FormUrlRecipe</span><span class="o">.</span><span class="no">Blog</span> <span class="n">alias</span> <span class="no">FormUrlRecipe</span><span class="o">.</span><span class="no">Blog</span><span class="o">.</span><span class="no">Post</span> <span class="nv">@impl</span> <span class="no">true</span> <span class="k">def</span> <span class="n">mount</span><span class="p">(</span><span class="n">_params</span><span class="p">,</span> <span class="n">_session</span><span class="p">,</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">assign</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="ss">posts:</span> <span class="p">[],</span> <span class="ss">authors:</span> <span class="p">[])}</span> <span class="k">end</span> <span class="nv">@impl</span> <span class="no">true</span> <span class="k">def</span> <span class="n">handle_params</span><span class="p">(</span><span class="n">params</span><span class="p">,</span> <span class="n">_url</span><span class="p">,</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span> <span class="p">{</span><span class="ss">:noreply</span><span class="p">,</span> <span class="n">apply_action</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">assigns</span><span class="o">.</span><span class="n">live_action</span><span class="p">,</span> <span class="n">params</span><span class="p">)}</span> <span class="k">end</span> <span class="c1"># Other actions omitted here, lets focus on the list</span> <span class="k">defp</span> <span class="n">apply_action</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="ss">:index</span><span class="p">,</span> <span class="n">_params</span><span class="p">)</span> <span class="k">do</span> <span class="n">changeset</span> <span class="o">=</span> <span class="no">Blog</span><span class="o">.</span><span class="n">change_post</span><span class="p">(%</span><span class="no">Post</span><span class="p">{})</span> <span class="n">socket</span> <span class="o">|&gt;</span> <span class="n">assign</span><span class="p">(</span><span class="ss">:page_title</span><span class="p">,</span> <span class="s2">"Listing Posts"</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="n">assign</span><span class="p">(</span><span class="ss">:post</span><span class="p">,</span> <span class="no">nil</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="n">assign</span><span class="p">(</span><span class="ss">:posts</span><span class="p">,</span> <span class="no">Blog</span><span class="o">.</span><span class="n">search_posts</span><span class="p">(%{}))</span> <span class="o">|&gt;</span> <span class="n">assign</span><span class="p">(</span><span class="ss">:authors</span><span class="p">,</span> <span class="no">Blog</span><span class="o">.</span><span class="n">list_authors</span><span class="p">())</span> <span class="o">|&gt;</span> <span class="n">assign</span><span class="p">(</span><span class="ss">:changeset</span><span class="p">,</span> <span class="n">changeset</span><span class="p">)</span> <span class="k">end</span> <span class="nv">@impl</span> <span class="no">true</span> <span class="k">def</span> <span class="n">handle_event</span><span class="p">(</span><span class="s2">"search_posts"</span><span class="p">,</span> <span class="p">%{</span><span class="s2">"post"</span> <span class="o">=&gt;</span> <span class="n">attrs</span><span class="p">},</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span> <span class="n">changeset</span> <span class="o">=</span> <span class="no">Blog</span><span class="o">.</span><span class="n">change_post</span><span class="p">(%</span><span class="no">Post</span><span class="p">{},</span> <span class="n">attrs</span><span class="p">)</span> <span class="p">{</span><span class="ss">:noreply</span><span class="p">,</span> <span class="n">socket</span> <span class="o">|&gt;</span> <span class="n">assign</span><span class="p">(</span><span class="ss">:changeset</span><span class="p">,</span> <span class="n">changeset</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="n">assign</span><span class="p">(</span><span class="ss">:posts</span><span class="p">,</span> <span class="no">Blog</span><span class="o">.</span><span class="n">search_posts</span><span class="p">(</span><span class="n">attrs</span><span class="p">))</span> <span class="p">}</span> <span class="k">end</span> <span class="c1"># ...</span> <span class="k">end</span> </code></pre></div><p>As you can see there&#39;s two places who search for posts using <code>Blog.search_posts</code>. The first is inside <code>apply_action/3</code> which runs from <code>handle_params/3</code>, those happen when you open the page, and the other one is inside the <code>handle_event(&quot;search_posts&quot;, ...)</code> which is triggered from our form component.</p> <p>We can simplify this code and centralize where posts are loaded from on <code>apply_action/3</code> by simply making our <code>handle_event/3</code> just send you back to the same LiveView through <code>push_patch/3</code> like this:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="nv">@impl</span> <span class="no">true</span> <span class="k">def</span> <span class="n">handle_event</span><span class="p">(</span><span class="s2">"search_posts"</span><span class="p">,</span> <span class="p">%{</span><span class="s2">"post"</span> <span class="o">=&gt;</span> <span class="n">attrs</span><span class="p">},</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span> <span class="p">{</span><span class="ss">:noreply</span><span class="p">,</span> <span class="n">socket</span> <span class="o">|&gt;</span> <span class="n">push_patch</span><span class="p">(</span><span class="ss">to:</span> <span class="no">Routes</span><span class="o">.</span><span class="n">post_index_path</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="ss">:index</span><span class="p">,</span> <span class="n">attrs</span><span class="p">))</span> <span class="p">}</span> <span class="k">end</span> </code></pre></div><p>Assume we change the author to Michael, you will be sent to <code>/posts?author=Michael&amp;title=</code>. Now we just need to start parsing the URL into a attributes we can fill our changeset and our search function:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">defp</span> <span class="n">apply_action</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="ss">:index</span><span class="p">,</span> <span class="n">params</span><span class="p">)</span> <span class="k">do</span> <span class="c1"># Changed these two lines below</span> <span class="n">attrs</span> <span class="o">=</span> <span class="no">Map</span><span class="o">.</span><span class="n">take</span><span class="p">(</span><span class="n">params</span><span class="p">,</span> <span class="p">[</span><span class="s2">"title"</span><span class="p">,</span> <span class="s2">"author"</span><span class="p">])</span> <span class="n">changeset</span> <span class="o">=</span> <span class="no">Blog</span><span class="o">.</span><span class="n">change_post</span><span class="p">(%</span><span class="no">Post</span><span class="p">{},</span> <span class="n">attrs</span><span class="p">)</span> <span class="n">socket</span> <span class="o">|&gt;</span> <span class="n">assign</span><span class="p">(</span><span class="ss">:page_title</span><span class="p">,</span> <span class="s2">"Listing Posts"</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="n">assign</span><span class="p">(</span><span class="ss">:post</span><span class="p">,</span> <span class="no">nil</span><span class="p">)</span> <span class="c1"># Changed this line below</span> <span class="o">|&gt;</span> <span class="n">assign</span><span class="p">(</span><span class="ss">:posts</span><span class="p">,</span> <span class="no">Blog</span><span class="o">.</span><span class="n">search_posts</span><span class="p">(</span><span class="n">attrs</span><span class="p">))</span> <span class="o">|&gt;</span> <span class="n">assign</span><span class="p">(</span><span class="ss">:authors</span><span class="p">,</span> <span class="no">Blog</span><span class="o">.</span><span class="n">list_authors</span><span class="p">())</span> <span class="o">|&gt;</span> <span class="n">assign</span><span class="p">(</span><span class="ss">:changeset</span><span class="p">,</span> <span class="n">changeset</span><span class="p">)</span> <span class="k">end</span> </code></pre></div><p>And that&#39;s it! We now sync URL with our forms plus we refactored our LiveView to deduplicate the search being run. Don&#39;t believe me? Here&#39;s the <a href="https://github.com/fly-apps/phoenix-recipe-sync-url-with-form/commit/70c163413017f89023977f4abe8935146a3bca9e">commit URL</a>.</p> <h2 id='notes' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#notes' aria-label='Anchor'></a>Notes</h2><p>It&#39;s worth mentioning Phoenix will understand any empty field as empty string so your params might look like <code>%{&quot;title&quot; =&gt; &quot;&quot;, &quot;author&quot; =&gt; &quot;Lubien&quot;}</code>. For my search functionality to work the way I wanted <a href="https://github.com/fly-apps/phoenix-recipe-sync-url-with-form/blob/70c163413017f89023977f4abe8935146a3bca9e/lib/form_url_recipe/blog.ex#L43-L50">I&#39;ve filtered any <code>nil</code> or <code>&quot;&quot;</code> inside the Blog.search_posts function</a>.</p> </content>
</entry>
<entry>
<title>Elixir, OpenTelemetry, and the Infamous N+1</title>
<link rel="alternate" href="https://fly.io/phoenix-files/opentelemetry-and-the-infamous-n-plus-1/"/>
<id>https://fly.io/phoenix-files/opentelemetry-and-the-infamous-n-plus-1/</id>
<published>2022-11-14T00:00:00+00:00</published>
<updated>2023-04-06T14:48:02+00:00</updated>
<content type="html"><p class="lead"> This article explores observability in Elixir systems, specifically using OpenTelemetry. Fly.io is a great place to run your Elixir applications! Check out how to <a href="/docs/elixir/">get started</a>!</p><p>In this article, we&#39;ll dive into the topic of observability and specifically the <a href="https://opentelemetry.io/">OpenTelemetry project</a>. We&#39;ll see how to set up the Elixir and <a href="https://github.com/open-telemetry/opentelemetry-erlang">Erlang OpenTelemetry</a> libraries in a Phoenix LiveView application so you can debug troublesome database queries. We&#39;ll also see how this application can be deployed to Fly.io along with <a href="https://grafana.com/">Grafana</a> and <a href="https://grafana.com/oss/tempo/">Tempo</a> so we can store and query our sample traces. There is also a <a href="https://github.com/fly-apps/elixir_opentel_and_grafana">demo repo</a> with all the referenced code. Be sure to check that out!</p> <p>Before we dive into the nitty-gritty, let&#39;s first get a sense for the application observability landscape.</p> <p>As software engineers, it is crucial that we have insight into our running applications. This is especially true when we have customers paying-for and depending-on our products. As a customer and user, there are few things more frustrating that trying to get your work done and some SaaS product that you pay for is currently unavailable or running extremely slow. As a business, we may be able to get away with some down-time and slow services here and there, but if it becomes the norm, the customer-experience deteriorates to the point where customers start looking elsewhere.</p> <p>But don&#39;t worry - it&#39;s not all doom and gloom! As software engineers, there are plenty of tools at our disposal that enable us to provide the best customer experience possible. For example, as we develop a piece of software, we can write unit, integration, end-to-end and stress tests to ensure that features are implemented properly and that they continue to work tomorrow even though the codebase is constantly changing. These tools work great for local development and CI/CD... but what do you do when the application is running in production and we encounter issues? To answer that question, we&#39;ll need to reach for tools that fall under the observability umbrella.</p> <h2 id='the-three-pillars-of-observability' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#the-three-pillars-of-observability' aria-label='Anchor'></a>The Three Pillars of Observability</h2><p>In the context of software, observability is the ability to inspect and understand a running application. In order to introspect an application we need to extract some data from while it is running without hindering its ability to service user requests. Observability tooling that interferes with an application&#39;s natural ability to service requests is not viable in production as it impacts our customers in undefined ways. So how do we extract data from a running application in such a way?</p> <p>The three most common ways to achieve this are logging, metrics and traces. Combined, they create the three pillars of observability and allow us to effectively analyze and debug our production applications and systems. Let&#39;s briefly look at what each of these pillars does for us to get a sense for how they work together to give us application observability:</p> <ul> <li><p><strong class='font-semibold text-navy'>Logs:</strong> Logs contain detailed information as to what events are taking place within an application. Logs can be either structured (JSON for example) or unstructured (free text).</p> </li><li><p><strong class='font-semibold text-navy'>Metrics:</strong> Metrics are measurements of your application over time and can contain a few bits of metadata to enrich the measurements and give them more context.</p> </li><li><p><strong class='font-semibold text-navy'>Traces:</strong> Traces are a collection of related events with each event containing metadata as to what happened and for how long. Traces can span across call stacks on a single machine and even across services via distributed tracing.</p> </li></ul> <p>In this article, we&#39;ll focus on the tracing observability pillar. Specifically, we&#39;ll see how we can leverage the OpenTelemetry tracing tooling to identify performance issues in an Elixir Phoenix LiveView application.</p> <p>Let&#39;s dive into OpenTelemetry. We&#39;ll start with what it is and how we can use it in our LiveView application.</p> <h2 id='configuring-opentelemetry-in-elixir' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#configuring-opentelemetry-in-elixir' aria-label='Anchor'></a>Configuring OpenTelemetry in Elixir</h2><p>OpenTelemetry (often abbreviated to OTel), is a collection of open source standards for how logs, metrics, and traces should be collected and exported from services. By design, it is a programming language agnostic standard and there are implementations of the <a href="https://opentelemetry.io/docs/getting-started/dev/">OTel standard in a lot of programming languages</a> already including Erlang and Elixir!</p> <p>At a high level, the <a href="https://opentelemetry.io/docs/concepts/components/">OTel standard specifies a few different components</a> that need to be available in order to ship logs, metrics and traces from your applications. The API and SDK components are what we lean on when we instrument our application with the tracing library for Ecto for example. The collector component, is what that Ecto tracing library ships telemetry data to, which, in turn, exports that telemetry data to Jaeger, Tempo, or whatever we choose to use to persist sample traces.</p> <p>Luckily, instrumenting your Elixir applications isn&#39;t too hard thanks to all of the hard work done by the contributors to the <a href="https://hex.pm/orgs/opentelemetry">Hex OpenTelemetry organization</a>. For this article, we&#39;ll look at a sample TODO list LiveView application that has two routes of interest. <code>/users-fast</code> and <code>/users-slow</code> both list all of the users of the application and also list how many TODO list items each of them have in their queue. As the names of the routes imply, one of the routes responds quickly, and the other not so much. The question that we need to answer is why is this occurring and how we can remedy the problem. The title of the article hints at the problem... but it&#39;ll really be clear once we see a trace from the application when the <code>/users-slow</code> route.</p> <p>All the code for the sample application can be found <a href="https://github.com/fly-apps/elixir_opentel_and_grafana">here</a> but let&#39;s start by going through the application specific changes needed to instrument our application. As a note, this demo application was generated via the <code>mix phx.new APP_NAME --binary-id</code> command, with only a few changes made to support deploying to Fly.io. Let&#39;s first cover how to set up the OpenTelemetry libraries by opening up <code>mix.exs</code> and adding the following dependencies:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">defp</span> <span class="n">deps</span> <span class="k">do</span> <span class="p">[</span> <span class="o">...</span> <span class="p">{</span><span class="ss">:opentelemetry_exporter</span><span class="p">,</span> <span class="s2">"~&gt; 1.0"</span><span class="p">},</span> <span class="p">{</span><span class="ss">:opentelemetry</span><span class="p">,</span> <span class="s2">"~&gt; 1.0"</span><span class="p">},</span> <span class="p">{</span><span class="ss">:opentelemetry_api</span><span class="p">,</span> <span class="s2">"~&gt; 1.0"</span><span class="p">},</span> <span class="p">{</span><span class="ss">:opentelemetry_ecto</span><span class="p">,</span> <span class="s2">"~&gt; 1.0"</span><span class="p">},</span> <span class="p">{</span><span class="ss">:opentelemetry_liveview</span><span class="p">,</span> <span class="s2">"~&gt; 1.0.0-rc.4"</span><span class="p">},</span> <span class="p">{</span><span class="ss">:opentelemetry_phoenix</span><span class="p">,</span> <span class="s2">"~&gt; 1.0"</span><span class="p">},</span> <span class="p">{</span><span class="ss">:opentelemetry_cowboy</span><span class="p">,</span> <span class="s2">"~&gt; 0.2"</span><span class="p">}</span> <span class="p">]</span> <span class="k">end</span> </code></pre></div><p>After that, we run <code>mix deps.get</code> to fetch the dependencies from Hex. Next, we&#39;ll open up <code>application.ex</code> and update the <code>start/1</code> callback as follows:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">def</span> <span class="n">start</span><span class="p">(</span><span class="n">_type</span><span class="p">,</span> <span class="n">_args</span><span class="p">)</span> <span class="k">do</span> <span class="k">if</span> <span class="no">System</span><span class="o">.</span><span class="n">get_env</span><span class="p">(</span><span class="s2">"ECTO_IPV6"</span><span class="p">)</span> <span class="k">do</span> <span class="ss">:httpc</span><span class="o">.</span><span class="n">set_option</span><span class="p">(</span><span class="ss">:ipfamily</span><span class="p">,</span> <span class="ss">:inet6fb4</span><span class="p">)</span> <span class="k">end</span> <span class="ss">:ok</span> <span class="o">=</span> <span class="ss">:opentelemetry_cowboy</span><span class="o">.</span><span class="n">setup</span><span class="p">()</span> <span class="ss">:ok</span> <span class="o">=</span> <span class="no">OpentelemetryPhoenix</span><span class="o">.</span><span class="n">setup</span><span class="p">()</span> <span class="ss">:ok</span> <span class="o">=</span> <span class="no">OpentelemetryLiveView</span><span class="o">.</span><span class="n">setup</span><span class="p">()</span> <span class="ss">:ok</span> <span class="o">=</span> <span class="no">FlyOtel</span><span class="o">.</span><span class="no">Repo</span><span class="o">.</span><span class="n">config</span><span class="p">()</span> <span class="o">|&gt;</span> <span class="no">Keyword</span><span class="o">.</span><span class="n">fetch!</span><span class="p">(</span><span class="ss">:telemetry_prefix</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="no">OpentelemetryEcto</span><span class="o">.</span><span class="n">setup</span><span class="p">()</span> <span class="o">...</span> <span class="k">end</span> </code></pre></div><p>The <code>if-block</code> in the beginning checks for the presence of the <code>ECTO_IPV6</code> environment variable prior to setting an <code>:httpc</code> option. The reason for this being that when applications are deployed to Fly.io, they are interconnected by a mesh of <a href="https://fly.io/docs/reference/private-networking/">IPv6 Wireguard tunnels</a>, and by default the Erlang HTTP client <code>:httpc</code> is configured to use IPv4. In order for our OTel exporter to publish our traces to Tempo it needs the <code>:inet6fb4</code> option set so that it first attempts to connect to the remote host via IPv6, while falling back to IPv4 if needed. We lean on the <code>ECTO_IPV6</code> environment variable since Ecto is also configured to apply this <code>socket_options</code> if the environment variable is present (look at the <code>config/runtime.exs</code> if you are interested in seeing how this is set up).</p> <p>Next we have a few Opentelemetry library calls that configure the trace collectors. The first three <code>setup/0</code> calls set up the Cowboy, Phoenix, and LiveView tracing libraries. These calls instruct the OTel libraries to attach handlers to the telemetry events that are emitted by each of the underlying libraries. The Ecto tracing library requires a little more work to set up as we need to fetch the configured telemetry prefix so the OTel library can attach the handler to the correct Repo event.</p> <p>With that in place, all that needs to be done now is update some configuration in <code>runtime.exs</code> so the telemetry exporter knows where to send trace data. Add the following inside of the <code>config_env() == :prod</code> if-block:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">if</span> <span class="n">config_env</span><span class="p">()</span> <span class="o">==</span> <span class="ss">:prod</span> <span class="k">do</span> <span class="n">config</span> <span class="ss">:opentelemetry_exporter</span><span class="p">,</span> <span class="ss">otlp_protocol:</span> <span class="ss">:http_protobuf</span><span class="p">,</span> <span class="ss">otlp_endpoint:</span> <span class="no">System</span><span class="o">.</span><span class="n">fetch_env!</span><span class="p">(</span><span class="s2">"OTLP_ENDPOINT"</span><span class="p">)</span> <span class="o">...</span> <span class="k">end</span> </code></pre></div><p>With this in place, we can configure our application at runtime to send traces to the correct service. In this example, we will lean on Tempo to capture and persist traces. Once the traces are in Tempo, we can use Grafana to explore the persisted traces and see why our endpoints differ in performance. Hopefully, it&#39;s clear that there is not a lot of ceremony or effort needed on our part to start collecting traces from our application.</p> <p>Next, we&#39;ll deploy our application to Fly.io so we can capture and view some real traces!</p> <h2 id='deploying-and-observing-your-application-on-fly-io' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#deploying-and-observing-your-application-on-fly-io' aria-label='Anchor'></a>Deploying and Observing Your Application on Fly.io</h2><p>Let&#39;s start by installing the <code>flyctl</code> CLI utility and authenticating with Fly.io so we can start deploying our services using the following guide: <a href="https://fly.io/docs/hands-on/install-flyctl/">https://fly.io/docs/hands-on/install-flyctl/</a>.</p> <p>With that done, you are ready to start deploying all of the necessary services including our trace enabled Phoenix LiveView application. Let&#39;s begin by deploying our Phoenix application.</p> <h3 id='phoenix-app-postgres' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#phoenix-app-postgres' aria-label='Anchor'></a>Phoenix App + Postgres</h3><p>To deploy the instrumented Phoenix LiveView application, we first need to update the <code>fly.toml</code> file to reflect the name of the application. Specifically, we need to update the following fields:</p> <ul> <li>Update the <code>OTEL_RESOURCE_ATTRIBUTES</code> environment variable to have the correct <code>service.name</code> value for your service. </li><li>Update <code>OTLP_ENDPOINT</code> environment variable to have the correct URL for the Tempo service. The URL will have the following format: <code>http://REGION.YOUR-APP-tempo.internal:4318</code> where <code>REGION</code> is one of the <a href="https://fly.io/docs/reference/regions/">Fly.io datacenter regions</a>. </li><li>Update the <code>PHX_HOST</code> environment variable to reflect the URL for the application based on the application name. </li></ul> <p>With those fields updated, you can run <code>fly launch</code> and let the Fly.io CLI tool do the heavy lifting. Be sure to create a Postgres database when prompted so your application has something to communicate with. After the application is up and running, we&#39;ll want to hydrate the database with some data. Connect to the running instance by running <code>flyctl ssh console</code> in the CLI. After you connect to the Phoenix LiveView application, go ahead and run <code>/app/bin/YOUR_APP REMOTE</code> to attach an IEx session to the live application. After connecting to the application, run the following snippet of Elixir code to populate the database with some initial data:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="n">alias</span> <span class="no">Faker</span><span class="o">.</span><span class="no">Person</span> <span class="n">alias</span> <span class="no">Faker</span><span class="o">.</span><span class="no">Lorem</span> <span class="n">alias</span> <span class="no">FlyOtel</span><span class="o">.</span><span class="no">Accounts</span> <span class="n">alias</span> <span class="no">FlyOtel</span><span class="o">.</span><span class="no">Accounts</span><span class="o">.</span><span class="no">TodoListItem</span> <span class="n">alias</span> <span class="no">FlyOtel</span><span class="o">.</span><span class="no">Accounts</span><span class="o">.</span><span class="no">User</span> <span class="mi">1</span><span class="o">..</span><span class="mi">20</span> <span class="o">|&gt;</span> <span class="no">Enum</span><span class="o">.</span><span class="n">each</span><span class="p">(</span><span class="k">fn</span> <span class="n">_</span> <span class="o">-&gt;</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="p">%</span><span class="no">User</span><span class="p">{}</span> <span class="o">=</span> <span class="n">user</span><span class="p">}</span> <span class="o">=</span> <span class="no">Accounts</span><span class="o">.</span><span class="n">create_user</span><span class="p">(%{</span> <span class="ss">age:</span> <span class="no">Enum</span><span class="o">.</span><span class="n">random</span><span class="p">(</span><span class="mi">18</span><span class="o">..</span><span class="mi">65</span><span class="p">),</span> <span class="ss">name:</span> <span class="s2">"</span><span class="si">#{</span><span class="no">Person</span><span class="o">.</span><span class="n">first_name</span><span class="p">()</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="no">Person</span><span class="o">.</span><span class="n">last_name</span><span class="p">()</span><span class="si">}</span><span class="s2">"</span> <span class="p">})</span> <span class="mi">1</span><span class="o">..</span><span class="no">Enum</span><span class="o">.</span><span class="n">random</span><span class="p">(</span><span class="mi">5</span><span class="o">..</span><span class="mi">50</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="no">Enum</span><span class="o">.</span><span class="n">each</span><span class="p">(</span><span class="k">fn</span> <span class="n">_</span> <span class="o">-&gt;</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="p">%</span><span class="no">TodoListItem</span><span class="p">{}}</span> <span class="o">=</span> <span class="no">Accounts</span><span class="o">.</span><span class="n">create_todo_list_item</span><span class="p">(%{</span><span class="ss">task:</span> <span class="no">Lorem</span><span class="o">.</span><span class="n">sentence</span><span class="p">()},</span> <span class="n">user</span><span class="p">)</span> <span class="k">end</span><span class="p">)</span> <span class="k">end</span><span class="p">)</span> </code></pre></div><p>With that done, we can vist the application in a browser (<code>https://YOUR-APP.fly.dev/users-fast</code>) to see it in action!</p> <p>Next we&#39;ll deploy Tempo to store all of the traces that our collector exports.</p> <h3 id='tempo' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#tempo' aria-label='Anchor'></a>Tempo</h3><p>To run Tempo in Fly.io, we need to create our own Docker container (built upon the Grafana Tempo image) that includes our necessary configuration file. The following Dockerfile is the bare minimum required to deploy Tempo to Fly.io and will probably need some more work and configuration if you want to set this up for production:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight dockerfile'><code><span class="k">FROM</span><span class="s"> grafana/tempo:1.5.0</span> <span class="k">COPY</span><span class="s"> ./tempo-config.yaml /etc/tempo.yaml</span> <span class="k">CMD</span><span class="s"> ["/tempo", "-config.file=/etc/tempo.yaml"]</span> </code></pre></div><p>In that short Dockerfile, it mentioned <code>tempo-config.yaml</code>. We&#39;ll create the file to copy into the Dockerfile and configure how Tempo listens for trace data and how to store the data. Similar to the Dockerfile, this is the minimum requirement to get Tempo up and running and for a production application some additional configuration might be needed. The contents of the YAML file are:</p> <p>File: <code>temp-config.yaml</code></p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight yaml'><code><span class="na">server</span><span class="pi">:</span> <span class="na">http_listen_port</span><span class="pi">:</span> <span class="m">3200</span> <span class="na">search_enabled</span><span class="pi">:</span> <span class="no">true</span> <span class="na">distributor</span><span class="pi">:</span> <span class="na">receivers</span><span class="pi">:</span> <span class="na">otlp</span><span class="pi">:</span> <span class="na">protocols</span><span class="pi">:</span> <span class="na">http</span><span class="pi">:</span> <span class="na">endpoint</span><span class="pi">:</span> <span class="s2">"</span><span class="s">0.0.0.0:4318"</span> <span class="na">storage</span><span class="pi">:</span> <span class="na">trace</span><span class="pi">:</span> <span class="na">backend</span><span class="pi">:</span> <span class="s">local</span> <span class="na">block</span><span class="pi">:</span> <span class="na">bloom_filter_false_positive</span><span class="pi">:</span> <span class="s">.05</span> <span class="na">index_downsample_bytes</span><span class="pi">:</span> <span class="m">1000</span> <span class="na">encoding</span><span class="pi">:</span> <span class="s">zstd</span> <span class="na">wal</span><span class="pi">:</span> <span class="na">path</span><span class="pi">:</span> <span class="s">/tmp/tempo/wal</span> <span class="na">encoding</span><span class="pi">:</span> <span class="s">snappy</span> <span class="na">local</span><span class="pi">:</span> <span class="na">path</span><span class="pi">:</span> <span class="s">/tmp/tempo/blocks</span> <span class="na">pool</span><span class="pi">:</span> <span class="na">max_workers</span><span class="pi">:</span> <span class="m">100</span> <span class="na">queue_depth</span><span class="pi">:</span> <span class="m">10000</span> </code></pre></div><p>With the Dockerfile and configuration located in the same directory, all we need is a <code>fly.toml</code> file in the same directory so we can deploy Tempo. The contents of the <code>fly.toml</code> file should contain the following:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight toml'><code><span class="py">app</span> <span class="p">=</span> <span class="s">"YOUR-APP-tempo"</span> <span class="nn">[build]</span> <span class="py">dockerfile</span> <span class="p">=</span> <span class="s">"./Dockerfile"</span> </code></pre></div><p>For those familiar with deploying services on Fly.io, they may wonder why there is no <code>[[services]]</code> section. The reason is, we don&#39;t want this service accessible from the public internet. We only want it available internally on our network for Grafana and our Phoenix application to communicate with.</p> <p>With that all in place, all that is left is to run <code>flyctl apps create YOUR-APP-tempo &amp;&amp; flyctl deploy</code> in the directory with all of the files and Tempo should be deployed!</p> <p>With that going, let&#39;s deploy Grafana next.</p> <h3 id='grafana' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#grafana' aria-label='Anchor'></a>Grafana</h3><p>Like how we deployed Tempo, we&#39;ll create a new directory to house the Dockerfile, Grafana config, and Fly.io deployment manifest. Again, the Dockerfile is simple and copies in a configuration file and starts Grafana:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight dockerfile'><code><span class="k">FROM</span><span class="s"> grafana/grafana:9.2.3</span> <span class="k">COPY</span><span class="s"> ./grafana.ini /etc/grafana/grafana.ini</span> <span class="k">CMD</span><span class="s"> ["/run.sh"]</span> </code></pre></div><p>Our configuration file contains a flag to enable the experiment Tempo search functionality. We use this in Grafana to help easily find relevant traces for our application:</p> <p>File: <code>grafana.ini</code></p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight ini'><code><span class="nn">[feature_toggles]</span> <span class="py">enable</span> <span class="p">=</span> <span class="s">tempoSearch tempoBackendSearch</span> </code></pre></div><p>With that ready, we just need the <code>fly.toml</code> file:</p> <p>File: <code>fly.toml</code></p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight toml'><code><span class="py">app</span> <span class="p">=</span> <span class="s">"YOUR-APP-grafana"</span> <span class="nn">[build]</span> <span class="py">dockerfile</span> <span class="p">=</span> <span class="s">"./Dockerfile"</span> </code></pre></div><p>Once again, we run <code>flyctl apps create YOUR-APP-grafana &amp;&amp; flyctl deploy</code> to get Grafana up and running on Fly.io. Also, note the file exposes no services on the public internet. Basically, it&#39;s fairly simple (and secure) to connect to internal applications running on Fly.io via Wireguard using <code>flyctl</code>. This limits our exposed surface area on the public internet which is always a good things from a security standpoint.</p> <p>Let&#39;s connect to Grafana after it is deployed and configure our Tempo data source so we can visualize application traces.</p> <h4 id='configuring-tempo-datasource-in-grafana' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#configuring-tempo-datasource-in-grafana' aria-label='Anchor'></a>Configuring Tempo Datasource in Grafana</h4><p>From inside the directory containing the Grafana <code>fly.toml</code> manifest, run the following command:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight session'><code>$ flyctl proxy 3000:3000 </code></pre></div><p>Now, open a browser and navigate to <code>http://localhost:3000</code> to access your Grafana instance (by default, the username and password are both <code>admin</code>)! After logging in, go to the data source configuration page (<code>http://localhost:3000/datasources</code>) and click the <code>Add data source</code> button. After that, look for Tempo in the list of available data sources (under <code>Distributed tracing</code>) and select it. On the next page, the only field we need to fill out is the <code>URL</code> field. We want to fill it out as shown below (substituting <code>REGION</code> with the region where the Tempo instance is running and substituting <code>YOUR-APP</code> with the name given to Tempo when it was created):</p> <p><a href="/phoenix-files/2022-11-14/config_data_source.webp"><img src="/phoenix-files/2022-11-14/config_data_source.webp?centered&amp;card" alt="Configure Tempo data source" /></a></p> <p>If all goes well, after clicking <code>Save &amp; test</code>, we should see a success message:</p> <p><img src="/phoenix-files/2022-11-14/data_source_success.webp?centered&amp;card" alt="Configured Tempo data source displaying success message" /></p> <p>With Grafana running and connected to Tempo, all that is left is to exercise the Phoenix application a little and compare the trace results! Navigate a few times to <code>https://YOUR-APP.fly.dev/users-fast</code> and <code>https://YOUR-APP.fly.dev/users-slow</code> to ensure that there is trace information in Tempo and then click on the <code>Explore</code> button in the side nav in Grafana.</p> <h2 id='comparing-the-application-traces' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#comparing-the-application-traces' aria-label='Anchor'></a>Comparing the Application Traces</h2><p>By default, the selected data source should be Tempo, but if it is not, be sure to select it. Then, in the row of filters labeled <code>Query type</code>, select <code>Search</code>. After that, select <code>/users-fast</code> from the <code>Span Name</code> drop down and click on one of the returned <code>Trace ID</code>s. After clicking on a trace sample, we should see something like this:</p> <p><a href="/phoenix-files/2022-11-14/fast_live_view_trace.webp"><img src="/phoenix-files/2022-11-14/fast_live_view_trace.webp?centered&amp;card" alt="Fast users page trace" /></a></p> <p>We can even click on individual trace segments to drill down and see what metadata is associated with the event:</p> <p><a href="/phoenix-files/2022-11-14/trace_metadata.webp"><img src="/phoenix-files/2022-11-14/trace_metadata.webp?centered&amp;card" alt="Trace metadata" /></a></p> <p>As a comparison, now select <code>/users-slow</code> from the <code>Span Name</code> drop down and see how the trace compares. It should appear something like this:</p> <p><a href="/phoenix-files/2022-11-14/slow_trace.webp"><img src="/phoenix-files/2022-11-14/slow_trace.webp?centered&amp;card" alt="Slow N+1 trace" /></a></p> <p>As we can see, not only is this trace visually busier than the previous trace but it is also much slower (22.47ms duration versus 4.08ms duration from the previous trace). When we expand the trace segments, we can see that the same Ecto queries keep getting executed over and over again inside of the LiveView <code>mount/3</code> callback whereas the previous trace only has a single Ecto query executed. This right here is a visual representation of the infamous N+1 query in action!</p> <p>Looking closely at the trace metadata from the slow trace, we can see that it starts off by making one call to <code>fly_otel.repo.query:users</code> and then makes numerous repeated calls to <code>fly_otel.repo.query:todo_list_items</code>. In this case the one call to the users is the <code>1</code> in <code>N+1</code> and the <code>N</code> is the 20 other calls that the backend had to make to the database to get the TODO list for each and every user (which is supported by the <code>Child Count</code> value of <code>21</code>):</p> <p><a href="/phoenix-files/2022-11-14/metadata_zoom_in.webp"><img src="/phoenix-files/2022-11-14/metadata_zoom_in.webp?centered&amp;card" alt="N+1 metadata" /></a></p> <p>And just like that, we can now visualize and diagnose less than ideal database interactions all the way down the call stack.</p> <h2 id='conclusion' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#conclusion' aria-label='Anchor'></a>Conclusion</h2><p>Well done and thanks for sticking through to the end! We covered quite a lot of ground and hopefully you picked up a couple of cool tips and tricks along the way.</p> <p>To recap, we learned about the various pillars of observability and took a deep dive into the tracing pillar. We learned about setting up an Elixir application with the OpenTelemetry tooling and even deployed our application along with some supporting monitoring tools to Fly.io. We then compared trace results between two different LiveView pages and were able to see the effects that an N+1 query would have on our application&#39;s performance.</p> <figure class="post-cta"> <figcaption> <h1> Fly.io ❤️ Elixir</h1><p> Fly.io is a great way to run your Phoenix LiveView app close to your users. It&#39;s really easy to get started. You can be running in minutes.</p><p><a class="button bg-white text-violet-600 hover:bg-opacity-75 hover:text-violet-700 transition-colors" href="https://fly.io/docs/elixir/"> Deploy a Phoenix app today!&nbsp;&nbsp;<span class='opacity:50'>&rarr;</span> </a></p> </figcaption><div class="image-container"> <img src="/static/images/cta-kitty.webp" srcset="/static/images/cta-kitty@2x.webp 2x" alt=""></div></figure></content>
</entry>
<entry>
<title>Github Actions for Elixir CI</title>
<link rel="alternate" href="https://fly.io/phoenix-files/github-actions-for-elixir-ci/"/>
<id>https://fly.io/phoenix-files/github-actions-for-elixir-ci/</id>
<published>2022-11-02T00:00:00+00:00</published>
<updated>2023-04-06T14:48:02+00:00</updated>
<content type="html"><p class="lead"> This is about setting up Github Actions to run CI checks for your Elixir and Phoenix projects on Github. Fly.io is a great place to run those Elixir applications! Check out how to <a href="/docs/elixir/">get started</a>!</p><p>A critical ingredient for modern development teams is a regularly run set of code checks. If it&#39;s up to every developer to run code tests and checks locally before pushing code, you know it will be forgotten at some point. This leaves it as a problem for someone else to cleanup later. Uncool!</p> <p>We want the benefits of modern Continuous Integration (CI) workflows for our Elixir projects. This lays out a good starting point that teams can customize to suit their needs.</p> <h2 id='what-is-continuous-integration-ci' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#what-is-continuous-integration-ci' aria-label='Anchor'></a>What Is Continuous Integration (CI)?</h2><p>Continuous integration is a software development practice where developers frequently merge code changes into a central repository. Automated builds and tests are run to assert the new code&#39;s correctness before integrating the changes into the main development branch.</p> <p>The goal with CI is to find and correct bugs faster, improve software quality and enable software releases to happen faster.</p> <p>CI is a critical ingredient for modern development teams.</p> <h2 id='getting-started' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#getting-started' aria-label='Anchor'></a>Getting Started</h2><p>To get started with Github Actions in your project, let&#39;s create a &quot;test&quot; workflow. To do this, create this path and file in the root of your project:</p> <p><code>.github/workflows/elixir.yaml</code></p> <p>Let&#39;s look at a sample file. Comments are included to explain and document what we&#39;re doing and why.</p> <aside class="right-sidenote"> This information has been added to the <a href="/docs/elixir/advanced-guides/github-actions-elixir-ci-cd/">Elixir documentation guides</a> for easy reference.</aside><div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight yaml'><code><span class="na">name</span><span class="pi">:</span> <span class="s">Elixir CI</span> <span class="c1"># Define workflow that runs when changes are pushed to the</span> <span class="c1"># `main` branch or pushed to a PR branch that targets the `main`</span> <span class="c1"># branch. Change the branch name if your project uses a</span> <span class="c1"># different name for the main branch like "master" or "production".</span> <span class="na">on</span><span class="pi">:</span> <span class="na">push</span><span class="pi">:</span> <span class="na">branches</span><span class="pi">:</span> <span class="pi">[</span> <span class="s2">"</span><span class="s">main"</span> <span class="pi">]</span> <span class="c1"># adapt branch for project</span> <span class="na">pull_request</span><span class="pi">:</span> <span class="na">branches</span><span class="pi">:</span> <span class="pi">[</span> <span class="s2">"</span><span class="s">main"</span> <span class="pi">]</span> <span class="c1"># adapt branch for project</span> <span class="c1"># Sets the ENV `MIX_ENV` to `test` for running tests</span> <span class="na">env</span><span class="pi">:</span> <span class="na">MIX_ENV</span><span class="pi">:</span> <span class="s">test</span> <span class="na">permissions</span><span class="pi">:</span> <span class="na">contents</span><span class="pi">:</span> <span class="s">read</span> <span class="na">jobs</span><span class="pi">:</span> <span class="na">test</span><span class="pi">:</span> <span class="c1"># Set up a Postgres DB service. By default, Phoenix applications</span> <span class="c1"># use Postgres. This creates a database for running tests.</span> <span class="c1"># Additional services can be defined here if required.</span> <span class="na">services</span><span class="pi">:</span> <span class="na">db</span><span class="pi">:</span> <span class="na">image</span><span class="pi">:</span> <span class="s">postgres:12</span> <span class="na">ports</span><span class="pi">:</span> <span class="pi">[</span><span class="s1">'</span><span class="s">5432:5432'</span><span class="pi">]</span> <span class="na">env</span><span class="pi">:</span> <span class="na">POSTGRES_PASSWORD</span><span class="pi">:</span> <span class="s">postgres</span> <span class="na">options</span><span class="pi">:</span> <span class="pi">&gt;-</span> <span class="s">--health-cmd pg_isready</span> <span class="s">--health-interval 10s</span> <span class="s">--health-timeout 5s</span> <span class="s">--health-retries 5</span> <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Test on OTP ${{matrix.otp}} / Elixir ${{matrix.elixir}}</span> <span class="na">strategy</span><span class="pi">:</span> <span class="c1"># Specify the OTP and Elixir versions to use when building</span> <span class="c1"># and running the workflow steps.</span> <span class="na">matrix</span><span class="pi">:</span> <span class="na">otp</span><span class="pi">:</span> <span class="pi">[</span><span class="s1">'</span><span class="s">25.0.4'</span><span class="pi">]</span> <span class="c1"># Define the OTP version [required]</span> <span class="na">elixir</span><span class="pi">:</span> <span class="pi">[</span><span class="s1">'</span><span class="s">1.14.1'</span><span class="pi">]</span> <span class="c1"># Define the elixir version [required]</span> <span class="na">steps</span><span class="pi">:</span> <span class="c1"># Step: Setup Elixir + Erlang image as the base.</span> <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Set up Elixir</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">erlef/setup-beam@v1</span> <span class="na">with</span><span class="pi">:</span> <span class="na">otp-version</span><span class="pi">:</span> <span class="s">${{matrix.otp}}</span> <span class="na">elixir-version</span><span class="pi">:</span> <span class="s">${{matrix.elixir}}</span> <span class="c1"># Step: Check out the code.</span> <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout code</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v3</span> <span class="c1"># Step: Define how to cache deps. Restores existing cache if present.</span> <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Cache deps</span> <span class="na">id</span><span class="pi">:</span> <span class="s">cache-deps</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/cache@v3</span> <span class="na">env</span><span class="pi">:</span> <span class="na">cache-name</span><span class="pi">:</span> <span class="s">cache-elixir-deps</span> <span class="na">with</span><span class="pi">:</span> <span class="na">path</span><span class="pi">:</span> <span class="s">deps</span> <span class="na">key</span><span class="pi">:</span> <span class="s">${{ runner.os }}-mix-${{ env.cache-name }}-${{ hashFiles('**/mix.lock') }}</span> <span class="na">restore-keys</span><span class="pi">:</span> <span class="pi">|</span> <span class="s">${{ runner.os }}-mix-${{ env.cache-name }}-</span> <span class="c1"># Step: Define how to cache the `_build` directory. After the first run,</span> <span class="c1"># this speeds up tests runs a lot. This includes not re-compiling our</span> <span class="c1"># project's downloaded deps every run.</span> <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Cache compiled build</span> <span class="na">id</span><span class="pi">:</span> <span class="s">cache-build</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/cache@v3</span> <span class="na">env</span><span class="pi">:</span> <span class="na">cache-name</span><span class="pi">:</span> <span class="s">cache-compiled-build</span> <span class="na">with</span><span class="pi">:</span> <span class="na">path</span><span class="pi">:</span> <span class="s">_build</span> <span class="na">key</span><span class="pi">:</span> <span class="s">${{ runner.os }}-mix-${{ env.cache-name }}-${{ hashFiles('**/mix.lock') }}</span> <span class="na">restore-keys</span><span class="pi">:</span> <span class="pi">|</span> <span class="s">${{ runner.os }}-mix-${{ env.cache-name }}-</span> <span class="s">${{ runner.os }}-mix-</span> <span class="c1"># Step: Download project dependencies. If unchanged, uses</span> <span class="c1"># the cached version.</span> <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install dependencies</span> <span class="na">run</span><span class="pi">:</span> <span class="s">mix deps.get</span> <span class="c1"># Step: Compile the project treating any warnings as errors.</span> <span class="c1"># Customize this step if a different behavior is desired.</span> <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Compiles without warnings</span> <span class="na">run</span><span class="pi">:</span> <span class="s">mix compile --warnings-as-errors</span> <span class="c1"># Step: Check that the checked in code has already been formatted.</span> <span class="c1"># This step fails if something was found unformatted.</span> <span class="c1"># Customize this step as desired.</span> <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Check Formatting</span> <span class="na">run</span><span class="pi">:</span> <span class="s">mix format --check-formatted</span> <span class="c1"># Step: Execute the tests.</span> <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Run tests</span> <span class="na">run</span><span class="pi">:</span> <span class="s">mix test</span> </code></pre></div><h2 id='when-the-workflow-runs' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#when-the-workflow-runs' aria-label='Anchor'></a>When the Workflow Runs...</h2><p>When code is pushed to the <code>main</code> branch, this workflow is run. This happens either from directly pushing to the <code>main</code> branch or after merging a PR into the <code>main</code> branch.</p> <p>This workflow is also configured to run checks on PR branches that target the <code>main</code> branch. This is where it&#39;s most helpful. We can work on a fix or a new feature in a branch and as we work and push our code up, it automatically runs the full gamut of checks we want.</p> <p>When all steps in the workflow succeed, the workflow &quot;passes&quot; and the automated checks say it can be merged. When a step fails, the workflow halts at that point and &quot;fails&quot;, potentially blocking a merge.</p> <h2 id='customizing-the-workflow-steps' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#customizing-the-workflow-steps' aria-label='Anchor'></a>Customizing the Workflow Steps</h2><p>This workflow is a starting point for a team. Every project is unique and every team values different things. Is this missing something your team wants? Check out some additional steps that can be added to your workflow.</p> <ul> <li>Add a step to run <a href="https://github.com/rrrene/credo">Credo</a> checks. </li><li>Add a step to run <a href="https://github.com/nccgroup/sobelow">Sobelow</a> for security focused static analysis. </li><li>Add a step to run <a href="https://github.com/jeremyjh/dialyxir">dialyxir</a>. This runs <a href="https://www.erlang.org/doc/man/dialyzer.html">Dialyzer</a> static code analysis on the project. Refer to the project for tips on caching the PLT. </li><li>Customize the <code>mix test</code> command to include <a href="https://hexdocs.pm/mix/main/Mix.Tasks.Test.html#module-coverage">code coverage</a> checks. </li><li>Add Node setup and caching if <code>npm</code> assets are part of the project&#39;s test suite. </li><li>Add a step to run <a href="https://github.com/mirego/mix_audit">mix_audit</a>. This provides a <code>mix deps.audit</code> task to scan a project&#39;s Mix dependencies for known Elixir security vulnerabilities </li><li>Add a step to run <a href="https://hexdocs.pm/hex/Mix.Tasks.Hex.Audit.html"><code>mix hex.audit</code></a>. This shows all Hex dependencies that have been marked as retired, which the package maintainers no longer recommended using. </li><li>Add a set to run <a href="https://hexdocs.pm/mix/Mix.Tasks.Deps.Unlock.html"><code>mix deps.unlock --check-unused</code></a>. This checks that the <code>mix.lock</code> file has no unused dependencies. This is useful if you want to reject contributions with extra dependencies. </li></ul> <h2 id='benefits-of-caching' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#benefits-of-caching' aria-label='Anchor'></a>Benefits of Caching</h2><p>It&#39;s worth spending time tweaking your caches. Why? A lot of effort has been put into speeding up Elixir build times. If we don&#39;t cache the build artifacts, then we don&#39;t reap any of those benefits!</p> <p>Of course, faster build times means you spend less money running your CI workflow. But that&#39;s not the reason to do it! Better caches mean the checks are performed faster and that means faster feedback. Faster feedback means that, as a team, you save time and can move faster. No waiting 20 minutes for the checks to complete so a PR can be merged. (Yes, I have felt that pain!)</p> <p>This starting template builds in two caching steps. If <code>node_modules</code> factor into your project&#39;s tests, then caching there makes a lot of sense too.</p> <p>Just keep in mind that the reason we cache is to reduce drag on the speed of our team.</p> <p>If our caches ever cause a problem, and sometimes they can, it&#39;s good to know how to clear them. In our project, go to Actions &gt; (Sidebar) Management &gt; Caches. This is the list of caches saved for the project. We can use our naming format to identify which cache file is for what.</p> <p><img src="/phoenix-files/2022-11-02/github-actions-cache-management.webp?centered&amp;card&amp;border" alt="Annotated screenshot of Github cache management interface" /></p> <h2 id='what-about-continuous-delivery-cd' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#what-about-continuous-delivery-cd' aria-label='Anchor'></a>What About Continuous Delivery (CD)?</h2><p>With CI working, the next obvious question is, &quot;Can I auto-deploy my application on Fly.io?&quot; The answer is an emphatic, &quot;Yes!&quot;</p> <p>It&#39;s actually pretty straightforward and there&#39;s nothing specific to Elixir about it. The process is documented well in the <a href="/docs/app-guides/continuous-deployment-with-github-actions/">Continuous Deployment with Fly and GitHub Actions</a> guide.</p> <h2 id='discussion' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#discussion' aria-label='Anchor'></a>Discussion</h2><p>In very short order we&#39;ve got a slick Continuous Integration (CI) workflow running for our Elixir project! Similar approaches can be used for projects hosted on <a href="https://gitlab.com/">Gitlab</a> and elsewhere.</p> <p>The goal is to keep the code quality of our application high without slowing down or overly burdening the development process. With a customized CI workflow based on something like this, we get the benefits of Elixir&#39;s improved compile times while enforcing security checks, coding practices and more.</p> <p>Hopefully this improves your code checks while reducing the friction for your team at the same time!</p> <p>NOTE: This guide can also be found in the growing section of <a href="/docs/elixir/advanced-guides/github-actions-elixir-ci-cd/">Elixir documentation</a>.</p> <figure class="post-cta"> <figcaption> <h1> Fly.io ❤️ Elixir</h1><p> Fly.io is a great way to run your Phoenix LiveView app close to your users. It&#39;s really easy to get started. You can be running in minutes.</p><p><a class="button bg-white text-violet-600 hover:bg-opacity-75 hover:text-violet-700 transition-colors" href="https://fly.io/docs/elixir/"> Deploy a Phoenix app today!&nbsp;&nbsp;<span class='opacity:50'>&rarr;</span> </a></p> </figcaption><div class="image-container"> <img src="/static/images/cta-cat.webp" srcset="/static/images/cta-cat@2x.webp 2x" alt=""></div></figure></content>
</entry>
<entry>
<title>Shutting down a Phoenix app when idle</title>
<link rel="alternate" href="https://fly.io/phoenix-files/shut-down-idle-phoenix-app/"/>
<id>https://fly.io/phoenix-files/shut-down-idle-phoenix-app/</id>
<published>2022-10-26T00:00:00+00:00</published>
<updated>2023-04-06T14:48:02+00:00</updated>
<content type="html"><p class="lead"> This is a quick post about how you can get a Phoenix app to shut itself down from within if nobody&#39;s using it. On Fly.io, this makes the most sense if the app is running on <a href="https://fly.io/docs/reference/machines/">Fly Machine VMs</a>. Check them out!</p><p>If you&#39;ve ever wanted to shut down an application when no one&#39;s connected to it, say for demand-driven horizontal scaling using <a href="https://fly.io/blog/fly-machines/">Fly Machines</a>, then we have the perfect little recipe for you. At the time of writing, <a href="https://fly.io/docs/reference/apps/#apps-v1">&quot;regular&quot; Fly apps</a> don&#39;t run on Machines, so you can&#39;t use this to scale.</p> <p>When a Fly Machine is in a stopped state, you&#39;re not using RAM or CPU, so you pay only for storage. It becomes entirely reasonable to boot a Phoenix app <em>per user</em> to serve their requests. If you&#39;re wondering why you might do such a thing, stay tuned ;)</p> <p>To unlock this feature in an Elixir app, simply add a task to your supervision tree that checks periodically for active connections and shuts down the Erlang runtime if it finds there are none:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="c1"># lib/my_app/application.ex</span> <span class="k">def</span> <span class="n">start</span><span class="p">(</span><span class="n">_type</span><span class="p">,</span> <span class="n">_args</span><span class="p">)</span> <span class="k">do</span> <span class="n">children</span> <span class="o">=</span> <span class="p">[</span> <span class="o">...</span><span class="p">,</span> <span class="no">AppWeb</span><span class="o">.</span><span class="no">Endpoint</span><span class="p">,</span> <span class="p">{</span><span class="no">Task</span><span class="p">,</span> <span class="k">fn</span> <span class="o">-&gt;</span> <span class="n">shutdown_when_inactive</span><span class="p">(</span><span class="ss">:timer</span><span class="o">.</span><span class="n">minutes</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span> <span class="k">end</span><span class="p">},</span> <span class="p">]</span> <span class="n">opts</span> <span class="o">=</span> <span class="p">[</span><span class="ss">strategy:</span> <span class="ss">:one_for_one</span><span class="p">,</span> <span class="ss">name:</span> <span class="no">App</span><span class="o">.</span><span class="no">Supervisor</span><span class="p">]</span> <span class="no">Supervisor</span><span class="o">.</span><span class="n">start_link</span><span class="p">(</span><span class="n">children</span><span class="p">,</span> <span class="n">opts</span><span class="p">)</span> <span class="k">end</span> <span class="k">defp</span> <span class="n">shutdown_when_inactive</span><span class="p">(</span><span class="n">every_ms</span><span class="p">)</span> <span class="k">do</span> <span class="no">Process</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="n">every_ms</span><span class="p">)</span> <span class="k">if</span> <span class="ss">:ranch</span><span class="o">.</span><span class="n">procs</span><span class="p">(</span><span class="no">AppWeb</span><span class="o">.</span><span class="no">Endpoint</span><span class="o">.</span><span class="no">HTTP</span><span class="p">,</span> <span class="ss">:connections</span><span class="p">)</span> <span class="o">==</span> <span class="p">[]</span> <span class="k">do</span> <span class="no">System</span><span class="o">.</span><span class="n">stop</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="k">else</span> <span class="n">shutdown_when_inactive</span><span class="p">(</span><span class="n">every_ms</span><span class="p">)</span> <span class="k">end</span> <span class="k">end</span> </code></pre></div><p>Within an app&#39;s <code>start/2</code> function, <code>Supervisor.start_link(children, opts)</code> spawns the top-level supervisor and all the child processes in the list of <code>children</code>.</p> <p>We can pass a function directly into our supervision tree using the <a href="https://hexdocs.pm/elixir/1.13/Task.html"><code>Task</code></a> module, without having to wrap things in an extra GenServer process. Here, we use it to pass an anonymous function that runs our custom shutdown code:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="p">{</span><span class="no">Task</span><span class="p">,</span> <span class="k">fn</span> <span class="o">-&gt;</span> <span class="n">shutdown_when_inactive</span><span class="p">(</span><span class="ss">:timer</span><span class="o">.</span><span class="n">minutes</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span> <span class="k">end</span><span class="p">}</span> </code></pre></div><p>We implement a private function, <code>shutdown_when_inactive/1</code>, that sleeps for a given interval before checking the web server&#39;s connection pool library, <a href="https://ninenines.eu/docs/en/ranch/2.1/guide/">Ranch</a>, for any active HTTP connections. If there are none, it calls <code>System.stop(0)</code> to gracefully shut down the VM. Otherwise, it calls itself, starting the next sleep interval before it checks again. Lather, rinse, repeat.</p> <p>When a Fly Machine VM&#39;s main process exits, that VM enters a <code>stopped</code> state, but it isn&#39;t destroyed. The Fly.io platform proxy will try to wake up a <code>stopped</code> machine automatically in response to incoming connection requests, so with this recipe we can build a scale-on-demand Phoenix app!</p> <p>Since HTTPS for our application on Fly.io is terminated at the load balancer, we don&#39;t need to worry about HTTPS connections. For those applications that accept both HTTP and HTTPS, you&#39;ll need to check the <code>:ranch.procs(AppWeb.Endpoint.HTTPS, :connections)</code> for active HTTPS processes as well.</p> <figure class="post-cta"> <figcaption> <h1> Fly.io ❤️ Elixir</h1><p> Fly.io is a great way to run your Phoenix LiveView app close to your users. It&#39;s really easy to get started. You can be running in minutes.</p><p><a class="button bg-white text-violet-600 hover:bg-opacity-75 hover:text-violet-700 transition-colors" href="https://fly.io/docs/elixir/"> Deploy a Phoenix app today!&nbsp;&nbsp;<span class='opacity:50'>&rarr;</span> </a></p> </figcaption><div class="image-container"> <img src="/static/images/cta-kitty.webp" srcset="/static/images/cta-kitty@2x.webp 2x" alt=""></div></figure></content>
</entry>
<entry>
<title>Migrating to LiveView v0.18</title>
<link rel="alternate" href="https://fly.io/phoenix-files/migrating-to-lv-0-18/"/>
<id>https://fly.io/phoenix-files/migrating-to-lv-0-18/</id>
<published>2022-10-20T00:00:00+00:00</published>
<updated>2023-04-06T14:48:02+00:00</updated>
<content type="html"><p class="lead"> This post talks about errors that may appear when migrating our projects to LiveView v0.18 and how to deal with them. If you want to deploy your Phoenix LiveView app right now, then check out how to <a href="/docs/elixir/">get started</a>. You could be up and running in minutes.</p><p><a href="https://hexdocs.pm/phoenix_live_view/changelog.html#0-18-0-2022-09-20">LiveView 0.18</a> is here, bringing new and exciting features to try! In this post we&#39;ll talk about errors that may appear when migrating your project from LiveView v0.17 to v0.18, and how to deal with them.</p> <h2 id='migrated-functions' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#migrated-functions' aria-label='Anchor'></a>Migrated Functions</h2><p>Some of the errors that you will probably find are of the type:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="o">**</span> <span class="p">(</span><span class="no">CompileError</span><span class="p">)</span> <span class="o">...</span> <span class="n">undefined</span> <span class="n">function</span> <span class="n">assign</span><span class="o">/</span><span class="mi">3</span> </code></pre></div><div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="o">**</span> <span class="p">(</span><span class="no">CompileError</span><span class="p">)</span> <span class="o">...</span> <span class="n">undefined</span> <span class="n">function</span> <span class="n">sigil_H</span><span class="o">/</span><span class="mi">2</span> </code></pre></div><p>The above messages refer to functions that have been moved into the <a href="https://hexdocs.pm/phoenix_live_view/Phoenix.Component.html">Phoenix.Component</a> module. This includes some functions previously found in the <code>Phoenix.LiveView</code> module (including <code>assign/3</code> and <code>assign_new/3</code>), and all non-deprecated functions (like <code>sigil_H/2</code>) from the <code>Phoenix.LiveView.Helpers</code> module, which has been removed.</p> <h3 id='solution' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#solution' aria-label='Anchor'></a>Solution</h3><p>The solution in both cases is simple. Import the <code>Phoenix.Component</code> module and remove the <code>Phoenix.LiveView.Helpers</code> import. You may be able to remove the <code>Phoenix.LiveView</code> import as well.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code> <span class="c1">#add</span> <span class="kn">import</span> <span class="no">Phoenix</span><span class="o">.</span><span class="no">Component</span> <span class="c1">#remove</span> <span class="kn">import</span> <span class="no">Phoenix</span><span class="o">.</span><span class="no">LiveView</span> <span class="kn">import</span> <span class="no">Phoenix</span><span class="o">.</span><span class="no">LiveView</span><span class="o">.</span><span class="no">Helpers</span> </code></pre></div><h2 id='deprecated-functions' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#deprecated-functions' aria-label='Anchor'></a>Deprecated Functions</h2><p>You may get other errors related to undefined functions:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="o">**</span> <span class="p">(</span><span class="no">CompileError</span><span class="p">)</span> <span class="o">...</span> <span class="n">undefined</span> <span class="n">function</span> <span class="n">live_patch</span><span class="o">/</span><span class="mi">2</span> </code></pre></div><div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="o">**</span> <span class="p">(</span><span class="no">CompileError</span><span class="p">)</span> <span class="o">...</span> <span class="n">undefined</span> <span class="n">function</span> <span class="n">live_redirect</span><span class="o">/</span><span class="mi">2</span> </code></pre></div><p>These errors appear since the <code>live_patch/2</code> and <code>live_redirect/2</code> functions have been deprecated in favor of the new <code>:link</code> function component.</p> <h3 id='solution-2' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#solution-2' aria-label='Anchor'></a>Solution</h3><p>Change the <code>live_patch/2</code> calls and adjust them to use the new function component, for example:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="c1">#from</span> <span class="o">&lt;%=</span> <span class="n">live_patch</span> <span class="p">[</span><span class="ss">to:</span> <span class="nv">@patch</span><span class="p">,</span> <span class="ss">class:</span> <span class="s2">"..."</span><span class="p">]</span> <span class="k">do</span> <span class="p">%</span><span class="o">&gt;</span> <span class="no">Link</span> <span class="no">Text</span> <span class="o">&lt;</span><span class="p">%</span> <span class="k">end</span> <span class="p">%</span><span class="o">&gt;</span> <span class="c1">#to</span> <span class="o">&lt;.</span><span class="n">link</span> <span class="n">patch</span><span class="o">=</span><span class="p">{</span><span class="nv">@patch</span><span class="p">}</span> <span class="n">class</span><span class="o">=</span><span class="s2">"..."</span><span class="o">&gt;</span> <span class="no">Link</span> <span class="no">Text</span> <span class="o">&lt;/.</span><span class="n">link</span><span class="o">&gt;</span> </code></pre></div><p>Change <code>live_redirect/2</code> calls too:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="c1">#from</span> <span class="o">&lt;%=</span> <span class="n">live_redirect</span><span class="p">(</span><span class="ss">to:</span> <span class="nv">@target</span><span class="p">,</span> <span class="ss">class:</span> <span class="s2">"..."</span><span class="p">)</span> <span class="k">do</span> <span class="p">%</span><span class="o">&gt;</span> <span class="no">Link</span> <span class="no">Text</span> <span class="o">&lt;</span><span class="p">%</span> <span class="k">end</span> <span class="p">%</span><span class="o">&gt;</span> <span class="c1">#to</span> <span class="o">&lt;.</span><span class="n">link</span> <span class="n">navigate</span><span class="o">=</span><span class="p">{</span><span class="nv">@target</span><span class="p">}</span> <span class="n">class</span><span class="o">=</span><span class="s2">"..."</span><span class="o">&gt;</span> <span class="no">Link</span> <span class="no">Text</span> <span class="o">&lt;/.</span><span class="n">link</span><span class="o">&gt;</span> </code></pre></div><h2 id='closing' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#closing' aria-label='Anchor'></a>Closing</h2><p>With these few changes, we&#39;ve cleaned up our warnings and now we&#39;re enjoying the new LiveView v0.18 goodness! We&#39;ll have more to talk about as we take advantage of some of the new LiveView features.</p> <figure class="post-cta"> <figcaption> <h1> Fly.io ❤️ Elixir</h1><p> Fly.io is a great way to run your Phoenix LiveView app close to your users. It&#39;s really easy to get started. You can be running in minutes.</p><p><a class="button bg-white text-violet-600 hover:bg-opacity-75 hover:text-violet-700 transition-colors" href="https://fly.io/docs/elixir/"> Deploy a Phoenix app today!&nbsp;&nbsp;<span class='opacity:50'>&rarr;</span> </a></p> </figcaption><div class="image-container"> <img src="/static/images/cta-rabbit.webp" srcset="/static/images/cta-rabbit@2x.webp 2x" alt=""></div></figure></content>
</entry>
<entry>
<title>Plucking the 'A' from PETAL</title>
<link rel="alternate" href="https://fly.io/phoenix-files/plucking-the-a-from-petal/"/>
<id>https://fly.io/phoenix-files/plucking-the-a-from-petal/</id>
<published>2022-10-06T00:00:00+00:00</published>
<updated>2023-04-06T14:48:02+00:00</updated>
<content type="html"><p class="lead"> This post is asking if LiveView is able to remove Alpine, the &quot;A&quot; in PETAL. If you want to deploy your LiveView app right now, then check out how to <a href="/docs/elixir/">get started</a>. You could be up and running in minutes.</p><p>Recently, <a href="https://github.com/phoenixframework/phoenix_live_view">LiveView</a> has matured greatly. A recent feature in v0.18, covered by <a href="https://www.youtube.com/watch?v=9-rqBLjr5Eo">Chris McCord in his ElixirConf 2022 keynote</a>, is the addition to declarative assigns (think the old React/Vue props). This feature improves the developer experience when creating lots of small, reusable components.</p> <p>The previous <a href="https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.JS.html">Phoenix.LiveView.JS</a> feature added in v0.17, made it easier to execute JavaScript commands integrated with LiveView.</p> <p>With all that LiveView goodness, can we drop <a href="https://alpinejs.dev/">Alpine.js</a> from our default application stack? What happens when we pluck the &quot;A&quot; from PETAL? What are we left with? PETL? The real question is, can we accomplish everything we need?</p> <h2 id='what-is-petal' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#what-is-petal' aria-label='Anchor'></a>What Is PETAL?</h2><p>Quick review here. The <strong class='font-semibold text-navy'>PETAL</strong> stack uses <a href="https://alpinejs.dev/">Alpine.js</a> for client-side JavaScript interactions. Here&#39;s a list of the different parts of PETAL:</p> <ul> <li><a href="https://www.phoenixframework.org/"><strong class='font-semibold text-navy'>P</strong>hoenix</a> </li><li><a href="https://elixir-lang.org/"><strong class='font-semibold text-navy'>E</strong>lixir</a> </li><li><a href="https://tailwindcss.com/"><strong class='font-semibold text-navy'>T</strong>ailwind</a> </li><li><a href="https://alpinejs.dev/"><strong class='font-semibold text-navy'>A</strong>lpine.js</a> </li><li><a href="https://github.com/phoenixframework/phoenix_live_view"><strong class='font-semibold text-navy'>L</strong>iveView</a> </li></ul> <p>The PETAL acronym was coined by <a href="https://twitter.com/pthompson">Patrick Thompson</a> and popularized on the <a href="https://podcast.thinkingelixir.com/21">Thinking Elixir Podcast back in Nov 2020</a> and a series of articles.</p> <h2 id='are-we-ready-to-drop-alpine' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#are-we-ready-to-drop-alpine' aria-label='Anchor'></a>Are We Ready to Drop Alpine?</h2><p>This is really a question of, &quot;Can I do everything I need with just LiveView?&quot;</p> <p>In my previous post, <a href="/phoenix-files/making-tabs-mobile-friendly/">Making Tabs Mobile Friendly</a>, I tried to do exactly that. Could I do something with front-end JavaScript behavior using only JS commands? For reference, the tab behavior looks like this:</p> <p><img src="/phoenix-files/2022-08-08/finished-working-tab-behavior.gif?centered&amp;card&amp;border" alt="Animated GIF showing 3 tab pages that display different content when selected. When the viewport is resized smaller, the tabs change to a select input for choosing the active tab." /></p> <p>The end result? I got really far! I ended up using a little JavaScript to bring it across the finish line.</p> <p>From our recent Phoenix Files posts, I think we&#39;ve demonstrated that, in most cases, we can provide a great user experience using just LiveView.</p> <p>However, there was one aspect that I could not cleanly solve and that&#39;s the problem we&#39;ll explore here.</p> <h2 id='the-problem-duplicated-logic' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#the-problem-duplicated-logic' aria-label='Anchor'></a>The Problem: Duplicated Logic</h2><p>The compromise made was to duplicate some logic in two places.</p> <ul> <li>JS command logic is executed when clicking/changing the tab selection. </li><li>Same logic is duplicated for the initial rendering of the component. </li></ul> <p>The component would be more streamlined if the initial render styled everything as &quot;unselected&quot;. For the tabs example, an un-styled initial render would look like this:</p> <p><img src="/phoenix-files/2022-10-06/tab-no-selection-displayed.webp?centered&amp;card" alt="Example of tabs with no &quot;active&quot; tab styled as highlighted." /></p> <p>Then, immediately after rendering in the DOM, it would execute the JS commands to activate and style the selected tab. That means we would have only one implementation of &quot;How do I make this look active?&quot;</p> <p>Unfortunately, that approach isn&#39;t quite available yet.</p> <h3 id='illustrating-the-problem' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#illustrating-the-problem' aria-label='Anchor'></a>Illustrating the Problem</h3><p>In an effort to keep people from getting dizzy and falling out of chairs, I turned the following block of code into a screenshot. The code itself isn&#39;t as important as recognizing a pattern. First, let&#39;s see the image then follow it up with discussion about what&#39;s important.</p> <p><img src="/phoenix-files/2022-10-06/duplicated_code_blocks.webp?centered&amp;card&amp;border" alt="Image shows a HEEx template where two sections are highlighted." /></p> <p>There are two highlighted blocks of HEEx code with sections that both use an <code>if tab[:current]</code> statement. Inside, the <code>if/else</code> statements are nearly identical lines of markup. This was the compromise made in <a href="/phoenix-files/making-tabs-mobile-friendly/">Making Tabs Mobile Friendly</a> that I didn&#39;t like making.</p> <p>These blocks of nearly duplicated lines of code only exist to handle the initial render. Separately, JS commands duplicate the logic to change the styles at runtime in response to user actions.</p> <p>Let&#39;s look at one example of the duplicated lines in greater detail. This markup sets the initial state for the <code>select</code> input displayed on mobile devices. The initial render is handled with this code.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="o">&lt;%=</span> <span class="k">if</span> <span class="n">tab</span><span class="p">[</span><span class="ss">:current</span><span class="p">]</span> <span class="k">do</span> <span class="p">%</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">option</span> <span class="n">value</span><span class="o">=</span><span class="p">{</span><span class="s2">"</span><span class="si">#{</span><span class="nv">@id</span><span class="si">}</span><span class="s2">-</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">"</span><span class="p">}</span> <span class="n">selected</span><span class="err">&gt;</span><span class="o">&lt;%=</span> <span class="n">tab</span><span class="o">.</span><span class="n">title</span> <span class="p">%</span><span class="err">&gt;</span><span class="o">&lt;/</span><span class="n">option</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="p">%</span> <span class="k">else</span> <span class="p">%</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">option</span> <span class="n">value</span><span class="o">=</span><span class="p">{</span><span class="s2">"</span><span class="si">#{</span><span class="nv">@id</span><span class="si">}</span><span class="s2">-</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">"</span><span class="p">}</span><span class="err">&gt;</span><span class="o">&lt;%=</span> <span class="n">tab</span><span class="o">.</span><span class="n">title</span> <span class="p">%</span><span class="err">&gt;</span><span class="o">&lt;/</span><span class="n">option</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="p">%</span> <span class="k">end</span> <span class="p">%</span><span class="o">&gt;</span> </code></pre></div><p>What&#39;s the difference between the two lines? If the option represents the &quot;current&quot; tab, then the <code>selected</code> attribute is included.</p> <p>Here are the JS commands that perform the same logic when a user selects a different tab.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="n">js</span> <span class="c1">#... skipped</span> <span class="o">|&gt;</span> <span class="no">JS</span><span class="o">.</span><span class="n">remove_attribute</span><span class="p">(</span><span class="s2">"selected"</span><span class="p">,</span> <span class="ss">to:</span> <span class="s2">"#</span><span class="si">#{</span><span class="n">id</span><span class="si">}</span><span class="s2">-mobile option"</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="no">JS</span><span class="o">.</span><span class="n">set_attribute</span><span class="p">({</span><span class="s2">"selected"</span><span class="p">,</span> <span class="s2">""</span><span class="p">},</span> <span class="ss">to:</span> <span class="s2">"#</span><span class="si">#{</span><span class="n">id</span><span class="si">}</span><span class="s2">-mobile option[value='</span><span class="si">#{</span><span class="n">tab_id</span><span class="si">}</span><span class="s2">'"</span><span class="p">)</span> </code></pre></div><p>Both blocks of code have the same effect but go about it differently. They manage the &quot;selected&quot; value on the <code>option</code> tag to match the &quot;current&quot; tab.</p> <p>A similar situation exists for the tab display. It sets the colors for the current tab along with adding or removing an <code>aria-current=&quot;page&quot;</code> attribute.</p> <p>That&#39;s two different ways of doing the same thing. The template version handles the initial render and the JS version is for when the user makes a change. The JS version is always required. It must be there to make it work at runtime in the browser.</p> <p>Can we somehow avoid duplicating the logic for the initial render?</p> <h2 id='mind-the-gap' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#mind-the-gap' aria-label='Anchor'></a>Mind the Gap</h2><p>I tried to execute the JS commands in <code>phx-mounted</code> or with a hook using the <code>mounted</code> callback. What happens when we execute the JS commands using the <code>phx-mounted</code> callback?</p> <p><img src="/phoenix-files/2022-10-06/mounted-callback-reloads.gif?centered&amp;card&amp;border" alt="Tab display where, when reloaded, the active styles flicker to appear after a brief delay." /></p> <p>In this animation, I&#39;m repeatedly hitting the browser refresh. The <code>phx-mounted</code> callback doesn&#39;t fire until <strong class='font-semibold text-navy'>after</strong> the websocket upgrade completes. The longer it takes for the websocket to connect (think longer distances), the more delayed the effect.</p> <p><strong class='font-semibold text-navy'>We are missing an earlier callback when the DOM is ready but before the websocket is mounted.</strong></p> <p>If we try adding an event listener to the browser&#39;s <code>DOMContentLoaded</code> event and execute the code there, it works fine on an the initial load. However, when the component is <em>dynamically</em> displayed after the initial page load, then the event does not fire.</p> <p>Hooking into the browser&#39;s <code>DOMContentLoaded</code> event isn&#39;t a general solution.</p> <h2 id='possible-solutions' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#possible-solutions' aria-label='Anchor'></a>Possible Solutions?</h2><p>We need a new callback. Not knowing what to call it, we&#39;ll just refer to it as &quot;domReady&quot;. It would fire after the component is loaded to the DOM either on an initial page load or after being patched to the DOM via LiveView and <a href="https://github.com/patrick-steele-idem/morphdom">morphdom</a>.</p> <p>Another option is for the existing <code>mounted</code> callback to be executed earlier. However, there are valid JS commands like <code>JS.push</code> that assumes a connected websocket is present.</p> <p>Perhaps there are other possible solutions?</p> <h2 id='time-to-pluck-the-a-from-petal' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#time-to-pluck-the-a-from-petal' aria-label='Anchor'></a>Time to Pluck the a From PETAL</h2><p>LiveView + JS commands and the possible sprinkling of a hook here and there is great. We can do everything we need with LiveView!</p> <p>Currently, that may mean our components duplicate some styling logic for the initial render. To improve that situation, and remove the compromise, a new callback earlier in the process that executes our JS commands is needed.</p> <p>Even without an improved callback, we&#39;ve seen that we <em>can</em> solve our front-end UI needs without bringing in extra front-end focused frameworks.</p> <p>Yup. It&#39;s time to pluck the &quot;A&quot; from PETAL.</p> <p>That means we need a new acronym to describe our default stack! What should our new, further simplified stack be called?</p> <figure class="post-cta"> <figcaption> <h1> Fly.io ❤️ Elixir</h1><p> Need a place to deploy your Phoenix LiveView app? Fly.io is a great place to deploy your applications. You can be running in minutes.</p><p><a class="button bg-white text-violet-600 hover:bg-opacity-75 hover:text-violet-700 transition-colors" href="https://fly.io/docs/elixir/"> Deploy your Phoenix app today!&nbsp;&nbsp;<span class='opacity:50'>&rarr;</span> </a></p> </figcaption><div class="image-container"> <img src="/static/images/cta-rabbit.webp" srcset="/static/images/cta-rabbit@2x.webp 2x" alt=""></div></figure></content>
</entry>
<entry>
<title>Infinitely Scroll Images in LiveView</title>
<link rel="alternate" href="https://fly.io/phoenix-files/infinitely-scroll-images-in-liveview/"/>
<id>https://fly.io/phoenix-files/infinitely-scroll-images-in-liveview/</id>
<published>2022-10-03T00:00:00+00:00</published>
<updated>2023-04-06T14:48:02+00:00</updated>
<content type="html"><p class="lead"> This is a post about how to build an infinite scrolling LiveView page that shows a list of photos. It can be used for lots more than photos, but pretty pictures are more fun to look at than a list of products. If you want to deploy your Phoenix LiveView app right now, then check out how to <a href="/docs/elixir/">get started</a>. You could be up and running in minutes.</p><p>We see plenty of examples around the web of infinite scrolling content. Phoenix LiveView gives us some nifty abilities to do this elegantly and smoothly without needing any frontend frameworks.</p> <p>In this post we&#39;re going to build a very simple infinite scroll page with LiveView, using <a href="https://tailwindcss.com">TailwindCSS</a> for the grid layout. Check out the <a href="https://infinite-scroll.fly.dev">Demo app</a> and the final code named <code>complete branch</code>. The repo&#39;s <code>main</code> branch is the starting point for this post if you want to follow along.</p> <p><em>Special thanks to <a href="https://fly.io/">fly.io</a> for the <a href="https://infinite-scroll.fly.dev">demo app</a> as well as <a href="https://pexels.com/">Pexels</a> for our test photos.</em></p> <h2 id='problem' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#problem' aria-label='Anchor'></a>Problem</h2><p>You have a project that needs to show a grid layout of images. It should allow continuous scrolling and fetch more data as the user scrolls down.</p> <p>It should look something like this:</p> <p><video title="Images being continuously loaded when scrolling down the page" src="/phoenix-files/2022-10-03/infinite-scroll-images-animated.mp4?center" autoplay="autoplay" loop="loop" muted="muted" playsinline="" disablePictureInPicture="" /></p> <p>Browsing around the web, you&#39;ve seen lots of sites that use infinite scrolling. You know it can be done. Someone suggested using a JavaScript frontend library to build this feature. While that would work, you&#39;d have to build out a paginating REST API, define how to serialize the data, and more to just to support the component.</p> <p>You&#39;re already using Phoenix and you think, &quot;I&#39;ll bet LiveView could do this well. I might even get it done faster while still delivering a smooth experience.&quot;</p> <p>Okay, you&#39;re up for it. But now the question is…</p> <p>How do we create an infinite scrolling page of images in a grid layout using LiveView?</p> <h2 id='solution' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#solution' aria-label='Anchor'></a>Solution</h2><p>There are at least 2 important parts in our solution:</p> <ul> <li>We&#39;ll use the browser&#39;s <a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API">Intersection Observer API</a> for observing scroll events and <code>phx-hook</code> to link it up. We put an element that acts as a target at the bottom of the page, then it&#39;ll trigger events. </li><li>DOM patches are done using <code>phx-update</code><code>=&quot;append&quot;</code>. This <strong class='font-semibold text-navy'>adds</strong> images to the end instead of replacing items. </li></ul> <h3 id='following-along' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#following-along' aria-label='Anchor'></a>Following Along</h3><p>If you&#39;d like to follow along, <a href="https://github.com/fly-apps/phoenix_infinite_image_scroll">clone the starter files</a> and follow the instructions in the README and join me back here.</p> <h3 id='route-for-our-page' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#route-for-our-page' aria-label='Anchor'></a>Route for Our Page</h3><p>Using the starter project, we&#39;ll replace the default route that&#39;s being used by <code>PageController</code>:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="c1"># router.ex</span> <span class="o">...</span> <span class="n">scope</span> <span class="s2">"/"</span><span class="p">,</span> <span class="no">InfiniteScrollWeb</span> <span class="k">do</span> <span class="n">pipe_through</span> <span class="ss">:browser</span> <span class="n">live</span> <span class="s2">"/"</span><span class="p">,</span> <span class="no">HomeLive</span><span class="o">.</span><span class="no">Index</span><span class="p">,</span> <span class="ss">:index</span> <span class="c1"># get "/", PageController, :index</span> <span class="k">end</span> <span class="o">...</span> </code></pre></div><h3 id='create-files-for-our-liveview-and-livecomponent' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#create-files-for-our-liveview-and-livecomponent' aria-label='Anchor'></a>Create Files for Our LiveView and LiveComponent</h3><p>Here&#39;s what we&#39;ll add inside <code>infinite_scroll_web/</code> folder:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight '><code>infinite_scroll_web/ ├── ... ├── live/ │ ├── components/ │ │ └── gallery_component.ex │ └── home_live/ │ ├── index.ex │ └── index.html.heex └── ... </code></pre></div><p>That&#39;s 3 folders and 3 files. Based on what we see here:</p> <ul> <li><code>live/</code> is where we save our LiveView/LiveComponent files. We instructed our router to point us to a LiveView page instead of a regular template. </li><li><code>components/</code> is where we save stackable elements, e.g. reusable modal. </li><li><code>home_live/</code> is where where we save our parent layout for the homepage (<code>/</code>), logic for loading the images as well as our state. </li></ul> <h4 id='code-to-add' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#code-to-add' aria-label='Anchor'></a>Code to Add</h4><p>Parent layout where our component lives:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight xml'><code><span class="c">&lt;!-- infinite_scroll_web/live/home_live/index.html.heex --&gt;</span> <span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">"my-4"</span><span class="nt">&gt;</span> <span class="err">&lt;</span>.live_component module={GalleryComponent} id="infinite-gallery-home" images={@images} page={@page} /&gt; <span class="nt">&lt;/section&gt;</span> </code></pre></div><p>Our data comes through the <code>images={@images}</code> attribute, while the <code>@page</code> assigns serves as our page number after every page load. That&#39;s 2 states that our component needs.</p> <h4 id='gallery-component' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#gallery-component' aria-label='Anchor'></a>Gallery Component</h4><p>This is a <a href="https://hexdocs.pm/phoenix_live_view/Phoenix.Component.html">Live component</a>. That means it&#39;s a reusable function that contains our HEEx (html) template.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="c1"># infinite_scroll_web/live/components/gallery_component.ex</span> <span class="k">defmodule</span> <span class="no">InfiniteScrollWeb</span><span class="o">.</span><span class="no">Components</span><span class="o">.</span><span class="no">GalleryComponent</span> <span class="k">do</span> <span class="kn">use</span> <span class="no">InfiniteScrollWeb</span><span class="p">,</span> <span class="ss">:live_component</span> <span class="k">defp</span> <span class="n">random_id</span><span class="p">,</span> <span class="k">do</span><span class="p">:</span> <span class="no">Enum</span><span class="o">.</span><span class="n">random</span><span class="p">(</span><span class="mi">1</span><span class="o">..</span><span class="mi">1_000_000</span><span class="p">)</span> <span class="k">def</span> <span class="n">render</span><span class="p">(</span><span class="n">assigns</span><span class="p">)</span> <span class="k">do</span> <span class="sx">~H""</span><span class="s2">" &lt;div&gt; &lt;div id="</span><span class="n">infinite</span><span class="o">-</span><span class="n">scroll</span><span class="o">-</span><span class="n">body</span><span class="s2">" phx-update="</span><span class="n">append</span><span class="s2">" class="</span><span class="n">grid</span> <span class="n">grid</span><span class="o">-</span><span class="n">cols</span><span class="o">-</span><span class="mi">3</span> <span class="n">gap</span><span class="o">-</span><span class="mi">2</span><span class="s2">" &gt; &lt;%= for image &lt;- @images do %&gt; &lt;img id={"</span><span class="n">image</span><span class="o">-</span><span class="c1">#{random_id()}"} src={image} /&gt;</span> <span class="o">&lt;</span><span class="p">%</span> <span class="k">end</span> <span class="p">%</span><span class="o">&gt;</span> <span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">div</span> <span class="n">id</span><span class="o">=</span><span class="s2">"infinite-scroll-marker"</span> <span class="n">phx</span><span class="o">-</span><span class="n">hook</span><span class="o">=</span><span class="s2">"InfiniteScroll"</span> <span class="n">data</span><span class="o">-</span><span class="n">page</span><span class="o">=</span><span class="p">{</span><span class="nv">@page</span><span class="p">}</span><span class="err">&gt;</span><span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span> <span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span> <span class="s2">""" end end </span></code></pre></div><p>I want to draw special attention to the following parts:</p> <ul> <li><code>phx-update=&quot;append&quot;</code> used for adding new images </li><li><code>phx-hook=&quot;InfiniteScroll&quot;</code> for detecting when we are at the bottom of the page and loading another set of images. </li><li>Notice that the div <code>phx-hook=&quot;InfiniteScroll&quot;</code> is at the bottom, it acts as a target when we scroll at the bottom. </li><li><code>phx-update</code> and <code>phx-hook</code> attributes needs an <code>id</code> attribute as well as each child elements that&#39;s using state (e.g. <code>@title, @image, etc.</code>). </li></ul> <h4 id='initial-state-and-event-handle' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#initial-state-and-event-handle' aria-label='Anchor'></a>Initial State and Event Handle</h4><p>The code below is where we have our initial state (since we don&#39;t use Ecto) and a function (<code>load-more</code>) getting the next set of images. We&#39;ll explain what they do below:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="c1"># infinite_scroll_web/live/home_live/index.ex</span> <span class="k">defmodule</span> <span class="no">InfiniteScrollWeb</span><span class="o">.</span><span class="no">HomeLive</span><span class="o">.</span><span class="no">Index</span> <span class="k">do</span> <span class="kn">use</span> <span class="no">InfiniteScrollWeb</span><span class="p">,</span> <span class="ss">:live_view</span> <span class="n">alias</span> <span class="no">InfiniteScrollWeb</span><span class="o">.</span><span class="no">Components</span><span class="o">.</span><span class="no">GalleryComponent</span> <span class="nv">@impl</span> <span class="no">true</span> <span class="k">def</span> <span class="n">mount</span><span class="p">(</span><span class="n">_params</span><span class="p">,</span> <span class="n">_session</span><span class="p">,</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">socket</span> <span class="o">|&gt;</span> <span class="n">assign</span><span class="p">(</span><span class="ss">page:</span> <span class="mi">1</span><span class="p">),</span> <span class="ss">temporary_assigns:</span> <span class="p">[</span><span class="ss">images:</span> <span class="p">[]]</span> <span class="p">}</span> <span class="k">end</span> <span class="nv">@impl</span> <span class="no">true</span> <span class="k">def</span> <span class="n">handle_event</span><span class="p">(</span><span class="s2">"load-more"</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="p">%{</span><span class="ss">assigns:</span> <span class="n">assigns</span><span class="p">}</span> <span class="o">=</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span> <span class="p">{</span><span class="ss">:noreply</span><span class="p">,</span> <span class="n">assign</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="ss">page:</span> <span class="n">assigns</span><span class="o">.</span><span class="n">page</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="n">get_images</span><span class="p">()}</span> <span class="k">end</span> <span class="k">defp</span> <span class="n">get_images</span><span class="p">(%{</span><span class="ss">assigns:</span> <span class="p">%{</span><span class="ss">page:</span> <span class="n">page</span><span class="p">}}</span> <span class="o">=</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span> <span class="n">socket</span> <span class="o">|&gt;</span> <span class="n">assign</span><span class="p">(</span><span class="ss">page:</span> <span class="n">page</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="n">assign</span><span class="p">(</span><span class="ss">images:</span> <span class="n">images</span><span class="p">())</span> <span class="k">end</span> <span class="k">defp</span> <span class="n">images</span> <span class="k">do</span> <span class="n">url</span> <span class="o">=</span> <span class="s2">"https://images.pexels.com/photos/"</span> <span class="n">query</span> <span class="o">=</span> <span class="s2">"?auto=compress&amp;cs=tinysrgbg&amp;w=600"</span> <span class="sx">~W( 2880507 13046522 13076228 13350109 13302244 12883181 12977343 13180599 12059441 6431576 10651558 5507243 13386712 13290875 13392891 13156418 8581056 13330222 10060916 8064098 )</span> <span class="o">|&gt;</span> <span class="no">Enum</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="p">(</span><span class="s2">"</span><span class="si">#{</span><span class="n">url</span><span class="si">}#{</span><span class="nv">&amp;1</span><span class="si">}</span><span class="s2">/pexels-photo-</span><span class="si">#{</span><span class="nv">&amp;1</span><span class="si">}</span><span class="s2">.webp</span><span class="si">#{</span><span class="n">query</span><span class="si">}</span><span class="s2">"</span><span class="p">))</span> <span class="o">|&gt;</span> <span class="no">Enum</span><span class="o">.</span><span class="n">shuffle</span><span class="p">()</span> <span class="k">end</span> <span class="k">end</span> </code></pre></div><p>There are a few important points we should pay attention to here:</p> <ul> <li>The <code>mount/3</code> function is called for initial page load and to establish the live socket. The <code>temporary_assigns</code><code>: [images: []]</code> tells us that the value will reset after every render. </li><li><code>handle_event/3</code> function is called from the JS file (hooks, client-side) that we will create later. The purpose of this function is to load our images. </li><li>Our list of images (data) lives in <code>images/0</code> function. </li></ul> <p>Both <code>mount/3</code> and <code>handle_event/3</code> are <a href="https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html#callbacks">callback functions</a> that&#39;s needed for our LiveView (and hook) to work.</p> <p>If you wondered by our <code>temporary_assigns</code> didn&#39;t call <code>get_images/1</code>, there&#39;s a reason for that:</p> <ul> <li>Assigns are stateful by default. Having to resend full list on every update is expensive! </li><li>Images that are saved in assigns are stored in memory (in our server) and holds it in the entire session. As your state grows, the performance of your app might be of concern here. </li><li>Also note that using temporary assigns reverts to the default value every update. </li><li>Based in the docs, <code>mount/3</code> is invoked twice: once to do the initial page load and again to establish the live socket. If we add <code>get_images/1</code> inside mount, you&#39;ll notice it&#39;ll render twice (for lack of a better term: <code>double mounting</code>). One way to mitigate this is to use <code>connected?/1</code> to check initial socket load, something like this: </li></ul> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">def</span> <span class="n">mount</span><span class="p">(</span><span class="n">_params</span><span class="p">,</span> <span class="n">_session</span><span class="p">,</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span> <span class="n">socket</span> <span class="o">=</span> <span class="n">assign</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="ss">page:</span> <span class="mi">1</span><span class="p">)</span> <span class="c1"># on initial load it'll return false,</span> <span class="c1"># then true on the next.</span> <span class="k">if</span> <span class="n">connected?</span><span class="p">(</span><span class="n">socket</span><span class="p">)</span> <span class="k">do</span> <span class="n">get_images</span><span class="p">(</span><span class="n">socket</span><span class="p">)</span> <span class="k">else</span> <span class="n">socket</span> <span class="k">end</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">socket</span><span class="p">,</span> <span class="ss">temporary_assigns:</span> <span class="p">[</span><span class="ss">images:</span> <span class="p">[]]}</span> <span class="k">end</span> </code></pre></div><h3 id='prepare-the-hook' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#prepare-the-hook' aria-label='Anchor'></a>Prepare the Hook</h3><p>In order to load images, we need client hooks. Let&#39;s add our <code>infinite_scroll.js</code> file:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight javascript'><code><span class="c1">// assets/js/infinite_scroll.js</span> <span class="k">export</span> <span class="k">default</span> <span class="nx">InfiniteScroll</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">page</span><span class="p">()</span> <span class="p">{</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">dataset</span><span class="p">.</span><span class="nx">page</span><span class="p">;},</span> <span class="nx">loadMore</span><span class="p">(</span><span class="nx">entries</span><span class="p">)</span> <span class="p">{</span> <span class="kd">const</span> <span class="nx">target</span> <span class="o">=</span> <span class="nx">entries</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span> <span class="k">if</span> <span class="p">(</span><span class="nx">target</span><span class="p">.</span><span class="nx">isIntersecting</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="p">.</span><span class="nx">pending</span> <span class="o">==</span> <span class="k">this</span><span class="p">.</span><span class="nx">page</span><span class="p">())</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">pending</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">page</span><span class="p">()</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="k">this</span><span class="p">.</span><span class="nx">pushEvent</span><span class="p">(</span><span class="dl">"</span><span class="s2">load-more</span><span class="dl">"</span><span class="p">,</span> <span class="p">{});</span> <span class="p">}</span> <span class="p">},</span> <span class="nx">mounted</span><span class="p">()</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">pending</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">page</span><span class="p">();</span> <span class="k">this</span><span class="p">.</span><span class="nx">observer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">IntersectionObserver</span><span class="p">(</span> <span class="p">(</span><span class="nx">entries</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">loadMore</span><span class="p">(</span><span class="nx">entries</span><span class="p">),</span> <span class="p">{</span> <span class="na">root</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span> <span class="c1">// window by default</span> <span class="na">rootMargin</span><span class="p">:</span> <span class="dl">"</span><span class="s2">400px</span><span class="dl">"</span><span class="p">,</span> <span class="na">threshold</span><span class="p">:</span> <span class="mf">0.1</span><span class="p">,</span> <span class="p">}</span> <span class="p">);</span> <span class="k">this</span><span class="p">.</span><span class="nx">observer</span><span class="p">.</span><span class="nx">observe</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">);</span> <span class="p">},</span> <span class="nx">destroyed</span><span class="p">()</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">observer</span><span class="p">.</span><span class="nx">unobserve</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">);</span> <span class="p">},</span> <span class="nx">updated</span><span class="p">()</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">pending</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">page</span><span class="p">();</span> <span class="p">},</span> <span class="p">};</span> </code></pre></div><p>There are at least 5 interesting things to note:</p> <ul> <li><code>page()</code> function gets the value from <code>data-page={@page}</code> attribute from <code>gallery_component.ex</code>. </li><li><code>this.pushEvent(&quot;load-more&quot;, {});</code> calls our <code>handle_event/3</code> function in <code>index.ex</code>. </li><li>The <code>root</code>, <code>rootMargin</code>, <code>threshold</code> options inside <code>mounted()</code> function tells us where to find the target viewport, margin and the percentage of the target&#39;s visibility before we load the next set of images. </li><li><code>destroyed()</code> detaches from the observed element and move on to the next one. </li><li><code>updated()</code> updates the new value of the page number. </li></ul> <h3 id='and-now-were-hook-ing' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#and-now-were-hook-ing' aria-label='Anchor'></a>And Now We’re [hook]ing</h3><p>Finally, let&#39;s import <code>infinite_scroll.js</code> file in <code>assets/js/app.js</code> and attach it in our live socket.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight javascript'><code><span class="c1">// assets/js/app.js</span> <span class="p">...</span> <span class="k">import</span> <span class="nx">topbar</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">../vendor/topbar</span><span class="dl">"</span> <span class="k">import</span> <span class="nx">InfiniteScroll</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./infinite_scroll</span><span class="dl">"</span> <span class="c1">// &lt;-- import</span> <span class="kd">let</span> <span class="nx">csrfToken</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">"</span><span class="s2">meta[name='csrf-token']</span><span class="dl">"</span><span class="p">).</span><span class="nx">getAttribute</span><span class="p">(</span><span class="dl">"</span><span class="s2">content</span><span class="dl">"</span><span class="p">)</span> <span class="kd">let</span> <span class="nx">liveSocket</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LiveSocket</span><span class="p">(</span><span class="dl">"</span><span class="s2">/live</span><span class="dl">"</span><span class="p">,</span> <span class="nx">Socket</span><span class="p">,</span> <span class="p">{</span> <span class="na">hooks</span><span class="p">:</span> <span class="p">{</span><span class="nx">InfiniteScroll</span><span class="p">},</span> <span class="c1">// &lt;-- add the hook!</span> <span class="na">params</span><span class="p">:</span> <span class="p">{</span><span class="na">_csrf_token</span><span class="p">:</span> <span class="nx">csrfToken</span><span class="p">}</span> <span class="p">})</span> <span class="p">...</span> </code></pre></div><p>We did it! We created an infinite scrolling LiveView! The JavaScript hook linked a browser feature to our LiveView in fewer than 30 lines of JS code.</p> <p>Our page should now look something like this:</p> <p><img src="/phoenix-files/2022-10-03/infinite-scroll-images-animated.gif?centered&amp;card&amp;2/3&amp;border" alt="Animated gif showing images being continuously loaded when scrolling down the page" /></p> <p>Be sure to check out the <a href="https://infinite-scroll.fly.dev/">demo</a> and the <a href="https://github.com/fly-apps/phoenix_infinite_image_scroll/tree/complete">complete source code</a>!</p> <h2 id='optionally-deploy-it-to-fly-io' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#optionally-deploy-it-to-fly-io' aria-label='Anchor'></a>Optionally Deploy It to Fly.io</h2><p>You can deploy it yourself by <a href="https://fly.io/docs/elixir/getting-started/">following this guide</a>, with the exception of adding Postgres (assuming you&#39;re using CLI with <code>fly launch</code>).</p> <h2 id='to-infinity-and-beyond' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#to-infinity-and-beyond' aria-label='Anchor'></a>&quot;To Infinity and Beyond!&quot;</h2><p>This solution works well for rendering uniformly shaped content. Aside from displaying images, this same feature could be used to show things like:</p> <ul> <li>Contacts </li><li>Products </li><li>Product reviews </li><li>Client testimonials </li><li>…and more! </li></ul> <p>What will you build with your infinitely scrolling LiveView?</p> <figure class="post-cta"> <figcaption> <h1> Fly ❤️ Elixir</h1><p> Fly is an awesome place to run your Elixir apps. Deploying, clustering, and more is supported!</p><p><a class="button bg-white text-violet-600 hover:bg-opacity-75 hover:text-violet-700 transition-colors" href="https://fly.io/docs/elixir/"> Deploy your Elixir app today!&nbsp;&nbsp;<span class='opacity:50'>&rarr;</span> </a></p> </figcaption><div class="image-container"> <img src="/static/images/cta-dog.webp" srcset="/static/images/cta-dog@2x.webp 2x" alt=""></div></figure></content>
</entry>
<entry>
<title>Testing LiveView forms</title>
<link rel="alternate" href="https://fly.io/phoenix-files/forms-testing/"/>
<id>https://fly.io/phoenix-files/forms-testing/</id>
<published>2022-09-30T00:00:00+00:00</published>
<updated>2023-04-06T14:48:02+00:00</updated>
<content type="html"><p class="lead"> This is a post about a few functions to test that our app does what we think it does when a form is submitted. If you want to deploy your Phoenix LiveView app right now, then check out how to <a href="/docs/elixir/">get started</a>. You could be up and running in minutes.</p><p><a href="https://fly.io/phoenix-files/sdeb-toggling-element/">In</a> <a href="https://fly.io/phoenix-files/liveview-multi-select/">previous</a> <a href="https://fly.io/phoenix-files/phx-trigger-action/">posts</a> we&#39;ve used forms for different purposes, but we&#39;ve never talked about how to test that our app does the right thing when a form is submitted. In this post we&#39;ll take a walk around some functions of the <a href="https://hexdocs.pm/phoenix_live_view/0.18.0/Phoenix.LiveViewTest.html">LiveViewTest</a> module that come in handy for testing forms.</p> <h2 id='testing-the-phx-submit-result' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#testing-the-phx-submit-result' aria-label='Anchor'></a>Testing the Phx-submit Result</h2><p>We can test the behavior of our LiveView when the event specified with the <code>phx-submit</code> option is handled. The <a href="https://hexdocs.pm/phoenix_live_view/0.18.0/Phoenix.LiveViewTest.html#render_submit/1">render_submit/2</a> function sends a form submit event and returns the rendered result. It is useful if we want to test the contents of our LiveView right after handling the submit event.</p> <p>For example, this form checks what happens if we submit a password-update form with a too-short password and a non-matching password confirmation:</p> <aside class="right-sidenote"> <a href="https://twitter.com/chris_mccord/status/1554478915477028864">Verified routes</a> can be used in tests too, Phoenix 1.7 will bring really cool stuff!</aside><div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code> <span class="n">test</span> <span class="s2">"Update password: renders errors with invalid data"</span><span class="p">,</span> <span class="p">%{</span><span class="ss">conn:</span> <span class="n">conn</span><span class="p">}</span> <span class="k">do</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">lv</span><span class="p">,</span> <span class="n">_html</span><span class="p">}</span> <span class="o">=</span> <span class="n">live</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="sx">~p"/users/settings"</span><span class="p">)</span> <span class="n">result</span> <span class="o">=</span> <span class="n">lv</span> <span class="o">|&gt;</span> <span class="n">form</span><span class="p">(</span><span class="s2">"#password_update_form"</span><span class="p">,</span> <span class="p">%{</span> <span class="s2">"current_password"</span> <span class="o">=&gt;</span> <span class="s2">"invalid"</span><span class="p">,</span> <span class="s2">"user"</span> <span class="o">=&gt;</span> <span class="p">%{</span> <span class="s2">"password"</span> <span class="o">=&gt;</span> <span class="s2">"too short"</span><span class="p">,</span> <span class="s2">"password_confirmation"</span> <span class="o">=&gt;</span> <span class="s2">"does not match"</span> <span class="p">}</span> <span class="p">})</span> <span class="o">|&gt;</span> <span class="n">render_submit</span><span class="p">()</span> <span class="n">assert</span> <span class="n">result</span> <span class="o">=~</span> <span class="s2">"&lt;h1&gt;Settings&lt;/h1&gt;"</span> <span class="n">assert</span> <span class="n">result</span> <span class="o">=~</span> <span class="s2">"should be at least 12 character(s)"</span> <span class="n">assert</span> <span class="n">result</span> <span class="o">=~</span> <span class="s2">"does not match password"</span> <span class="n">assert</span> <span class="n">result</span> <span class="o">=~</span> <span class="s2">"is not valid"</span> <span class="k">end</span> </code></pre></div><p>We use the <code>render_submit</code> function to try to update the user&#39;s password. After handling the submit event, we can verify that the LiveView&#39;s content contains the expected error messages by asserting the resulting content.</p> <h2 id='testing-a-form-submission-with-a-redirect' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#testing-a-form-submission-with-a-redirect' aria-label='Anchor'></a>Testing a Form Submission With a Redirect</h2><p>The <code>render_submit</code> function has two return types. We already saw the first one &mdash;the rendered content of the LiveView&mdash; but we haven&#39;t mentioned the second one; it returns a tuple of type <code>{:error, reason}</code> when the LiveView redirects after handling the <code>phx-submit</code> event.</p> <p>We can use the <a href="https://hexdocs.pm/phoenix_live_view/0.18.0/Phoenix.LiveViewTest.html#follow_redirect/3">follow_redirect/3</a> function to verify that the LiveView redirects as expected. When there is a redirect it returns a <code>{:ok, conn}</code> or <code>{:ok, live_view, html}</code> tuple depending on the redirect type we use: a regular redirect or a live redirect respectively. If there is no redirect or if it redirects to the wrong place, it raises an error.</p> <p>We can also use the resulting <code>conn</code> to verify the new rendered page content. For example, we have a LiveView to reset the user&#39;s password after receiving a reset link. If the password is successfully reset, an <code>:info</code> message is added and the user is redirected to the login page as follows:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="p">{</span><span class="ss">:noreply</span><span class="p">,</span> <span class="n">socket</span> <span class="o">|&gt;</span> <span class="n">put_flash</span><span class="p">(</span><span class="ss">:info</span><span class="p">,</span> <span class="s2">"Password reset successfully."</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="n">redirect</span><span class="p">(</span><span class="ss">to:</span> <span class="sx">~p"/users/log_in"</span><span class="p">)}</span> </code></pre></div><p>We can verify that the LiveView redirects to the correct place and it&#39;s setting the expected <code>:info</code> message:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="n">test</span> <span class="s2">"resets password once"</span><span class="p">,</span> <span class="p">%{</span><span class="ss">conn:</span> <span class="n">conn</span><span class="p">,</span> <span class="ss">token:</span> <span class="n">token</span><span class="p">,</span> <span class="ss">user:</span> <span class="n">user</span><span class="p">}</span> <span class="k">do</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">lv</span><span class="p">,</span> <span class="n">_html</span><span class="p">}</span> <span class="o">=</span> <span class="n">live</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="sx">~p"/users/reset_password/#{token}"</span><span class="p">)</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">conn</span><span class="p">}</span> <span class="o">=</span> <span class="n">lv</span> <span class="o">|&gt;</span> <span class="n">form</span><span class="p">(</span><span class="s2">"#reset_password_form"</span><span class="p">,</span> <span class="ss">user:</span> <span class="p">%{</span> <span class="s2">"password"</span> <span class="o">=&gt;</span> <span class="s2">"new valid password"</span><span class="p">,</span> <span class="s2">"password_confirmation"</span> <span class="o">=&gt;</span> <span class="s2">"new valid password"</span> <span class="p">}</span> <span class="p">)</span> <span class="o">|&gt;</span> <span class="n">render_submit</span><span class="p">()</span> <span class="c1"># {:error, {:redirect, %{to: "/users/log_in", flash: "SFMyNTY..."}}}</span> <span class="o">|&gt;</span> <span class="n">follow_redirect</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="sx">~p"/users/log_in"</span><span class="p">)</span> <span class="n">refute</span> <span class="n">get_session</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="ss">:user_token</span><span class="p">)</span> <span class="n">assert</span> <span class="n">get_flash</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="ss">:info</span><span class="p">)</span> <span class="o">=~</span> <span class="s2">"Password reset successfully"</span> <span class="n">assert</span> <span class="no">Accounts</span><span class="o">.</span><span class="n">get_user_by_email_and_password</span><span class="p">(</span><span class="n">user</span><span class="o">.</span><span class="n">email</span><span class="p">,</span> <span class="s2">"new valid password"</span><span class="p">)</span> <span class="k">end</span> </code></pre></div><p>The <code>render_submit</code> function is called and it returns an <code>{:error, redirect}</code> tuple. We pass the redirect tuple and the <code>conn</code> to <code>follow_redirect/3</code> to perform the underlying request, and the route <code>~p&quot;/users/log_in&quot;</code> to verify that it redirects to the correct place.</p> <p>Finally we use the resulting <code>conn</code> to verify that:</p> <p>1) The user wasn&#39;t logged in.</p> <p>2) The expected flash message was added.</p> <p>3) The user&#39;s password was reset.</p> <h2 id='testing-an-http-form-submission' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#testing-an-http-form-submission' aria-label='Anchor'></a>Testing an HTTP Form Submission</h2><p>In a <a href="https://fly.io/phoenix-files/phx-trigger-action/">previous post</a>, we used a form&#39;s <code>:action</code> attribute to execute a controller action from a LiveView.</p> <p>For example, we have a form to send a username and password to the <code>~p/users/log_in</code> route and save the user&#39;s data in session if the authentication is successful:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code> <span class="o">&lt;.</span><span class="n">form</span> <span class="n">id</span><span class="o">=</span><span class="s2">"login_form"</span> <span class="ss">:let=</span><span class="p">{</span><span class="n">f</span><span class="p">}</span> <span class="n">for</span><span class="o">=</span><span class="p">{</span><span class="ss">:user</span><span class="p">}</span> <span class="n">action</span><span class="o">=</span><span class="p">{</span><span class="sx">~p"/users/log_in"</span><span class="p">}</span> <span class="n">as</span><span class="o">=</span><span class="p">{</span><span class="ss">:user</span><span class="p">}</span> <span class="o">&gt;</span> <span class="o">&lt;%=</span> <span class="n">label</span> <span class="n">f</span><span class="p">,</span> <span class="ss">:email</span> <span class="p">%</span><span class="o">&gt;</span> <span class="o">&lt;%=</span> <span class="n">email_input</span> <span class="n">f</span><span class="p">,</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">required:</span> <span class="no">true</span><span class="p">,</span> <span class="ss">value:</span> <span class="nv">@email</span> <span class="p">%</span><span class="o">&gt;</span> <span class="o">&lt;%=</span> <span class="n">label</span> <span class="n">f</span><span class="p">,</span> <span class="ss">:password</span> <span class="p">%</span><span class="o">&gt;</span> <span class="o">&lt;%=</span> <span class="n">password_input</span> <span class="n">f</span><span class="p">,</span> <span class="ss">:password</span><span class="p">,</span> <span class="ss">required:</span> <span class="no">true</span> <span class="p">%</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">div</span><span class="o">&gt;</span> <span class="o">&lt;%=</span> <span class="n">submit</span> <span class="s2">"Log in"</span> <span class="p">%</span><span class="o">&gt;</span> <span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span> <span class="o">&lt;/.</span><span class="n">form</span><span class="o">&gt;</span> </code></pre></div><p>In this case, we don&#39;t have the <code>phx-submit</code> option since we don&#39;t do any validation/process inside the LiveView, but we delegate the whole login process to the <code>~p&quot;/users/log_in&quot;</code> controller action.</p> <p>In LiveView 0.18, the function <a href="https://hexdocs.pm/phoenix_live_view/0.18.0/Phoenix.LiveViewTest.html#submit_form/2">submit_form/2</a> was added to test the results of sending an HTTP request through the plug pipeline. Let&#39;s use it to test a form submission with valid login params:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="n">test</span> <span class="s2">"Login user with valid credentials"</span><span class="p">,</span> <span class="p">%{</span><span class="ss">conn:</span> <span class="n">conn</span><span class="p">}</span> <span class="k">do</span> <span class="n">password</span> <span class="o">=</span> <span class="s2">"valid_password"</span> <span class="n">user</span> <span class="o">=</span> <span class="n">user_fixture</span><span class="p">(%{</span><span class="ss">password:</span> <span class="n">password</span><span class="p">})</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">lv</span><span class="p">,</span> <span class="n">_html</span><span class="p">}</span> <span class="o">=</span> <span class="n">live</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="sx">~p"/users/log_in"</span><span class="p">)</span> <span class="n">form</span> <span class="o">=</span> <span class="n">form</span><span class="p">(</span><span class="n">lv</span><span class="p">,</span> <span class="s2">"#login_form"</span><span class="p">,</span> <span class="ss">user:</span> <span class="p">%{</span> <span class="ss">email:</span> <span class="n">user</span><span class="o">.</span><span class="n">email</span><span class="p">,</span> <span class="ss">password:</span> <span class="n">password</span><span class="p">,</span> <span class="ss">remember_me:</span> <span class="no">true</span><span class="p">})</span> <span class="n">conn</span> <span class="o">=</span> <span class="n">submit_form</span><span class="p">(</span><span class="n">form</span><span class="p">,</span> <span class="n">conn</span><span class="p">)</span> <span class="n">assert</span> <span class="n">redirected_to</span><span class="p">(</span><span class="n">conn</span><span class="p">)</span> <span class="o">==</span> <span class="sx">~p"/"</span> <span class="n">assert</span> <span class="n">get_session</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="ss">:user_token</span><span class="p">)</span> <span class="n">assert</span> <span class="n">get_flash</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="ss">:info</span><span class="p">)</span> <span class="o">=~</span> <span class="s2">"Welcome back!"</span> <span class="k">end</span> </code></pre></div><p>The <code>submit_form/2</code> function receives a form and executes the HTTP request specified in the form&#39;s <code>:action</code> attribute. Then we use the resulting <code>conn</code> to check that:</p> <p>1) This results in the right redirect.</p> <p>2) The logged user&#39;s token was added to the session.</p> <p>3) The expected flash message was returned.</p> <h2 id='triggering-the-submit-form-action-and-testing-the-results' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#triggering-the-submit-form-action-and-testing-the-results' aria-label='Anchor'></a>Triggering the Submit Form Action and Testing the Results</h2><p>In the same <a href="https://fly.io/phoenix-files/phx-trigger-action/">post</a>, we used the <code>phx-trigger-action</code> option to trigger a form <code>:action</code> only once a condition had been met. Now we&#39;ll cover how to test that the <code>phx-trigger-action</code> attribute has been set to <code>true</code>, and we&#39;ll follow the underlying HTTP request to test the action call results.</p> <p>In this test we submit the same password-update form we used at the beginning of the post, but this time we send valid params. We expect the form <code>:action</code> — in charge of updating the user&#39;s token in session — is triggered after validating that the user&#39;s password was successfully updated and setting the <code>phx-trigger-action</code> to the form:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="n">test</span> <span class="s2">"updates the user password"</span><span class="p">,</span> <span class="p">%{</span><span class="ss">conn:</span> <span class="n">conn</span><span class="p">,</span> <span class="ss">user:</span> <span class="n">user</span><span class="p">}</span> <span class="k">do</span> <span class="n">new_password</span> <span class="o">=</span> <span class="n">valid_user_password</span><span class="p">()</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">lv</span><span class="p">,</span> <span class="n">_html</span><span class="p">}</span> <span class="o">=</span> <span class="n">live</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="sx">~p"/users/settings"</span><span class="p">)</span> <span class="n">form</span> <span class="o">=</span> <span class="n">form</span><span class="p">(</span><span class="n">lv</span><span class="p">,</span> <span class="s2">"#password_update_form"</span><span class="p">,</span> <span class="p">%{</span> <span class="s2">"current_password"</span> <span class="o">=&gt;</span> <span class="n">user</span><span class="o">.</span><span class="n">password</span><span class="p">,</span> <span class="s2">"user"</span> <span class="o">=&gt;</span> <span class="p">%{</span> <span class="s2">"email"</span> <span class="o">=&gt;</span> <span class="n">user</span><span class="o">.</span><span class="n">email</span><span class="p">,</span> <span class="s2">"password"</span> <span class="o">=&gt;</span> <span class="n">new_password</span><span class="p">,</span> <span class="s2">"password_confirmation"</span> <span class="o">=&gt;</span> <span class="n">new_password</span> <span class="p">}</span> <span class="p">})</span> <span class="n">assert</span> <span class="n">render_submit</span><span class="p">(</span><span class="n">form</span><span class="p">)</span> <span class="o">=~</span> <span class="sr">~r/phx-trigger-action/</span> <span class="n">new_password_conn</span> <span class="o">=</span> <span class="n">follow_trigger_action</span><span class="p">(</span><span class="n">form</span><span class="p">,</span> <span class="n">conn</span><span class="p">)</span> <span class="n">assert</span> <span class="n">get_session</span><span class="p">(</span><span class="n">new_password_conn</span><span class="p">,</span> <span class="ss">:user_token</span><span class="p">)</span> <span class="o">!=</span> <span class="n">get_session</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="ss">:user_token</span><span class="p">)</span> <span class="n">assert</span> <span class="n">get_flash</span><span class="p">(</span><span class="n">new_password_conn</span><span class="p">,</span> <span class="ss">:info</span><span class="p">)</span> <span class="o">=~</span> <span class="s2">"Password updated successfully"</span> <span class="n">assert</span> <span class="no">Accounts</span><span class="o">.</span><span class="n">get_user_by_email_and_password</span><span class="p">(</span><span class="n">user</span><span class="o">.</span><span class="n">email</span><span class="p">,</span> <span class="n">new_password</span><span class="p">)</span> <span class="k">end</span> </code></pre></div><p>We build a form and pass it to the <code>render_submit/1</code> function, which returns the new content of our LiveView after handling the <code>phx-submit</code> event so that we can assert that the <code>phx-trigger-action</code> option is added to the form.</p> <p>Then, we execute the controller action specified in the <code>:action</code> attribute using the <a href="https://hexdocs.pm/phoenix_live_view/0.18.0/Phoenix.LiveViewTest.html#follow_trigger_action/2">follow_trigger_action/2</a> function, and we use <code>new_password_conn</code> to check that:</p> <p>1) The user&#39;s token was renewed with the new password.</p> <p>2) The expected flash message was added to the connection.</p> <p>3) The user&#39;s password was updated.</p> <figure class="post-cta"> <figcaption> <h1> Fly.io ❤️ Elixir</h1><p> Fly.io is a great way to run your Phoenix LiveView app close to your users. It&#39;s really easy to get started. You can be running in minutes.</p><p><a class="button bg-white text-violet-600 hover:bg-opacity-75 hover:text-violet-700 transition-colors" href="https://fly.io/docs/elixir/"> Deploy a Phoenix app today!&nbsp;&nbsp;<span class='opacity:50'>&rarr;</span> </a></p> </figcaption><div class="image-container"> <img src="/static/images/cta-kitty.webp" srcset="/static/images/cta-kitty@2x.webp 2x" alt=""></div></figure><h2 id='wrap-up' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#wrap-up' aria-label='Anchor'></a>Wrap-up</h2><p>In this post we used a few functions of the <code>LiveViewTest</code> module to test form submission results when we are using LiveView.</p> <p>We can use <code>render_submit</code> to test that our LiveView executes the correct logic and renders the expected results after handling the submit event that we specify with the <code>phx_submit</code> attribute. Additionally, we can use <code>follow_redirect</code> together with it for those times when we redirect to another LiveView after handling the submit event.</p> <p>We can also test the results of executing an HTTP form submission using the <code>:action</code> attribute. We use <code>submit_form</code> to test the results of sending an HTTP request through the plug pipeline, and <code>follow_trigger_action</code> to test the resulting content of the action that is executed once the <code>phx-trigger-action</code> attribute is set to true.</p> </content>
</entry>
<entry>
<title>Live sessions in action</title>
<link rel="alternate" href="https://fly.io/phoenix-files/live-session/"/>
<id>https://fly.io/phoenix-files/live-session/</id>
<published>2022-09-05T00:00:00+00:00</published>
<updated>2023-04-06T14:48:02+00:00</updated>
<content type="html"><p class="lead"> This is a post about the benefits we can get from using <code>live_session</code>, and the super powers we get from combining it with hooks. If you want to deploy your Phoenix LiveView app right now, then check out how to <a href="/docs/elixir/">get started</a>. You could be up and running in minutes.</p><p>Phoenix LiveView often makes us feel like &quot;wow, that was really fast!&quot; and that is not a coincidence. Behind <a href="https://fly.io/blog/liveview-its-alive/"><em>LiveView&#39;s magic</em></a>, there are a bunch of design decisions, but also interesting features we can use.</p> <p>Under the umbrella of LiveView navigation we have the <a href="https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.Router.html">live_session/3</a> macro to group live routes into live sessions. We can navigate between the routes in the same session over the existing websocket, without any additional HTTP request, thus making navigation between live routes even faster!</p> <p>But <code>live_session</code> also has some other interesting ramifications. Today we&#39;ll take a closer look at this feature and see that it has more going for it than is immediately obvious.</p> <h2 id='live_session-in-action' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#live_session-in-action' aria-label='Anchor'></a>Live_session in Action</h2><p>When we navigate between different pages within our application using LiveView, every time we want to mount a new root LiveView, an HTTP request is made. Then, a connection with the server is established and the LiveView to be rendered is mounted. Which means that a full page reload is being done.</p> <p>If we look at our iex console, each of these steps is described in the logs:</p> <p><img src="/phoenix-files/2022-09-05/logs.webp?card&amp;center" alt="" /></p> <p>Wouldn&#39;t it be better if we could switch between LiveViews without making any HTTP requests (saving a couple ms in the process)? That&#39;s when <code>live_session</code> comes into play!</p> <p>Let&#39;s start learning how to group different live routes using <code>live_session</code>.</p> <p>In our <code>router.ex</code> file, we define a <code>live_session</code> and give it an atom as a name:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="n">scope</span> <span class="s2">"/"</span><span class="p">,</span> <span class="no">MyAppWeb</span> <span class="k">do</span> <span class="n">pipe_through</span> <span class="ss">:browser</span> <span class="n">live_session</span> <span class="ss">:default</span> <span class="k">do</span> <span class="n">live</span> <span class="s2">"/users/register"</span><span class="p">,</span> <span class="no">UserRegistrationLive</span><span class="p">,</span> <span class="ss">:new</span> <span class="n">live</span> <span class="s2">"/users/log_in"</span><span class="p">,</span> <span class="no">UserLoginLive</span><span class="p">,</span> <span class="ss">:new</span> <span class="n">live</span> <span class="s2">"/users/reset_password"</span><span class="p">,</span> <span class="no">UserForgotPasswordLive</span><span class="p">,</span> <span class="ss">:new</span> <span class="k">end</span> <span class="k">end</span> </code></pre></div><p>This way, we can navigate between each route within our <code>:default</code> session without any additional HTTP requests, using <a href="https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.Helpers.html#live_redirect/2">live_redirect</a> in our LiveView&#39;s templates:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="o">&lt;%=</span> <span class="n">live_redirect</span> <span class="s2">"Register"</span><span class="p">,</span> <span class="ss">to:</span> <span class="s2">"/users/register"</span> <span class="p">%</span><span class="o">&gt;</span> </code></pre></div><p>Let&#39;s see it in action:</p> <p><video title="User is changing between pages and logs are printed in the iex console" src="/phoenix-files/2022-09-05/navigating_with_live_redirect.mp4?card&amp;center&amp;1/2" autoplay="autoplay" loop="loop" muted="muted" playsinline="" disablePictureInPicture="" /></p> <aside class="right-sidenote"> However, keep in mind that live navigation between LiveViews of different sessions using <code>live_redirect</code> is not possible since it will be necessary to do a full page reload, going through the plug pipeline.</aside><p>Every time we navigate through our authentication system a new LiveView is mounted, but this time, as we can see in the logs, there is no additional HTTP request!</p> <p>This is nice and fast. But the separation between routes in different sessions is where we start to see more possibilities!</p> <h2 id='attaching-hooks-to-a-group-of-routes' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#attaching-hooks-to-a-group-of-routes' aria-label='Anchor'></a>Attaching Hooks to a Group of Routes</h2><p>We can attach hooks in the mount lifecycle of each LiveView in the session just by combining the <code>live_session</code> macro with the <code>on_mount</code> callback.</p> <p>First, we define <code>on_mount</code> functions that will be invoked on our LiveView&#39;s mount. For example:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">defmodule</span> <span class="no">MyAppWeb</span><span class="o">.</span><span class="no">UserAuth</span> <span class="k">do</span> <span class="k">def</span> <span class="n">on_mount</span><span class="p">(</span><span class="ss">:default</span><span class="p">,</span> <span class="n">_params</span><span class="p">,</span> <span class="n">session</span><span class="p">,</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span> <span class="p">{</span><span class="ss">:cont</span><span class="p">,</span> <span class="n">socket</span><span class="p">}</span> <span class="k">end</span> <span class="k">def</span> <span class="n">on_mount</span><span class="p">(</span><span class="ss">:ensure_user_is_admin</span><span class="p">,</span> <span class="n">_params</span><span class="p">,</span> <span class="n">session</span><span class="p">,</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span> <span class="k">if</span> <span class="n">session</span><span class="p">[</span><span class="s2">"current_user_role"</span><span class="p">]</span> <span class="o">==</span> <span class="s2">"admin"</span> <span class="k">do</span> <span class="p">{</span><span class="ss">:cont</span><span class="p">,</span> <span class="n">socket</span><span class="p">}</span> <span class="k">else</span> <span class="p">{</span><span class="ss">:halt</span><span class="p">,</span> <span class="n">socket</span><span class="p">}</span> <span class="k">end</span> <span class="k">end</span> <span class="k">end</span> </code></pre></div><p>Our <code>:ensure_user_is_admin</code> hook stops the mounting process if the user is not an admin, and continues the process otherwise. These outcomes are accomplished by returning the tuples <code>{:halt, socket}</code> and <code>{:cont, socket}</code>, respectively.</p> <p>Once our hook is defined, we can attach it to our session by using the <code>on_mount</code> option. We pass a tuple with our module&#39;s name and the name of the hook we defined above:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="n">live_session</span> <span class="ss">:admin</span><span class="p">,</span> <span class="ss">on_mount:</span> <span class="p">{</span><span class="no">MyAppWeb</span><span class="o">.</span><span class="no">UserAuth</span><span class="p">,</span> <span class="ss">:ensure_user_is_admin</span><span class="p">}</span> <span class="k">do</span> <span class="n">live</span> <span class="s2">"/settings"</span><span class="p">,</span> <span class="no">SettingsLive</span><span class="p">,</span> <span class="ss">:edit</span> <span class="o">...</span> <span class="k">end</span> </code></pre></div><p>What if we want to attach more than one hook per session? we can do it by defining a list of them:</p> <aside class="right-sidenote"> You can also attach a specific hook to a particular LiveView, by calling it at the beginning of the LiveView definition.</aside><div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="n">live_session</span> <span class="ss">:admin</span><span class="p">,</span> <span class="ss">on_mount:</span> <span class="p">[</span> <span class="no">MyAppWeb</span><span class="o">.</span><span class="no">UserAuth</span><span class="p">,</span> <span class="p">{</span><span class="no">MyAppWeb</span><span class="o">.</span><span class="no">UserAuth</span><span class="p">,</span> <span class="ss">:mount_current_user</span><span class="p">},</span> <span class="p">{</span><span class="no">MyAppWeb</span><span class="o">.</span><span class="no">UserAuth</span><span class="p">,</span> <span class="ss">:ensure_user_is_admin</span><span class="p">}</span> <span class="p">]</span> <span class="k">do</span> <span class="n">live</span> <span class="s2">"/settings"</span><span class="p">,</span> <span class="no">SettingsLive</span><span class="p">,</span> <span class="ss">:index</span> <span class="o">...</span> <span class="k">end</span> </code></pre></div><p>Did you notice that the first element of the <code>on_mount</code> list is different? If you call a hook without specifying a name, LiveView will default to the <code>:default</code> hook.</p> <p>We can use this to add custom behavior to our routes or to define different authorization strategies.</p> <p>For example, we can protect routes from unauthenticated users; conversely we can redirect authenticated users from LiveViews that don&#39;t make sense for them (like a login page).</p> <p>Let&#39;s see how we can handle this example in a secure way.</p> <h2 id='security-considerations-for-authorization-strategies' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#security-considerations-for-authorization-strategies' aria-label='Anchor'></a>Security Considerations for Authorization Strategies</h2><p>When we have a regular web application and we want to perform authentication and authorization operations on each of the routes in a scope; we usually define plug functions with the necessary validations, then we group them into pipelines, and finally, we pipe each of the routes through those security pipelines.</p> <p>Thinking in live routes, if we want to secure each of our live routes, is it enough to use the same security pipelines we define for regular routes? Let&#39;s think about it.</p> <p>When we first mount a LiveView within a session or redirect between different sessions, an HTTP request is made. Which means, all our routes will pipe through our security pipelines. That&#39;s good!</p> <p>However, what happens when we navigate between LiveViews within the same session? The same stateful connection is used to mount the new LiveView, and no HTTP requests are made. Which means: no security pipelines at all!</p> <p><img src="/phoenix-files/2022-09-05/initial_request.webp?card&amp;center" alt="" /></p> <p><img src="/phoenix-files/2022-09-05/live_redirect.webp?card&amp;center" alt="" /></p> <p>So, if we want to secure each of the routes within a session, we must do it in another way. Fortunately, we&#39;ve already learned how to do it: we just have to define all our authorization logic inside hooks!</p> <p>Let&#39;s do it:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="n">scope</span> <span class="s2">"/"</span><span class="p">,</span> <span class="no">MyAppWeb</span> <span class="k">do</span> <span class="n">pipe_through</span> <span class="p">[</span><span class="ss">:browser</span><span class="p">,</span> <span class="ss">:redirect_if_user_is_authenticated</span><span class="p">]</span> <span class="n">live_session</span> <span class="ss">:only_unauthenticated_users</span><span class="p">,</span> <span class="ss">on_mount:</span> <span class="p">[</span> <span class="p">{</span><span class="no">MyAppWeb</span><span class="o">.</span><span class="no">UserAuth</span><span class="p">,</span> <span class="ss">:redirect_if_user_is_authenticated</span><span class="p">}</span> <span class="p">]</span> <span class="k">do</span> <span class="n">live</span> <span class="s2">"/users/register"</span><span class="p">,</span> <span class="no">UserRegistrationLive</span><span class="p">,</span> <span class="ss">:new</span> <span class="n">live</span> <span class="s2">"/users/log_in"</span><span class="p">,</span> <span class="no">UserLoginLive</span><span class="p">,</span> <span class="ss">:new</span> <span class="n">live</span> <span class="s2">"/users/reset_password"</span><span class="p">,</span> <span class="no">UserForgotPasswordLive</span><span class="p">,</span> <span class="ss">:new</span> <span class="k">end</span> <span class="n">post</span> <span class="s2">"/users/log_in"</span><span class="p">,</span> <span class="no">UserSessionController</span><span class="p">,</span> <span class="ss">:create</span> <span class="k">end</span> </code></pre></div><p>In order to secure all the routes in the <code>/</code> scope, we applied both security mechanisms we mentioned earlier. Plugs/pipelines to secure web requests, and hooks to secure each of the routes in the session, on the LiveView&#39;s mount.</p> <h2 id='using-a-different-root-layout-for-grouped-like-routes' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#using-a-different-root-layout-for-grouped-like-routes' aria-label='Anchor'></a>Using a Different Root Layout for Grouped Like Routes</h2><p>Navigating among live routes within a single live session lets you avoid the overhead of a full page reload. This prevents the root layout from changing, which you should keep in mind when grouping LiveViews into live sessions!</p> <p>Conversely, putting routes into different live sessions forces a page reload through the plug pipeline on navigation between them. This is an opportunity that <code>live_session</code> doesn&#39;t waste: it takes a <code>:root_layout</code> option to let you specify the root layout for the member LiveViews all at once.</p> <p>Let&#39;s see how we can do it:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="n">live_session</span> <span class="ss">:admin</span><span class="p">,</span> <span class="ss">root_layout:</span> <span class="p">{</span><span class="no">MyAppWeb</span><span class="o">.</span><span class="no">LayoutView</span><span class="p">,</span> <span class="s2">"root_admin.html"</span><span class="p">}</span> <span class="k">do</span> <span class="n">live</span> <span class="s2">"/users/settings"</span><span class="p">,</span> <span class="no">UserSettingsLive</span><span class="p">,</span> <span class="ss">:edit</span> <span class="k">end</span> </code></pre></div><p>This way we can customize what we show to our users. For example, we can show one navigation bar for admin users and a different one for regular users.</p> <figure class="post-cta"> <figcaption> <h1> Fly.io ❤️ Elixir</h1><p> Fly.io is a great way to run your Phoenix LiveView app close to your users. It&#39;s really easy to get started. You can be running in minutes.</p><p><a class="button bg-white text-violet-600 hover:bg-opacity-75 hover:text-violet-700 transition-colors" href="https://fly.io/docs/elixir/"> Deploy a Phoenix app today!&nbsp;&nbsp;<span class='opacity:50'>&rarr;</span> </a></p> </figcaption><div class="image-container"> <img src="/static/images/cta-cat.webp" srcset="/static/images/cta-cat@2x.webp 2x" alt=""></div></figure><h2 id='bonus-example-set-common-assigns-at-the-router-level' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#bonus-example-set-common-assigns-at-the-router-level' aria-label='Anchor'></a>Bonus Example: Set Common Assigns at the Router Level</h2><p>We can use <code>live_session</code> and <code>:on_mount</code> to set the common assigns for a group of live routes; all of this just in one place!</p> <p>Setting assigns at the router level is useful to avoid setting assigns on every LiveView or forgetting to do it in some of them. For example, we can define different hooks to set our active menu item:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">defmodule</span> <span class="no">Web</span><span class="o">.</span><span class="no">MenuAssign</span> <span class="k">do</span> <span class="nv">@moduledoc</span> <span class="sd">""" Ensures common `assigns` are applied to all LiveViews attaching this hook. """</span> <span class="kn">import</span> <span class="no">Phoenix</span><span class="o">.</span><span class="no">LiveView</span> <span class="k">def</span> <span class="n">on_mount</span><span class="p">(</span><span class="ss">:settings</span><span class="p">,</span> <span class="n">_params</span><span class="p">,</span> <span class="n">_session</span><span class="p">,</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span> <span class="p">{</span><span class="ss">:cont</span><span class="p">,</span> <span class="n">assign</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="ss">:active_item</span><span class="p">,</span> <span class="ss">:settings</span><span class="p">)}</span> <span class="k">end</span> <span class="k">def</span> <span class="n">on_mount</span><span class="p">(</span><span class="ss">:preferences</span><span class="p">,</span> <span class="n">_params</span><span class="p">,</span> <span class="n">_session</span><span class="p">,</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span> <span class="p">{</span><span class="ss">:cont</span><span class="p">,</span> <span class="n">assign</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="ss">:active_item</span><span class="p">,</span> <span class="ss">:preferences</span><span class="p">)}</span> <span class="k">end</span> <span class="k">end</span> </code></pre></div><p>Then in the router, we block off a whole section of routes and they will get the <code>:active_item</code> assign set automatically.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code> <span class="n">live_session</span> <span class="ss">:preferences</span><span class="p">,</span> <span class="ss">on_mount:</span> <span class="p">[</span> <span class="no">Web</span><span class="o">.</span><span class="no">InitAssigns</span><span class="p">,</span> <span class="p">{</span><span class="no">Web</span><span class="o">.</span><span class="no">InitAssigns</span><span class="p">,</span> <span class="ss">:require_current_user</span><span class="p">},</span> <span class="p">{</span><span class="no">Web</span><span class="o">.</span><span class="no">MenuAssign</span><span class="p">,</span> <span class="ss">:preferences</span><span class="p">}</span> <span class="p">]</span> <span class="k">do</span> <span class="n">scope</span> <span class="s2">"/preferences"</span><span class="p">,</span> <span class="ss">as:</span> <span class="ss">:preferences</span> <span class="k">do</span> <span class="n">live</span> <span class="s2">"/avatar"</span><span class="p">,</span> <span class="no">AvatarPreferenceLive</span><span class="o">.</span><span class="no">Index</span><span class="p">,</span> <span class="ss">:index</span> <span class="n">live</span> <span class="s2">"/notifications"</span><span class="p">,</span> <span class="no">NotificationsPreferenceLive</span><span class="o">.</span><span class="no">Index</span><span class="p">,</span> <span class="ss">:new</span> <span class="k">end</span> <span class="k">end</span> </code></pre></div><p>All routes within the <code>live_session :preferences</code> have set the assign <code>:active_item</code> with the value <code>:preferences</code></p> <h2 id='wrap-up' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#wrap-up' aria-label='Anchor'></a>Wrap Up</h2><p><code>live_session</code> by itself gives us faster navigation between live routes, but it gains super powers and becomes doubly useful in combination with the <code>on_mount</code> callback.</p> <p>We can use these features to mark boundaries between routes that look or behave differently. In the first case, we can define a specific root layout for a group of LiveViews; in the second one, we can use hooks to modify the behavior of a session&#39;s routes.</p> </content>
</entry>
<entry>
<title>Triggering a Phoenix controller action from a form in a LiveView</title>
<link rel="alternate" href="https://fly.io/phoenix-files/phx-trigger-action/"/>
<id>https://fly.io/phoenix-files/phx-trigger-action/</id>
<published>2022-08-16T00:00:00+00:00</published>
<updated>2023-04-06T14:48:02+00:00</updated>
<content type="html"><p class="lead"> This is a post about getting a form in a LiveView to invoke a Phoenix controller action, on your terms. If you want to deploy a Phoenix LiveView app right now, then check out how to <a href="/docs/elixir/">get started</a>. You can be up and running in minutes.</p><p>Have you ever wanted to use LiveViews for a site&#39;s authentication? Among many other implementation details, you need to save some data to identify the logged-in user. This can be a token or some unique identifier, and it needs to persist even as the user navigates around your app and different LiveViews get created and destroyed.</p> <p>The obvious solution is to store this token or unique identifier in the session. You can create a Phoenix controller with a <code>:create</code> action that generates a token, then saves it in the session using functions of the <code>Plug.Conn</code> module:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">defmodule</span> <span class="no">MyAppWeb</span><span class="o">.</span><span class="no">SessionController</span> <span class="k">do</span> <span class="kn">use</span> <span class="no">MyAppWeb</span><span class="p">,</span> <span class="ss">:controller</span> <span class="k">def</span> <span class="n">create</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="p">%{</span><span class="s2">"user"</span> <span class="o">=&gt;</span> <span class="n">user</span><span class="p">})</span> <span class="k">do</span> <span class="n">token</span> <span class="o">=</span> <span class="no">Accounts</span><span class="o">.</span><span class="n">generate_user_session_token</span><span class="p">(</span><span class="n">user</span><span class="p">)</span> <span class="n">conn</span> <span class="o">|&gt;</span> <span class="n">put_session</span><span class="p">(</span><span class="ss">:user_token</span><span class="p">,</span> <span class="n">token</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="n">redirect</span><span class="p">(</span><span class="ss">to:</span> <span class="n">signed_in_path</span><span class="p">(</span><span class="n">conn</span><span class="p">))</span> <span class="k">end</span> <span class="k">end</span> </code></pre></div><p>You continue building your authentication system and decide that once a user signs up, using a form in a LiveView, they should be automatically logged in. This means saving the session data from within the LiveView&mdash;and only after the new user is finished signing up and you&#39;re happy for them to have access to the app.</p> <h2 id='problem' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#problem' aria-label='Anchor'></a>Problem</h2><p>The LiveView lifecycle starts as an HTTP request, but then a WebSocket connection is established with the server, and all communication between your LiveView and the server takes place over that connection.</p> <p>Why is this important? Because session data is stored in cookies, and cookies are only exchanged during an HTTP request/response. So writing data in session can&#39;t be done directly from a LiveView.</p> <p>Can we call the controller&#39;s <code>:create</code> action from our LiveView form, and have it write the data for us? And can we make sure that happens only once the new user&#39;s registration process is complete: their data validated and saved?</p> <h2 id='solution' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#solution' aria-label='Anchor'></a>Solution</h2><p>We can make an HTTP route call to a controller when the form is submitted by adding the <code>:action</code> attribute to our forms, specifying the URL we want to use.</p> <p>And the <a href="https://hexdocs.pm/phoenix_live_view/form-bindings.html#submitting-the-form-action-over-http">:phx-trigger-action</a> attribute allows us to make form submission conditional on some criteria.</p> <p>In this case, we want to trigger the form submit, and log the new user in, after saving their registration data in the database without errors; if this doesn&#39;t happen, the action should not trigger, and instead we need to keep our LiveView connected and display any generated errors.</p> <p>Let&#39;s see how to do it.</p> <p>Let&#39;s start by defining, in our LiveView, the form that we&#39;ll use to fill out the user&#39;s data:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">def</span> <span class="n">render</span><span class="p">(</span><span class="n">assigns</span><span class="p">)</span> <span class="k">do</span> <span class="sx">~H""</span><span class="s2">" &lt;h1&gt;Register&lt;/h1&gt; &lt;.form id="</span><span class="n">registration_form</span><span class="s2">" :let={f} for={@changeset} as={:user} &gt; &lt;%= label f, :email %&gt; &lt;%= email_input f, :email, required: true %&gt; &lt;%= error_tag f, :email %&gt; &lt;%= label f, :password %&gt; &lt;%= password_input f, :password, required: true %&gt; &lt;%= error_tag f, :password %&gt; &lt;div&gt; &lt;%= submit "</span><span class="no">Register</span><span class="s2">" %&gt; &lt;/div&gt; &lt;/.form&gt; """</span> <span class="k">end</span> </code></pre></div><p>This form uses a changeset to build the necessary inputs. In this case, just a couple of inputs to save the user&#39;s email and password.</p> <p>We define the changeset and add it to the LiveView assigns:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">def</span> <span class="n">mount</span><span class="p">(</span><span class="n">_params</span><span class="p">,</span> <span class="n">_session</span><span class="p">,</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span> <span class="n">changeset</span> <span class="o">=</span> <span class="no">Accounts</span><span class="o">.</span><span class="n">change_user_registration</span><span class="p">(%</span><span class="no">User</span><span class="p">{})</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">assign</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="ss">changeset:</span> <span class="n">changeset</span><span class="p">)}</span> <span class="k">end</span> </code></pre></div><p>We also add a couple of callbacks: <code>validate</code> to validate the data that the user enters into the form, and show us live errors if needed, and <code>save</code> to persist the user&#39;s information into the database.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">def</span> <span class="n">handle_event</span><span class="p">(</span><span class="s2">"validate"</span><span class="p">,</span> <span class="p">%{</span><span class="s2">"user"</span> <span class="o">=&gt;</span> <span class="n">user_params</span><span class="p">},</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span> <span class="n">changeset</span> <span class="o">=</span> <span class="no">Accounts</span><span class="o">.</span><span class="n">change_user_registration</span><span class="p">(%</span><span class="no">User</span><span class="p">{},</span> <span class="n">user_params</span><span class="p">)</span> <span class="p">{</span><span class="ss">:noreply</span><span class="p">,</span> <span class="n">assign</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="ss">changeset:</span> <span class="n">changeset</span><span class="p">}</span> <span class="k">end</span> <span class="k">def</span> <span class="n">handle_event</span><span class="p">(</span><span class="s2">"save"</span><span class="p">,</span> <span class="p">%{</span><span class="s2">"user"</span> <span class="o">=&gt;</span> <span class="n">user_params</span><span class="p">},</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span> <span class="k">case</span> <span class="no">Accounts</span><span class="o">.</span><span class="n">register_user</span><span class="p">(</span><span class="n">user_params</span><span class="p">)</span> <span class="k">do</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">user</span><span class="p">}</span> <span class="o">-&gt;</span> <span class="n">changeset</span> <span class="o">=</span> <span class="no">Accounts</span><span class="o">.</span><span class="n">change_user_registration</span><span class="p">(</span><span class="n">user</span><span class="p">)</span> <span class="p">{</span><span class="ss">:noreply</span><span class="p">,</span> <span class="n">assign</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="ss">changeset:</span> <span class="n">changeset</span><span class="p">)}</span> <span class="p">{</span><span class="ss">:error</span><span class="p">,</span> <span class="p">%</span><span class="no">Ecto</span><span class="o">.</span><span class="no">Changeset</span><span class="p">{}</span> <span class="o">=</span> <span class="n">changeset</span><span class="p">}</span> <span class="o">-&gt;</span> <span class="p">{</span><span class="ss">:noreply</span><span class="p">,</span> <span class="n">assign</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="ss">:changeset</span><span class="p">,</span> <span class="n">changeset</span><span class="p">)}</span> <span class="k">end</span> <span class="k">end</span> </code></pre></div><p>We add three more attributes to our form: <code>:phx-submit</code>, <code>:phx-change</code> and <code>:action</code>. The first two invoke the callbacks we defined above, and <code>:action</code> executes our controller&#39;s <code>:create</code> action using the URL <code>users/log_in/</code>.</p> <aside class="right-sidenote"> Spoiler alert! <a href="https://twitter.com/chris_mccord/status/1554478915477028864">Verified routes coming soon</a></aside><div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="o">&lt;.</span><span class="n">form</span> <span class="n">id</span><span class="o">=</span><span class="s2">"registration_form"</span> <span class="ss">:let=</span><span class="p">{</span><span class="n">f</span><span class="p">}</span> <span class="n">for</span><span class="o">=</span><span class="p">{</span><span class="nv">@changeset</span><span class="p">}</span> <span class="n">as</span><span class="o">=</span><span class="p">{</span><span class="ss">:user</span><span class="p">}</span> <span class="n">phx</span><span class="o">-</span><span class="n">submit</span><span class="o">=</span><span class="s2">"save"</span> <span class="n">phx</span><span class="o">-</span><span class="n">change</span><span class="o">=</span><span class="s2">"validate"</span> <span class="n">action</span><span class="o">=</span><span class="p">{</span><span class="sx">~p"/users/log_in/"</span><span class="p">}</span> <span class="c1">#{Routes.session_path(@socket, :create)}</span> <span class="o">&gt;</span> </code></pre></div><p>With this, we get the <code>:create</code> action to run once the form is submitted; however, the action will run happily even if there was an error saving the user data. We don&#39;t want that!</p> <p>This is where the <code>:phx-trigger-action</code> attribute comes into play. Let&#39;s use it to submit the form only if the user has been successfully saved to the database.</p> <p>First we add the <code>phx-trigger-action</code> attribute to the form:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="o">&lt;.</span><span class="n">form</span> <span class="n">id</span><span class="o">=</span><span class="s2">"registration_form"</span> <span class="ss">:let=</span><span class="p">{</span><span class="n">f</span><span class="p">}</span> <span class="n">for</span><span class="o">=</span><span class="p">{</span><span class="nv">@changeset</span><span class="p">}</span> <span class="n">as</span><span class="o">=</span><span class="p">{</span><span class="ss">:user</span><span class="p">}</span> <span class="n">phx</span><span class="o">-</span><span class="n">submit</span><span class="o">=</span><span class="s2">"save"</span> <span class="n">phx</span><span class="o">-</span><span class="n">change</span><span class="o">=</span><span class="s2">"validate"</span> <span class="n">action</span><span class="o">=</span><span class="p">{</span><span class="sx">~p"/users/log_in/"</span><span class="p">}</span> <span class="c1">#{Routes.session_path(@socket, :create)}</span> <span class="n">phx</span><span class="o">-</span><span class="n">trigger</span><span class="o">-</span><span class="n">action</span><span class="o">=</span><span class="p">{</span><span class="nv">@trigger_submit</span><span class="p">}</span> <span class="o">&gt;</span> </code></pre></div><p>You can probably see where this is going: <code>phx-trigger-action</code> takes a boolean value, so when <code>@trigger_submit</code> is <code>true</code>, the form will get submitted and the action defined in our <code>action</code> attribute will be triggered. Let&#39;s add <code>trigger_submit</code> to the LiveView assigns:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">def</span> <span class="n">mount</span><span class="p">(</span><span class="n">_params</span><span class="p">,</span> <span class="n">_session</span><span class="p">,</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span> <span class="n">changeset</span> <span class="o">=</span> <span class="no">Accounts</span><span class="o">.</span><span class="n">change_user_registration</span><span class="p">(%</span><span class="no">User</span><span class="p">{})</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">assign</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="ss">changeset:</span> <span class="n">changeset</span><span class="p">,</span> <span class="ss">trigger_submit:</span> <span class="no">false</span><span class="p">)}</span> <span class="k">end</span> </code></pre></div><p>We change <code>trigger_submit</code> to <code>true</code> only if the user has been saved correctly:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">def</span> <span class="n">handle_event</span><span class="p">(</span><span class="s2">"save"</span><span class="p">,</span> <span class="p">%{</span><span class="s2">"user"</span> <span class="o">=&gt;</span> <span class="n">user_params</span><span class="p">},</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span> <span class="k">case</span> <span class="no">Accounts</span><span class="o">.</span><span class="n">register_user</span><span class="p">(</span><span class="n">user_params</span><span class="p">)</span> <span class="k">do</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">user</span><span class="p">}</span> <span class="o">-&gt;</span> <span class="n">changeset</span> <span class="o">=</span> <span class="no">Accounts</span><span class="o">.</span><span class="n">change_user_registration</span><span class="p">(</span><span class="n">user</span><span class="p">)</span> <span class="n">socket</span> <span class="o">=</span> <span class="n">assign</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="ss">changeset:</span> <span class="n">changeset</span><span class="p">,</span> <span class="ss">trigger_submit:</span> <span class="no">true</span><span class="p">)</span> <span class="p">{</span><span class="ss">:noreply</span><span class="p">,</span> <span class="n">socket</span><span class="p">}</span> <span class="p">{</span><span class="ss">:error</span><span class="p">,</span> <span class="p">%</span><span class="no">Ecto</span><span class="o">.</span><span class="no">Changeset</span><span class="p">{}</span> <span class="o">=</span> <span class="n">changeset</span><span class="p">}</span> <span class="o">-&gt;</span> <span class="p">{</span><span class="ss">:noreply</span><span class="p">,</span> <span class="n">assign</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="ss">:changeset</span><span class="p">,</span> <span class="n">changeset</span><span class="p">)}</span> <span class="k">end</span> <span class="k">end</span> </code></pre></div><p>Now the <code>:create</code> action is only executed once the user is saved correctly. In case of error, the LiveView shows the registration errors to the user.</p> <figure class="post-cta"> <figcaption> <h1> Fly.io ❤️ Elixir</h1><p> Fly.io is a great way to run your Phoenix LiveView app close to your users. It&#39;s really easy to get started. You can be running in minutes.</p><p><a class="button bg-white text-violet-600 hover:bg-opacity-75 hover:text-violet-700 transition-colors" href="https://fly.io/docs/elixir/"> Deploy a Phoenix app today!&nbsp;&nbsp;<span class='opacity:50'>&rarr;</span> </a></p> </figcaption><div class="image-container"> <img src="/static/images/cta-rabbit.webp" srcset="/static/images/cta-rabbit@2x.webp 2x" alt=""></div></figure><h2 id='possible-errors-and-how-to-fix-them' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#possible-errors-and-how-to-fix-them' aria-label='Anchor'></a>Possible Errors and How to Fix Them</h2><p>Let&#39;s prevent two common errors that can trip us up when using the <code>phx-trigger-action</code> option.</p> <h3 id='form-parameters-are-empty-when-phx-trigger-action-is-triggered' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#form-parameters-are-empty-when-phx-trigger-action-is-triggered' aria-label='Anchor'></a>Form Parameters Are Empty When Phx-trigger-action Is Triggered</h3><p>The first error is very specific to our use case and is related to our form fields: When the form is submitted and the form&#39;s parameters reach the controller, the parameter that stores the user&#39;s password is empty, even though we&#39;re sure we&#39;ve entered a value.</p> <p>This is related to the password type input and its <a href="https://hexdocs.pm/phoenix_live_view/form-bindings.html#password-inputs">behavior</a>. All we have to do is explicitly give the input a value by adding the <code>value</code> option like so:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="o">&lt;%=</span> <span class="n">password_input</span> <span class="n">f</span><span class="p">,</span> <span class="ss">:password</span><span class="p">,</span> <span class="ss">required:</span> <span class="no">true</span><span class="p">,</span> <span class="ss">value:</span> <span class="n">input_value</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="ss">:password</span><span class="p">)</span> <span class="p">%</span><span class="o">&gt;</span> </code></pre></div><p>With this simple step, the value of our password input will be sent in the parameters of the form!</p> <h3 id='the-controller-route-is-not-found-even-though-it-is-defined-in-the-router' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#the-controller-route-is-not-found-even-though-it-is-defined-in-the-router' aria-label='Anchor'></a>The Controller Route Is Not Found, Even Though It Is Defined in the Router</h3><p>The second mystifying error is this: <code>phx-trigger-action</code> tries to execute the controller action we specified, but the route cannot be found on the router, even when it is the correct one.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="p">[</span><span class="n">debug</span><span class="p">]</span> <span class="o">**</span> <span class="p">(</span><span class="no">Phoenix</span><span class="o">.</span><span class="no">Router</span><span class="o">.</span><span class="no">NoRouteError</span><span class="p">)</span> <span class="n">no</span> <span class="n">route</span> <span class="n">found</span> <span class="n">for</span> <span class="no">PUT</span> <span class="o">/</span><span class="n">users</span><span class="o">/</span><span class="n">log_in</span> <span class="p">(</span><span class="no">MyAppWeb</span><span class="o">.</span><span class="no">Router</span><span class="p">)</span> </code></pre></div><p>In this case, it&#39;s related to how our changeset is interpreted when the form and its attributes are being built.</p> <p>In our example, we insert the user into the database just before submitting the form, so our changeset contains the data of a record that already exists. Phoenix thinks that we&#39;re trying to modify that record; that&#39;s when the form is built using the <code>put</code> method instead of the <code>post</code> method.</p> <p>The solution is simple; we just have to add the option <code>method=&quot;post&quot;</code> to our form&#39;s definition.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="o">&lt;.</span><span class="n">form</span> <span class="n">id</span><span class="o">=</span><span class="s2">"registration_form"</span> <span class="ss">:let=</span><span class="p">{</span><span class="n">f</span><span class="p">}</span> <span class="n">for</span><span class="o">=</span><span class="p">{</span><span class="nv">@changeset</span><span class="p">}</span> <span class="n">as</span><span class="o">=</span><span class="p">{</span><span class="ss">:user</span><span class="p">}</span> <span class="n">phx</span><span class="o">-</span><span class="n">submit</span><span class="o">=</span><span class="s2">"save"</span> <span class="n">phx</span><span class="o">-</span><span class="n">change</span><span class="o">=</span><span class="s2">"validate"</span> <span class="n">action</span><span class="o">=</span><span class="p">{</span><span class="sx">~p"/users/log_in/"</span><span class="p">}</span> <span class="c1">#{Routes.session_path(@socket, :create)}</span> <span class="n">phx</span><span class="o">-</span><span class="n">trigger</span><span class="o">-</span><span class="n">action</span><span class="o">=</span><span class="p">{</span><span class="nv">@trigger_submit</span><span class="p">}</span> <span class="n">method</span><span class="o">=</span><span class="s2">"post"</span> <span class="o">&gt;</span> </code></pre></div><h2 id='discussion' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#discussion' aria-label='Anchor'></a>Discussion</h2><p>The <code>phx-trigger-action</code> option is ideal when you need to do final validations just before submitting form data via an HTTP request from a LiveView.</p> <p>It&#39;s also so simple to use that you&#39;d think nothing could go wrong. However, as we&#39;ve seen, headaches can arise from the underlying form behavior, and they can be tricky to debug. We&#39;ve highlighted two such problems to help you use the <code>phx-trigger-action</code> option painlessly.</p> </content>
</entry>
<entry>
<title>Making Tabs Mobile Friendly</title>
<link rel="alternate" href="https://fly.io/phoenix-files/making-tabs-mobile-friendly/"/>
<id>https://fly.io/phoenix-files/making-tabs-mobile-friendly/</id>
<published>2022-08-08T00:00:00+00:00</published>
<updated>2023-04-06T14:48:02+00:00</updated>
<content type="html"><p class="lead"> This is a post about making a Tailwind styled tabs component play nicely on mobile without using Alpine.js or other client-side frameworks. If you want to deploy your Phoenix LiveView app right now, then check out how to <a href="/docs/elixir/">get started</a>. You could be up and running in minutes.</p><p>This recipe creates a <a href="https://tailwindui.com/components/application-ui/navigation/tabs#component-de43ff625fee032d234b14989e88422f">Tailwind UI styled tab component</a> that gracefully switches to an HTML <code>select</code> input when viewed on smaller screens. It doesn&#39;t use <a href="https://alpinejs.dev/">Alpine.js</a> or other client-side javascript frameworks for managing the UI. It is built as a client-side, reusable, LiveView component.</p> <p>The finished component works and looks like this:</p> <p><img src="/phoenix-files/2022-08-08/finished-working-tab-behavior.gif?center&amp;card&amp;border" alt="Finished working tab behavior animation" /></p> <p><strong class='font-semibold text-navy'>Why is this tricky?</strong></p> <p>The trick bit is that tab titles can be long. When displayed on a narrow mobile device, it can look ugly. <a href="https://tailwindui.com/components/application-ui/navigation/tabs">Tailwind UI</a> styled tabs solve this by using browser media queries to dynamically switch to an HTML <code>select</code> input. The <em>extra</em> tricky bit comes when rotating a device from wide to narrow and the currently selected tab needs to now show the appropriate active select option. So the HTML <code>select</code> and the tabs need to be kept in selection sync even when hidden.</p> <p>Well, we&#39;re going to figure how to build tabs that are mobile friendly in this way and work entirely client-side in the browser.</p> <p>The template code to create this component looks like this.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight html'><code><span class="nt">&lt;</span><span class="err">.</span><span class="na">tab_list</span> <span class="na">id=</span><span class="s">"my-tabs"</span><span class="nt">&gt;</span> <span class="nt">&lt;:tab</span> <span class="na">title=</span><span class="s">"Tab 1"</span> <span class="na">current</span><span class="nt">&gt;</span> <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">"mt-2"</span><span class="nt">&gt;</span>Lorem ipsum.<span class="nt">&lt;/p&gt;</span> <span class="nt">&lt;/:tab&gt;</span> <span class="nt">&lt;:tab</span> <span class="na">title=</span><span class="s">"Tab 2"</span><span class="nt">&gt;</span> <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">"mt-2"</span><span class="nt">&gt;</span>Lorem 2 ipsum.<span class="nt">&lt;/p&gt;</span> <span class="nt">&lt;/:tab&gt;</span> <span class="nt">&lt;:tab</span> <span class="na">title=</span><span class="s">"Tab3"</span><span class="nt">&gt;</span> <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">"mt-2"</span><span class="nt">&gt;</span>Lorem 3 ipsum.<span class="nt">&lt;/p&gt;</span> <span class="nt">&lt;/:tab&gt;</span> <span class="nt">&lt;/</span><span class="err">.</span><span class="nt">tab_list&gt;</span> </code></pre></div><p>If this interests you, read on!</p> <h2 id='backing-up-to-answer-the-why' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#backing-up-to-answer-the-why' aria-label='Anchor'></a>Backing Up to Answer the &quot;Why?&quot;</h2><p>Why do it this way? Why do it without a client-side JS solution like Alpine.js? Let&#39;s talk through the thought process that brought us here.</p> <h3 id='phx-click-approach' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#phx-click-approach' aria-label='Anchor'></a><code>phx-click</code> Approach</h3><p>The first pass solution at a tabs component used <code>phx-click</code> attributes to notify the server that a tab selection changed. This worked well and was really easy.</p> <p>Problems:</p> <ul> <li>Didn&#39;t work well for the mobile-friendly <code>select</code> input. Keeping them in sync means going through the server. </li><li>Click events require talking to the server. </li></ul> <p>The real problem here is that the server doesn&#39;t <em>need</em> to be involved with this UI-only change.</p> <p>Can we change tabs without involving the server?</p> <h3 id='alpine-js-approach' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#alpine-js-approach' aria-label='Anchor'></a><a href="https://alpinejs.dev/">Alpine.js</a> Approach</h3><p>There really was no reason to involve the server for changing active tabs. For this use case, it really should remain a client-side only feature.</p> <p>The <strong class='font-semibold text-navy'>PETAL</strong> stack uses <a href="https://alpinejs.dev/">Alpine.js</a> for client-side Javascript interactions. Here&#39;s a list of the different parts of PETAL:</p> <ul> <li><a href="https://www.phoenixframework.org/"><strong class='font-semibold text-navy'>P</strong>hoenix</a> </li><li><a href="https://elixir-lang.org/"><strong class='font-semibold text-navy'>E</strong>lixir</a> </li><li><a href="https://tailwindcss.com/"><strong class='font-semibold text-navy'>T</strong>ailwind</a> </li><li><a href="https://alpinejs.dev/"><strong class='font-semibold text-navy'>A</strong>lpine.js</a> </li><li><a href="https://github.com/phoenixframework/phoenix_live_view"><strong class='font-semibold text-navy'>L</strong>iveView</a> </li></ul> <p>This means the default tool to reach for here is <a href="https://alpinejs.dev/">Alpine.js</a>. If you&#39;ve ever inspected the Tailwind UI components in the browser, they are implemented using Alpine.js. That&#39;s another check in the Alpine column!</p> <p>But I don&#39;t want to use Alpine.js. It&#39;s nothing against Alpine.js! It&#39;s a great framework. Using Alpine.js adds a JS dependency to any project wanting to use this tabs component. This means it&#39;s less portable between all my great unicorn app projects.</p> <p>Can we add the client-side tabs without using Alpine.js?</p> <h3 id='hooks-approach' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#hooks-approach' aria-label='Anchor'></a>Hooks Approach</h3><p>Phoenix LiveView has a feature called <a href="https://hexdocs.pm/phoenix_live_view/js-interop.html#client-hooks-via-phx-hook">client hooks</a>. This is probably the way we <em>should</em> do it. It offers the most power and versatility.</p> <p>Why not do it this way?</p> <p>A major benefit to me of the <strong class='font-semibold text-navy'>PETAL</strong> stack is &quot;co-location&quot;.</p> <p>With a LiveView component, the HTML markup and rendering logic are all in one place. Additionally, the styles are in the markup (Tailwind CSS) and any custom JS can be included in the HTML using Alpine.js.</p> <p>We get nifty benefits from &quot;co-location&quot;. Everything is one place. The benefit is a mental one mostly. It&#39;s the benefit of not needing to jump between multiple CSS files, template markup, a separate code file and then separate JS file(s).</p> <p>Co-location brings a simplification and organizational benefit. It keeps my brain from melting down holding all that in <em>addition</em> to the problem I&#39;m trying to solve.</p> <p>The reason not to use the hook approach here is because I want to see if I can keep the benefits of co-location without using Alpine.js for the JS part.</p> <p>Can we get the JS behavior we want without using hooks?</p> <h3 id='js-commands-approach' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#js-commands-approach' aria-label='Anchor'></a><a href="https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.JS.html#content">JS Commands</a> Approach</h3><p>LiveView&#39;s JS commands are a recent addition (v0.17+). They provide commands for executing JavaScript utility operations on the client.</p> <p>This is where Berenice&#39;s excellent post <a href="../tabs-with-js-commands/">Client-Side Tabs in LiveView With JS Commands</a> came in. It was a great all-client-side solution using JS commands! Boom! Done!</p> <p>Problem:</p> <ul> <li>It didn&#39;t include the <code>select</code> mobile behavior. That&#39;s a major goal for this particular component. </li></ul> <p>That shouldn&#39;t be hard to add, right?</p> <p><strong class='font-semibold text-navy'>Ahem.</strong></p> <p>That&#39;s where this post comes in. With help, we got it solved. We&#39;ll cover what was learned along the way and suggest possible improvements.</p> <h2 id='problem-being-solved' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#problem-being-solved' aria-label='Anchor'></a>Problem Being Solved</h2><p>Let&#39;s clearly define the problem so we know when it&#39;s solved.</p> <p>How do I create a Tailwind UI styled tab component that switches to an HTML <code>select</code> input for mobile formats using only LiveView?</p> <p>Constraints:</p> <ul> <li>Don&#39;t involve the server for something that is client-only UI. </li><li>Avoid adding a Javascript dependency like <a href="https://alpinejs.dev/">Alpine.js</a>. </li><li>Don&#39;t use <a href="https://hexdocs.pm/phoenix_live_view/js-interop.html#client-hooks-via-phx-hook">hooks</a> in order to keep co-location benefits. </li><li>Do it using only LiveView provided features. </li></ul> <p>So how do we actually <em>do</em> that?</p> <h2 id='solution' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#solution' aria-label='Anchor'></a>Solution</h2><p>NOTE: This builds on Berenice&#39;s excellent post <a href="../tabs-with-js-commands/">Client-Side Tabs in LiveView With JS Commands</a>.</p> <p>There are two parts to the solution. The LiveView component code and 4 lines of extra javascript (which comes in later).</p> <p>The following Elixir code defines a stateless function component for our tabs. It supports a slot named <code>tab</code> for defining a tab&#39;s content. We&#39;ll talk a bit more about it after the code. You&#39;ll also notice the private function <code>show_tab</code> that builds the JS commands for activating a tab.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">defmodule</span> <span class="no">Web</span><span class="o">.</span><span class="no">Components</span> <span class="k">do</span> <span class="kn">import</span> <span class="no">Phoenix</span><span class="o">.</span><span class="no">LiveView</span><span class="p">,</span> <span class="ss">only:</span> <span class="p">[</span><span class="ss">assign:</span> <span class="mi">3</span><span class="p">,</span> <span class="ss">assign_new:</span> <span class="mi">3</span><span class="p">],</span> <span class="ss">warn:</span> <span class="no">false</span> <span class="kn">import</span> <span class="no">Phoenix</span><span class="o">.</span><span class="no">LiveView</span><span class="o">.</span><span class="no">Helpers</span> <span class="n">alias</span> <span class="no">Phoenix</span><span class="o">.</span><span class="no">LiveView</span><span class="o">.</span><span class="no">JS</span> <span class="k">def</span> <span class="n">tab_list</span><span class="p">(</span><span class="n">assigns</span><span class="p">)</span> <span class="k">do</span> <span class="n">assigns</span> <span class="o">=</span> <span class="n">assigns</span> <span class="o">|&gt;</span> <span class="n">assign_new</span><span class="p">(</span><span class="ss">:active_class</span><span class="p">,</span> <span class="k">fn</span> <span class="o">-&gt;</span> <span class="s2">"border-indigo-500 text-indigo-600"</span> <span class="k">end</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="n">assign_new</span><span class="p">(</span><span class="ss">:inactive_class</span><span class="p">,</span> <span class="k">fn</span> <span class="o">-&gt;</span> <span class="s2">"border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"</span> <span class="k">end</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="n">assign_new</span><span class="p">(</span><span class="ss">:class</span><span class="p">,</span> <span class="k">fn</span> <span class="o">-&gt;</span> <span class="s2">""</span> <span class="k">end</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="n">assign_new</span><span class="p">(</span><span class="ss">:tab</span><span class="p">,</span> <span class="k">fn</span> <span class="o">-&gt;</span> <span class="p">[]</span> <span class="k">end</span><span class="p">)</span> <span class="sx">~H""</span><span class="s2">" &lt;div id={@id} class={@class}&gt; &lt;div class="</span><span class="ss">sm:</span><span class="n">hidden</span><span class="s2">"&gt; &lt;label for={"</span><span class="c1">#{@id}-mobile"} class="sr-only"&gt;Select a tab&lt;/label&gt;</span> <span class="o">&lt;</span><span class="n">select</span> <span class="n">id</span><span class="o">=</span><span class="p">{</span><span class="s2">"</span><span class="si">#{</span><span class="nv">@id</span><span class="si">}</span><span class="s2">-mobile"</span><span class="p">}</span> <span class="n">name</span><span class="o">=</span><span class="s2">"tabs"</span> <span class="n">phx</span><span class="o">-</span><span class="n">change</span><span class="o">=</span><span class="p">{</span><span class="no">JS</span><span class="o">.</span><span class="n">dispatch</span><span class="p">(</span><span class="s2">"js:tab-selected"</span><span class="p">,</span> <span class="ss">detail:</span> <span class="p">%{</span><span class="ss">id:</span> <span class="s2">"</span><span class="si">#{</span><span class="nv">@id</span><span class="si">}</span><span class="s2">-mobile"</span><span class="p">})}</span> <span class="n">class</span><span class="o">=</span><span class="s2">"block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md"</span> <span class="o">&gt;</span> <span class="o">&lt;%=</span> <span class="n">for</span> <span class="p">{</span><span class="n">tab</span><span class="p">,</span> <span class="n">i</span><span class="p">}</span> <span class="o">&lt;-</span> <span class="no">Enum</span><span class="o">.</span><span class="n">with_index</span><span class="p">(</span><span class="nv">@tab</span><span class="p">)</span> <span class="k">do</span> <span class="p">%</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">option</span> <span class="n">value</span><span class="o">=</span><span class="p">{</span><span class="s2">"</span><span class="si">#{</span><span class="nv">@id</span><span class="si">}</span><span class="s2">-</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">"</span><span class="p">}</span><span class="err">&gt;</span><span class="o">&lt;%=</span> <span class="n">tab</span><span class="o">.</span><span class="n">title</span> <span class="p">%</span><span class="err">&gt;</span><span class="o">&lt;/</span><span class="n">option</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="p">%</span> <span class="k">end</span> <span class="p">%</span><span class="o">&gt;</span> <span class="o">&lt;/</span><span class="n">select</span><span class="o">&gt;</span> <span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">"hidden sm:block"</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">"border-b border-gray-200"</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">nav</span> <span class="n">class</span><span class="o">=</span><span class="s2">"-mb-px flex space-x-8"</span> <span class="n">aria</span><span class="o">-</span><span class="n">label</span><span class="o">=</span><span class="s2">"Tabs"</span><span class="o">&gt;</span> <span class="o">&lt;%=</span> <span class="n">for</span> <span class="p">{</span><span class="n">tab</span><span class="p">,</span> <span class="n">i</span><span class="p">}</span> <span class="o">&lt;-</span> <span class="no">Enum</span><span class="o">.</span><span class="n">with_index</span><span class="p">(</span><span class="nv">@tab</span><span class="p">),</span> <span class="n">tab_id</span> <span class="o">=</span> <span class="s2">"</span><span class="si">#{</span><span class="nv">@id</span><span class="si">}</span><span class="s2">-</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">"</span> <span class="k">do</span> <span class="p">%</span><span class="o">&gt;</span> <span class="o">&lt;%=</span> <span class="k">if</span> <span class="n">tab</span><span class="p">[</span><span class="ss">:current</span><span class="p">]</span> <span class="k">do</span> <span class="p">%</span><span class="o">&gt;</span> <span class="o">&lt;.</span><span class="n">link</span> <span class="n">id</span><span class="o">=</span><span class="p">{</span><span class="n">tab_id</span><span class="p">}</span> <span class="n">phx</span><span class="o">-</span><span class="n">click</span><span class="o">=</span><span class="p">{</span><span class="n">show_tab</span><span class="p">(</span><span class="nv">@id</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="nv">@active_class</span><span class="p">,</span> <span class="nv">@inactive_class</span><span class="p">)}</span> <span class="n">class</span><span class="o">=</span><span class="p">{</span><span class="s2">"group inline-flex items-center py-4 px-1 border-b-2 font-medium text-sm </span><span class="si">#{</span><span class="nv">@active_class</span><span class="si">}</span><span class="s2">"</span><span class="p">}</span> <span class="n">aria</span><span class="o">-</span><span class="n">current</span><span class="o">=</span><span class="s2">"page"</span><span class="o">&gt;</span> <span class="o">&lt;%=</span> <span class="n">tab</span><span class="o">.</span><span class="n">title</span> <span class="p">%</span><span class="o">&gt;</span> <span class="o">&lt;/.</span><span class="n">link</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="p">%</span> <span class="k">else</span> <span class="p">%</span><span class="o">&gt;</span> <span class="o">&lt;.</span><span class="n">link</span> <span class="n">id</span><span class="o">=</span><span class="p">{</span><span class="n">tab_id</span><span class="p">}</span> <span class="n">phx</span><span class="o">-</span><span class="n">click</span><span class="o">=</span><span class="p">{</span><span class="n">show_tab</span><span class="p">(</span><span class="nv">@id</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="nv">@active_class</span><span class="p">,</span> <span class="nv">@inactive_class</span><span class="p">)}</span> <span class="n">class</span><span class="o">=</span><span class="p">{</span><span class="s2">"group inline-flex items-center py-4 px-1 border-b-2 font-medium text-sm </span><span class="si">#{</span><span class="nv">@inactive_class</span><span class="si">}</span><span class="s2">"</span><span class="p">}</span><span class="o">&gt;</span> <span class="o">&lt;%=</span> <span class="n">tab</span><span class="o">.</span><span class="n">title</span> <span class="p">%</span><span class="o">&gt;</span> <span class="o">&lt;/.</span><span class="n">link</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="p">%</span> <span class="k">end</span> <span class="p">%</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="p">%</span> <span class="k">end</span> <span class="p">%</span><span class="o">&gt;</span> <span class="o">&lt;/</span><span class="n">nav</span><span class="o">&gt;</span> <span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span> <span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span> <span class="o">&lt;%=</span> <span class="n">for</span> <span class="p">{</span><span class="n">tab</span><span class="p">,</span> <span class="n">i</span><span class="p">}</span> <span class="o">&lt;-</span> <span class="no">Enum</span><span class="o">.</span><span class="n">with_index</span><span class="p">(</span><span class="nv">@tab</span><span class="p">)</span> <span class="k">do</span> <span class="p">%</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">div</span> <span class="n">id</span><span class="o">=</span><span class="p">{</span><span class="s2">"</span><span class="si">#{</span><span class="nv">@id</span><span class="si">}</span><span class="s2">-</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">-content"</span><span class="p">}</span> <span class="n">class</span><span class="o">=</span><span class="p">{</span><span class="k">if</span> <span class="n">!tab</span><span class="p">[</span><span class="ss">:current</span><span class="p">],</span> <span class="k">do</span><span class="p">:</span> <span class="s2">"hidden"</span><span class="p">}</span> <span class="n">data</span><span class="o">-</span><span class="n">tab</span><span class="o">-</span><span class="n">content</span><span class="err">&gt;</span><span class="o">&lt;%=</span> <span class="n">render_slot</span><span class="p">(</span><span class="n">tab</span><span class="p">)</span> <span class="p">%</span><span class="err">&gt;</span><span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="p">%</span> <span class="k">end</span> <span class="p">%</span><span class="o">&gt;</span> <span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span> <span class="s2">""" end defp show_tab(js </span><span class="se">\\</span><span class="s2"> %JS{}, id, tab_index, active_class, inactive_class) do tab_id = "</span><span class="c1">#{id}-#{tab_index}"</span> <span class="n">js</span> <span class="o">|&gt;</span> <span class="no">JS</span><span class="o">.</span><span class="n">add_class</span><span class="p">(</span><span class="s2">"hidden"</span><span class="p">,</span> <span class="ss">to:</span> <span class="s2">"#</span><span class="si">#{</span><span class="n">id</span><span class="si">}</span><span class="s2"> [data-tab-content]"</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="no">JS</span><span class="o">.</span><span class="n">remove_class</span><span class="p">(</span><span class="s2">"hidden"</span><span class="p">,</span> <span class="ss">to:</span> <span class="s2">"#</span><span class="si">#{</span><span class="n">tab_id</span><span class="si">}</span><span class="s2">-content"</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="no">JS</span><span class="o">.</span><span class="n">remove_class</span><span class="p">(</span><span class="n">active_class</span><span class="p">,</span> <span class="ss">to:</span> <span class="s2">"#</span><span class="si">#{</span><span class="n">id</span><span class="si">}</span><span class="s2"> nav a"</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="no">JS</span><span class="o">.</span><span class="n">add_class</span><span class="p">(</span><span class="n">inactive_class</span><span class="p">,</span> <span class="ss">to:</span> <span class="s2">"#</span><span class="si">#{</span><span class="n">id</span><span class="si">}</span><span class="s2"> nav a"</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="no">JS</span><span class="o">.</span><span class="n">remove_class</span><span class="p">(</span><span class="n">inactive_class</span><span class="p">,</span> <span class="ss">to:</span> <span class="s2">"#</span><span class="si">#{</span><span class="n">tab_id</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="no">JS</span><span class="o">.</span><span class="n">add_class</span><span class="p">(</span><span class="n">active_class</span><span class="p">,</span> <span class="ss">to:</span> <span class="s2">"#</span><span class="si">#{</span><span class="n">tab_id</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="no">JS</span><span class="o">.</span><span class="n">remove_attribute</span><span class="p">(</span><span class="s2">"selected"</span><span class="p">,</span> <span class="ss">to:</span> <span class="s2">"#</span><span class="si">#{</span><span class="n">id</span><span class="si">}</span><span class="s2">-mobile option"</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="no">JS</span><span class="o">.</span><span class="n">set_attribute</span><span class="p">({</span><span class="s2">"selected"</span><span class="p">,</span> <span class="s2">""</span><span class="p">},</span> <span class="ss">to:</span> <span class="s2">"#</span><span class="si">#{</span><span class="n">id</span><span class="si">}</span><span class="s2">-mobile option[value='</span><span class="si">#{</span><span class="n">tab_id</span><span class="si">}</span><span class="s2">'"</span><span class="p">)</span> <span class="k">end</span> <span class="k">end</span> </code></pre></div><h3 id='what-is-show_tab-doing' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#what-is-show_tab-doing' aria-label='Anchor'></a>What Is <code>show_tab</code> Doing?</h3><p>The <code>show_tab</code> function creates a series of JS commands that are linked to the <code>phx-click</code> events of the tab links.</p> <p>The commands take the approach of applying a blanket change to a group of DOM elements before making a more specific change to display the active selection. It also updates the HTML <code>&lt;select&gt;</code> input even when it&#39;s not visible.</p> <h3 id='what-s-going-on-with-that-for-comprehension' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#what-s-going-on-with-that-for-comprehension' aria-label='Anchor'></a>What&#39;s Going on With That <code>for</code> Comprehension?</h3><p>This nifty bit of code in the template is worth closer examination. Here&#39;s a greatly simplified version of it:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="n">for</span> <span class="p">{</span><span class="n">tab</span><span class="p">,</span> <span class="n">i</span><span class="p">}</span> <span class="o">&lt;-</span> <span class="no">Enum</span><span class="o">.</span><span class="n">with_index</span><span class="p">(</span><span class="nv">@tab</span><span class="p">),</span> <span class="n">tab_id</span> <span class="o">=</span> <span class="s2">"</span><span class="si">#{</span><span class="nv">@id</span><span class="si">}</span><span class="s2">-</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">"</span> <span class="k">do</span> <span class="o">&lt;.</span><span class="n">link</span> <span class="n">id</span><span class="o">=</span><span class="p">{</span><span class="n">tab_id</span><span class="p">}</span> <span class="o">&lt;%=</span> <span class="n">tab</span><span class="o">.</span><span class="n">title</span> <span class="p">%</span><span class="o">&gt;</span> <span class="o">&lt;/.</span><span class="n">link</span><span class="o">&gt;</span> <span class="k">end</span> </code></pre></div><p>First, the <a href="https://hexdocs.pm/elixir/Enum.html#with_index/2"><code>Enum.with_index/2</code></a> function is given a list of tabs. It returns a list of tuples shaped like <code>{tab, index}</code>. That&#39;s pretty cool on it&#39;s own. Within a <a href="https://hexdocs.pm/elixir/Kernel.SpecialForms.html#for/1"><code>for</code> comprehension</a> it lets us iterate the list while also getting an incrementing index. It becomes similar to a regular <code>for</code> loop in non-functional languages.</p> <p>The part that makes this look confusing is the extra comma and <code>tab_id = &quot;#{@id}-#{i}&quot;</code>. What&#39;s that all about?</p> <p>This is where we are reminded that an Elixir <a href="https://hexdocs.pm/elixir/Kernel.SpecialForms.html#for/1"><code>for</code> comprehension</a> is not a <code>for</code> loop. A <code>for</code> comprehension can include additional generators or filter functions. Our usage here is like a filter that always returns truthy (so nothing is filtered out), but we can use it to assign a variable with each iteration.</p> <p>Here&#39;s some IEx friendly code to try out and play with it yourself.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="n">tabs</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"tab-1"</span><span class="p">,</span> <span class="s2">"tab-2"</span><span class="p">,</span> <span class="s2">"tab-3"</span><span class="p">]</span> <span class="n">for</span> <span class="p">{</span><span class="n">tab</span><span class="p">,</span> <span class="n">i</span><span class="p">}</span> <span class="o">&lt;-</span> <span class="no">Enum</span><span class="o">.</span><span class="n">with_index</span><span class="p">(</span><span class="n">tabs</span><span class="p">),</span> <span class="n">tab_id</span> <span class="o">=</span> <span class="s2">"</span><span class="si">#{</span><span class="n">tab</span><span class="si">}</span><span class="s2">-</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">"</span> <span class="k">do</span> <span class="no">IO</span><span class="o">.</span><span class="n">inspect</span> <span class="n">tab</span><span class="p">,</span> <span class="ss">label:</span> <span class="s2">"TAB"</span> <span class="no">IO</span><span class="o">.</span><span class="n">inspect</span> <span class="n">i</span><span class="p">,</span> <span class="ss">label:</span> <span class="s2">"INDEX"</span> <span class="no">IO</span><span class="o">.</span><span class="n">inspect</span> <span class="n">tab_id</span><span class="p">,</span> <span class="ss">label:</span> <span class="s2">"TAB_ID"</span> <span class="k">end</span> </code></pre></div><p>When run in IEx, the results look like this:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight '><code>TAB: "tab-1" INDEX: 0 TAB_ID: "tab-1-0" TAB: "tab-2" INDEX: 1 TAB_ID: "tab-2-1" TAB: "tab-3" INDEX: 2 TAB_ID: "tab-3-2" </code></pre></div><p>This trick is handy in templates because it&#39;s easy to define variables in our loop. The alternative you see often in other languages is frowned upon in LiveView because it&#39;s harder to detect when HEEx template chunks have changed.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight erb'><code><span class="cp">&lt;%=</span> <span class="k">for</span> <span class="p">{</span><span class="n">tab</span><span class="p">,</span> <span class="n">i</span><span class="p">}</span> <span class="o">&lt;-</span> <span class="no">Enum</span><span class="p">.</span><span class="nf">with_index</span><span class="p">(</span><span class="vi">@tab</span><span class="p">)</span> <span class="k">do</span> <span class="cp">%&gt;</span> <span class="cp">&lt;%</span> <span class="n">tab_id</span> <span class="o">=</span> <span class="s2">"</span><span class="si">#{</span><span class="vi">@id</span><span class="si">}</span><span class="s2">-</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">"</span> <span class="cp">%&gt;</span> Don't do it this way! <span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span> </code></pre></div><p>So now you know better and won&#39;t do it that way. 🙂</p> <h3 id='not-quite-there-yet' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#not-quite-there-yet' aria-label='Anchor'></a>Not Quite There Yet!</h3><p>Just using this code, it works great for non-mobile interfaces. The problem is when it switches to the <code>select</code> input. Changing the selection using the dropdown doesn&#39;t activate and show the selected tab contents!</p> <p>Here&#39;s how our solution looks to this point:</p> <p><img src="/phoenix-files/2022-08-08/tab-behavior-selection-not-changing.gif?center&amp;card&amp;border" alt="tab behavior selection not changing for select" /></p> <p>When we change the <code>&lt;select&gt;</code> dropdown, no matter what selection we make, it doesn&#39;t change the displayed tab contents.</p> <p>We&#39;re soooo close!</p> <p>This extra, 4 lines of Javascript bridges that chasm for us. This can live in our <code>app.js</code> file.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight javascript'><code><span class="c1">// Tabs behavior</span> <span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">js:tab-selected</span><span class="dl">"</span><span class="p">,</span> <span class="p">({</span><span class="nx">detail</span><span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="kd">let</span> <span class="nx">select</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="nx">detail</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span> <span class="kd">let</span> <span class="nx">link</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="nx">select</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span> <span class="nx">liveSocket</span><span class="p">.</span><span class="nx">execJS</span><span class="p">(</span><span class="nx">link</span><span class="p">,</span> <span class="nx">link</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="dl">"</span><span class="s2">phx-click</span><span class="dl">"</span><span class="p">))</span> <span class="p">})</span> </code></pre></div><p>What does this do? The select input has the following <code>phx-click</code> event.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight '><code>phx-change={JS.dispatch("js:tab-selected", detail: %{id: "#{@id}-mobile"})} </code></pre></div><p>When the select changes, it dispatches a local (stays in the browser) event called <code>&quot;js:tab-selected&quot;</code>. It passes along the details which is the ID of the select input.</p> <p>The Javascript adds an event listener that is called by the click event. If finds the select input and the tab link with the same value as our selected option. This links our selection from the list to our tab. It then executes the JS commands defined in the <code>phx-click</code> for the tab.</p> <p>An alternative version of the Javascript triggers a &quot;click&quot; on the element rather than execute the JS commands. That looks like this:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight javascript'><code><span class="c1">// Tabs behavior</span> <span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">js:tab-selected</span><span class="dl">"</span><span class="p">,</span> <span class="p">({</span> <span class="nx">detail</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="kd">let</span> <span class="nx">select</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="nx">detail</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span> <span class="kd">let</span> <span class="nx">link</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="nx">select</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span> <span class="k">if</span> <span class="p">(</span><span class="nx">link</span><span class="p">)</span> <span class="p">{</span> <span class="nx">link</span><span class="p">.</span><span class="nx">click</span><span class="p">()</span> <span class="p">}</span> <span class="p">})</span> </code></pre></div><p>The last line of code says, &quot;If we found the link, &#39;click&#39; it.&quot; The <code>execJS</code> is a better general solution for running commands that might not be clickable.</p> <p>Nice! Either approach bridges the selected option to our tab.</p> <p>This little bit of extra JS isn&#39;t ideal because we were trying to co-locate everything. Still, with this little bit of Javascript, we&#39;re there! We have a Tailwind UI styled tab component that falls back to a <code>&lt;select&gt;</code> input on narrower mobile screens!</p> <p>Behold it in all its glory!</p> <p><img src="/phoenix-files/2022-08-08/finished-working-tab-behavior.gif?center&amp;card&amp;border" alt="Finished working tab behavior animation" /></p> <h2 id='what-was-learned' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#what-was-learned' aria-label='Anchor'></a>What Was Learned?</h2><p>Stretching to reach an ideal, even when we don&#39;t fully reach it, helps us better see both where we fall short but also to realize what we <em>are</em> able to do. With this exercise, we saw what we can do without Alpine.js. We also found ways that LiveView can improve.</p> <p>There were some challenges to getting this working. In fact, I got some help from a colleague. Thanks Chris McCord! 🙂</p> <ul> <li>A big challenged was solved with the 4 lines of JS that makes our select input execute the JS commands. </li><li>We learned that currently, we can&#39;t fully realize the dream of fully co-located JS logic without Alpine.js. Particularly when conditional JS logic is needed. </li><li><a href="https://hexdocs.pm/phoenix_live_view/js-interop.html#client-hooks-via-phx-hook">Hooks</a> may be the &quot;blessed&quot; way to do the Javascript portion. If the DOM were expressed in a hook, it might be more clear about what&#39;s happening. However, in this case, it wasn&#39;t too bad. </li><li>There were some more things learned along this journey that I&#39;ll save for a follow-up post. </li></ul> <p>Closing this out, I am satisfied with how portable it ended up. As an experiment in creating a component with client-side behavior that keeps most of the benefits of co-location, I learned a lot. Hopefully you learned something helpful too!</p> <figure class="post-cta"> <figcaption> <h1> Phoenix Apps Run Great on Fly</h1><p> Fly is an awesome place to run your Elixir apps. Deploying, clustering, connecting Observer, and more are supported and even fun!</p><p><a class="button bg-white text-violet-600 hover:bg-opacity-75 hover:text-violet-700 transition-colors" href="https://fly.io/docs/elixir/"> Deploy your Elixir app today!&nbsp;&nbsp;<span class='opacity:50'>&rarr;</span> </a></p> </figcaption><div class="image-container"> <img src="/static/images/cta-turtle.webp" srcset="/static/images/cta-turtle@2x.webp 2x" alt=""></div></figure><h3 id='credits' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#credits' aria-label='Anchor'></a>Credits</h3><p>Special thanks to:</p> <ul> <li>Berenice Medel for her previous work on tabs that got me quite far. </li><li>Chris McCord for improving my component API and writing those critical 4 lines of JS. </li></ul> </content>
</entry>
<entry>
<title>Phoenix LiveView Tailwind Variants</title>
<link rel="alternate" href="https://fly.io/phoenix-files/phoenix-liveview-tailwind-variants/"/>
<id>https://fly.io/phoenix-files/phoenix-liveview-tailwind-variants/</id>
<published>2022-07-22T00:00:00+00:00</published>
<updated>2023-04-06T14:48:02+00:00</updated>
<content type="html"><h2 id='problem' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#problem' aria-label='Anchor'></a>Problem</h2><p>Users of <a href="https://tailwindcss.com">Tailwind CSS</a> know the productivity gains the utility-first CSS framework provides. One of Tailwind&#39;s biggest advantages is that you can rapidly build applications without ever leaving your HTML. There&#39;s no context-switching between markup and CSS files, or searching for where classes are or aren&#39;t defined.</p> <p>You almost never have to touch individual CSS files – except when you want to customize the styling of the classes that Phoenix LiveView uses for loading indicators and form feedback. Yuck.</p> <p>Worse than leaving your markup to trudge through CSS files, is the strict nature of the Phoenix LiveView classes that make them hard to customize without many one-off CSS rules.</p> <p>Fortunately, Tailwind has a plugin feature that solves this beautifully.</p> <h2 id='solution' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#solution' aria-label='Anchor'></a>Solution</h2><p>Phoenix LiveView uses the following CSS classes to provide user feedback:</p> <ul> <li><code>phx-no-feedback</code> - applied when feedback should be hidden from the user </li><li><code>phx-click-loading</code> - applied when an event is sent to the server on click while the client awaits the server response </li><li><code>phx-submit-loading</code> - applied when a form is submitted while the client awaits the server response </li><li><code>phx-change-loading</code> - applied when a form input is changed while the client awaits the server response </li></ul> <p>Customizing each of these for each scenario, breakpoint, desktop and mobile size, etc, gets cumbersome and error-prone. We can sidestep these issues by defining a <a href="https://tailwindcss.com/docs/plugins">Tailwind plugin</a> which provides variants for each of these Phoenix LiveView specific classes inside your <code>assets/tailwind.config.js</code> file:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight javascript'><code><span class="kd">const</span> <span class="nx">plugin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">tailwindcss/plugin</span><span class="dl">'</span><span class="p">)</span> <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span> <span class="na">content</span><span class="p">:</span> <span class="p">[</span> <span class="dl">"</span><span class="s2">./js/**/*.js</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">../lib/*_web.ex</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">../lib/*_web/**/*.*ex</span><span class="dl">"</span> <span class="p">],</span> <span class="na">theme</span><span class="p">:</span> <span class="p">{</span> <span class="na">extend</span><span class="p">:</span> <span class="p">{},</span> <span class="p">},</span> <span class="na">plugins</span><span class="p">:</span> <span class="p">[</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">@tailwindcss/forms</span><span class="dl">"</span><span class="p">),</span> <span class="nx">plugin</span><span class="p">(({</span><span class="nx">addVariant</span><span class="p">})</span> <span class="o">=&gt;</span> <span class="nx">addVariant</span><span class="p">(</span><span class="dl">'</span><span class="s1">phx-no-feedback</span><span class="dl">'</span><span class="p">,</span> <span class="p">[</span><span class="dl">'</span><span class="s1">&amp;.phx-no-feedback</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">.phx-no-feedback &amp;</span><span class="dl">'</span><span class="p">])),</span> <span class="nx">plugin</span><span class="p">(({</span><span class="nx">addVariant</span><span class="p">})</span> <span class="o">=&gt;</span> <span class="nx">addVariant</span><span class="p">(</span><span class="dl">'</span><span class="s1">phx-click-loading</span><span class="dl">'</span><span class="p">,</span> <span class="p">[</span><span class="dl">'</span><span class="s1">&amp;.phx-click-loading</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">.phx-click-loading &amp;</span><span class="dl">'</span><span class="p">])),</span> <span class="nx">plugin</span><span class="p">(({</span><span class="nx">addVariant</span><span class="p">})</span> <span class="o">=&gt;</span> <span class="nx">addVariant</span><span class="p">(</span><span class="dl">'</span><span class="s1">phx-submit-loading</span><span class="dl">'</span><span class="p">,</span> <span class="p">[</span><span class="dl">'</span><span class="s1">&amp;.phx-submit-loading</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">.phx-submit-loading &amp;</span><span class="dl">'</span><span class="p">])),</span> <span class="nx">plugin</span><span class="p">(({</span><span class="nx">addVariant</span><span class="p">})</span> <span class="o">=&gt;</span> <span class="nx">addVariant</span><span class="p">(</span><span class="dl">'</span><span class="s1">phx-change-loading</span><span class="dl">'</span><span class="p">,</span> <span class="p">[</span><span class="dl">'</span><span class="s1">&amp;.phx-change-loading</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">.phx-change-loading &amp;</span><span class="dl">'</span><span class="p">]))</span> <span class="p">]</span> <span class="p">}</span> </code></pre></div><p>We added four <code>plugin</code> definitions which add variants for each Phoenix LiveView class. The <code>&amp;.phx-click-loading</code> notation specifies that the variant is applied when an element directly has the <code>phx-click-loading</code> class applied. Additionally, the <code>.phx-click-loading &amp;</code> notation tells Tailwind to also apply the variant to children of a container with the <code>phx-click-loading</code> class.</p> <p>This allows us to customize our markup like so:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight html'><code><span class="nt">&lt;button</span> <span class="na">phx-click=</span><span class="s">"send"</span> <span class="na">phx-disable-with=</span><span class="s">"Sending..."</span> <span class="na">class=</span><span class="s">"p-4 rounded-lg bg-indigo-600 phx-click-loading:animate-pulse"</span> <span class="nt">&gt;</span> Send! <span class="nt">&lt;/button&gt;</span> </code></pre></div><p>We style our button with the regular Tailwind classes, then we customize which Tailwind classes are applied on <code>phx-click</code>. We do this by simply prefixing the Tailwind classes by <code>phx-click-loading</code>, such as <code>phx-click-loading:animate-pulse</code> to show animation feedback while the server processes our event. Here&#39;s what it looks like in action:</p> <p><video title="A 'send' button with a visual pulsing effect while it waits for the event to be processed." src="/phoenix-files/2022-07-22/tailwind_variant_button.mp4?card&amp;center?1/3" autoplay="autoplay" loop="loop" muted="muted" playsinline="" disablePictureInPicture="" /></p> <p>You can expand this to apply red borders to form inputs when the inputs are invalid, or hide and show input errors – all without leaving your markup. Since elements are all stylized inline, you can also customize your Phoenix LiveView feedback on a case-by-case basis. Happy hacking!</p> </content>
</entry>
<entry>
<title>Set Up VSCode for Elixir Dev</title>
<link rel="alternate" href="https://fly.io/phoenix-files/setup-vscode-for-elixir-development/"/>
<id>https://fly.io/phoenix-files/setup-vscode-for-elixir-development/</id>
<published>2022-07-21T00:00:00+00:00</published>
<updated>2023-04-06T14:48:02+00:00</updated>
<content type="html"><p>Since <a href="https://elixir-lang.org/">Elixir</a> and <a href="https://www.phoenixframework.org/">Phoenix</a> appeared prominently in the <a href="https://survey.stackoverflow.co/2022/#technology-most-loved-dreaded-and-wanted">Stack Overflow Survey Results for 2022</a>, more people have been discovering the joy of Elixir and the power of LiveView. This article introduces developers to getting the popular VS Code editor up and running for productive Elixir development.</p> <h2 id='problem' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#problem' aria-label='Anchor'></a>Problem</h2><p>You want to use <a href="https://code.visualstudio.com/">Microsoft&#39;s VS Code</a> for <a href="https://elixir-lang.org/">Elixir</a> development but there are <a href="https://marketplace.visualstudio.com/search?term=elixir&amp;target=VSCode&amp;category=All%20categories&amp;sortBy=Relevance">many extension options</a>! Some extensions conflict, some are old, others new, and some require extra config.</p> <p>How do we setup VS Code for productive Elixir and Phoenix development?</p> <h2 id='solution' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#solution' aria-label='Anchor'></a>Solution</h2><p>Let&#39;s assume you already have <a href="https://elixir-lang.org/install.html">Elixir</a> and <a href="https://hexdocs.pm/phoenix/installation.html">Phoenix</a> installed. We are focused on setting up your development environment using VS Code.</p> <p>There are <strong class='font-semibold text-navy'>many</strong> extension options and some have been replaced by newer, official extensions. We&#39;ll start with the &quot;must have&quot; and then cover some great optional ones.</p> <h3 id='must-have-extensions' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#must-have-extensions' aria-label='Anchor'></a>Must Have Extensions</h3><p>Let&#39;s start with the 2 absolute must-have extensions!</p> <p><strong class='font-semibold text-navy'><a href="https://marketplace.visualstudio.com/items?itemName=JakeBecker.elixir-ls">ElixirLS: Elixir support and debugger</a></strong> - Elixir support with debugger, autocomplete, and more. Powered by ElixirLS.</p> <p>Refer to the extension information for learning what it can do and troubleshooting steps as well. Just note that it runs a project analysis on first run which can take some time. You may hear laptop fans kick up while that&#39;s going. Wait for that to finish before expecting code completion and formatting to work.</p> <aside class="callout"> <h4 id='code-management-tip' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#code-management-tip' aria-label='Anchor'></a>Code Management Tip</h4><p>ElixirLS creates an <code>.elixir_ls</code> directory in your project root. You don&#39;t want that checked in with your code so adding the directory to your <code>.gitignore</code> file is recommended.</p> </aside><p><strong class='font-semibold text-navy'><a href="https://marketplace.visualstudio.com/items?itemName=phoenixframework.phoenix">Phoenix Framework</a></strong> - Syntax highlighting support for Phoenix templates. Supports <code>.heex</code> and <code>~H</code> embedded templates as well.</p> <aside class="right-sidenote"> View &gt; Command Palette... &gt; &quot;Preferences: Open Settings (JSON)&quot;</aside><p>The <a href="https://github.com/phoenixframework/vscode-phoenix">extension Github project</a> recommends the following config change in your <code>settings.json</code> file:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight json'><code><span class="nl">"emmet.includeLanguages"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nl">"phoenix-heex"</span><span class="p">:</span><span class="w"> </span><span class="s2">"html"</span><span class="w"> </span><span class="p">}</span><span class="err">,</span><span class="w"> </span></code></pre></div><p>Note: If you don&#39;t see the improvements after making the changes, try reloading the window (Command Palette &gt; Developer: Reload Window) or restart VS Code.</p> <h3 id='nice-to-have-extensions' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#nice-to-have-extensions' aria-label='Anchor'></a>Nice to Have Extensions</h3><p>With the critical pieces in place, let&#39;s add some frosting!</p> <p><strong class='font-semibold text-navy'><a href="https://marketplace.visualstudio.com/items?itemName=samuel-pordeus.elixir-test">Elixir Test</a></strong> - An extension with a few commands that helps you with your Elixir tests</p> <p>Make sure to check out the extension instructions page to see what it can do and especially the keyboard shortcuts for your platform.</p> <h3 id='optional-extensions' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#optional-extensions' aria-label='Anchor'></a>Optional Extensions</h3><p>If you use <a href="https://tailwindcss.com/">Tailwind CSS</a> for styling your web application, then you&#39;ll want to install the <strong class='font-semibold text-navy'><a href="https://marketplace.visualstudio.com/items?itemName=bradlc.vscode-tailwindcss">Tailwind CSS IntelliSense</a></strong> extension that gives you helpful code completion and documentation lookups.</p> <p>This config change lets it work well with Phoenix templates and even inside your embedded <code>~H</code> function components!</p> <aside class="right-sidenote"> View &gt; Command Palette... &gt; &quot;Preferences: Open Settings (JSON)&quot;</aside><p>Add the following config to your <code>settings.json</code> file:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight json'><code><span class="nl">"tailwindCSS.includeLanguages"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nl">"elixir"</span><span class="p">:</span><span class="w"> </span><span class="s2">"html"</span><span class="p">,</span><span class="w"> </span><span class="nl">"phoenix-heex"</span><span class="p">:</span><span class="w"> </span><span class="s2">"html"</span><span class="w"> </span><span class="p">}</span><span class="err">,</span><span class="w"> </span></code></pre></div><h2 id='discussion' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#discussion' aria-label='Anchor'></a>Discussion</h2><p>With your development environment setup, you are ready to productively hack on some Elixir code!</p> <p>If you are new to VS Code, then it may make sense to check out the official <a href="https://code.visualstudio.com/learn">learning resources</a> for how to be productive with the tool.</p> <figure class="post-cta"> <figcaption> <h1> Fly.io ❤️ Elixir</h1><p> Need a place to deploy that shiny new Phoenix app? Fly.io is a great place to deploy LiveView applications. You can be running in minutes.</p><p><a class="button bg-white text-violet-600 hover:bg-opacity-75 hover:text-violet-700 transition-colors" href="https://fly.io/docs/elixir/"> Deploy your Phoenix app today!&nbsp;&nbsp;<span class='opacity:50'>&rarr;</span> </a></p> </figcaption><div class="image-container"> <img src="/static/images/cta-dog.webp" srcset="/static/images/cta-dog@2x.webp 2x" alt=""></div></figure></content>
</entry>
<entry>
<title>Triggering JS from the server in LiveView: showing a spinner</title>
<link rel="alternate" href="https://fly.io/phoenix-files/server-triggered-js/"/>
<id>https://fly.io/phoenix-files/server-triggered-js/</id>
<published>2022-07-11T00:00:00+00:00</published>
<updated>2023-04-06T14:48:02+00:00</updated>
<content type="html"><p>It&#39;s always frustrating when we click something—and it looks like nothing&#39;s happening. The default solution to this is to throw up a spinner while the server is chewing on a request, to help users resist the temptation to keep clicking. UX win!</p> <p>We can do this on the client, and poll the server repeatedly, asking “Are you done yet?” But polling adds waiting time as well as traffic and load on the server. The server knows what it’s doing, and it knows when it’s done. We should get the server to show and hide the &quot;Please wait while I get that for you…” spinner.</p> <p>With LiveView, we have the tools!</p> <h2 id='problem' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#problem' aria-label='Anchor'></a>Problem</h2><p>How can we create a loader that the <strong class='font-semibold text-navy'>server</strong> makes appear and disappear? And can we make that into a reusable component?</p> <h2 id='solution' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#solution' aria-label='Anchor'></a>Solution</h2><p>Today we&#39;ll create a loader component that appears asynchronously when we make a request to an external API that may take time to respond. For that we&#39;ll apply an interesting trick; we&#39;ll trigger JS commands from the server side!</p> <h3 id='defining-a-loader-component' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#defining-a-loader-component' aria-label='Anchor'></a>Defining a Loader Component</h3><p>Before we start, I want to mention that my abilities developing CSS and HTML are not the best, so I used the amazing spinner designed and developed by Vasili Savitski and <a href="http://epicmax.co/">Epicmax</a>; you can find many others <a href="https://epic-spinners.epicmax.co/">here</a>.</p> <p>We package up the spinner into a <code>loader</code> function component that we can reuse:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">def</span> <span class="n">loader</span><span class="p">(</span><span class="n">assigns</span><span class="p">)</span> <span class="k">do</span> <span class="sx">~H""</span><span class="s2">" &lt;div class="</span><span class="n">hidden</span> <span class="n">h</span><span class="o">-</span><span class="n">full</span> <span class="n">bg</span><span class="o">-</span><span class="n">slate</span><span class="o">-</span><span class="mi">100</span><span class="s2">" id={@id}&gt; &lt;div class="</span><span class="n">flex</span> <span class="n">justify</span><span class="o">-</span><span class="n">center</span> <span class="n">items</span><span class="o">-</span><span class="n">center</span> <span class="n">h</span><span class="o">-</span><span class="n">full</span><span class="s2">"&gt; &lt;div class="</span><span class="n">flower</span><span class="o">-</span><span class="n">spinner</span><span class="s2">"&gt; &lt;div class="</span><span class="n">dots</span><span class="o">-</span><span class="n">container</span><span class="s2">"&gt; &lt;div class="</span><span class="n">bigger</span><span class="o">-</span><span class="n">dot</span><span class="s2">"&gt; &lt;div class="</span><span class="n">smaller</span><span class="o">-</span><span class="n">dot</span><span class="s2">"&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; """</span> <span class="k">end</span> </code></pre></div><p>The spinner itself is just a collection of HTML elements within our component container, and its own CSS takes care of the fancy positioning and animation of its nested elements to create the pretty spinny pattern.</p> <p>We use Tailwind classes to match the loader container size to its parent HTML element, and to center the spinner within its parent. The <code>hidden</code> class makes the spinner invisible by default.</p> <p>Let&#39;s render our spinner (without the <code>hidden</code> class) to see how it looks:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">def</span> <span class="n">render</span><span class="p">(</span><span class="n">assigns</span><span class="p">)</span> <span class="k">do</span> <span class="sx">~H""</span><span class="s2">" &lt;.loader id="</span><span class="n">my_spinner</span><span class="s2">"/&gt; """</span> <span class="k">end</span> </code></pre></div><p><video src="/phoenix-files/2022-07-11/js-loader-01.mp4?card?center?1/3" autoplay="autoplay" loop="loop" muted="muted" playsinline="" disablePictureInPicture="" /></p> <h3 id='showing-and-hiding-the-loader' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#showing-and-hiding-the-loader' aria-label='Anchor'></a>Showing and Hiding the Loader</h3><p>Now, how do we make our loader appear and disappear? <a href="https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.JS.html">JS commands</a>!</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">defp</span> <span class="n">show_loader</span><span class="p">(</span><span class="n">js</span> <span class="p">\\</span> <span class="p">%</span><span class="no">JS</span><span class="p">{},</span> <span class="n">id</span><span class="p">)</span> <span class="k">do</span> <span class="no">JS</span><span class="o">.</span><span class="n">show</span><span class="p">(</span><span class="n">js</span><span class="p">,</span> <span class="ss">to:</span> <span class="s2">"#</span><span class="si">#{</span><span class="n">id</span><span class="si">}</span><span class="s2">"</span><span class="p">,</span> <span class="ss">transition:</span> <span class="p">{</span><span class="s2">"ease-out duration-300"</span><span class="p">,</span> <span class="s2">"opacity-0"</span><span class="p">,</span> <span class="s2">"opacity-100"</span><span class="p">}</span> <span class="p">)</span> <span class="k">end</span> <span class="k">defp</span> <span class="n">hide_loader</span><span class="p">(</span><span class="n">js</span> <span class="p">\\</span> <span class="p">%</span><span class="no">JS</span><span class="p">{},</span> <span class="n">id</span><span class="p">)</span> <span class="k">do</span> <span class="no">JS</span><span class="o">.</span><span class="n">hide</span><span class="p">(</span><span class="n">js</span><span class="p">,</span> <span class="ss">to:</span> <span class="s2">"#</span><span class="si">#{</span><span class="n">id</span><span class="si">}</span><span class="s2">"</span><span class="p">,</span> <span class="ss">transition:</span> <span class="p">{</span><span class="s2">"ease-in duration-300"</span><span class="p">,</span> <span class="s2">"opacity-100"</span><span class="p">,</span> <span class="s2">"opacity-0"</span><span class="p">}</span> <span class="p">)</span> <span class="k">end</span> </code></pre></div><p>We use the <code>JS.show</code> and <code>JS.hide</code> commands, each one with a simple transition that changes the opacity of the loader&#39;s container.</p> <p>The commands are encapsulated inside the <code>show_loader/2</code> and <code>hide_loader/2</code> functions just for simplicity, as we&#39;ll use them later.</p> <p>Using the commands we defined above, we can show and hide our loader on the client side just by using <a href="https://hexdocs.pm/phoenix_live_view/bindings.html">phx-bindings</a> like <code>phx_click</code>:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="o">&lt;</span><span class="n">button</span> <span class="n">phx</span><span class="o">-</span><span class="n">click</span><span class="o">=</span><span class="p">{</span><span class="n">show_loader</span><span class="p">(</span><span class="s2">"my_spinner"</span><span class="p">)}</span><span class="o">&gt;</span> <span class="no">Without</span> <span class="n">the</span> <span class="n">server!</span> <span class="o">&lt;/</span><span class="n">button</span><span class="o">&gt;</span> </code></pre></div><p>However, sometimes only the server (and the logic we define) knows when the processing has finished and the loader can be hidden again. This is where we apply the most important trick of this recipe!</p> <h3 id='triggering-a-js-command-from-the-server-side' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#triggering-a-js-command-from-the-server-side' aria-label='Anchor'></a>Triggering a JS Command From the Server Side</h3><p>The idea here is to push an event to the client from the server side each time we want to show or hide our loader, and have the event&#39;s JS listener trigger the JS command we want. Neither the server nor the listener really needs to know exactly what should happen on the client when this event arrives! So here&#39;s how we break it up:</p> <ul> <li>The loader&#39;s outer HTML element has <code>data-*</code> attributes that store the JS Commands or functions that should be invoked when we start waiting, and when we’re done waiting. </li><li>The server pushes an event whose payload consists of 1) an element id to target and 2) the name of a data attribute, like <code>data-ok-done</code>. </li><li>The listener executes the JS indicated by the specified <code>data-*</code> attribute on the target element. </li></ul> <p>This is a highly-reusable pattern! Let&#39;s use it:</p> <p>First we specify the JS commands we want to trigger by adding them as attributes of our loader main container:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">def</span> <span class="n">loader</span><span class="p">(</span><span class="n">assigns</span><span class="p">)</span> <span class="k">do</span> <span class="sx">~H""</span><span class="s2">" &lt;div class="</span><span class="n">hidden</span> <span class="n">h</span><span class="o">-</span><span class="n">full</span> <span class="n">bg</span><span class="o">-</span><span class="n">slate</span><span class="o">-</span><span class="mi">100</span><span class="s2">" id={@id} data-plz-wait={show_loader(@id)} data-ok-done={hide_loader(@id)} &gt; . . . &lt;/div&gt; """</span> <span class="k">end</span> </code></pre></div><p>The <code>JS.show</code> command we defined in the <code>show_loader/2</code> function is embedded inside the <code>data-plz-wait</code> attribute (the same happens with the <code>data-ok-done</code> attribute). In both cases, we pass the identifier of our loader as a parameter.</p> <p>In our <code>app.js</code> file we add an event listener for the server-pushed event <code>js-exec</code>:</p> <aside class="right-sidenote"> Note that when we push an event from the server using <code>Phoenix.LiveView.push_event/3</code> (as we&#39;ll do later), the event name is dispatched in the browser with the <code>phx:</code> prefix.</aside><div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="n">window</span><span class="o">.</span><span class="n">addEventListener</span><span class="p">(</span><span class="s2">"phx:js-exec"</span><span class="p">,</span> <span class="p">({</span><span class="n">detail</span><span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="n">document</span><span class="o">.</span><span class="n">querySelectorAll</span><span class="p">(</span><span class="n">detail</span><span class="o">.</span><span class="n">to</span><span class="p">)</span><span class="o">.</span><span class="n">forEach</span><span class="p">(</span><span class="n">el</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="n">liveSocket</span><span class="o">.</span><span class="n">execJS</span><span class="p">(</span><span class="n">el</span><span class="p">,</span> <span class="n">el</span><span class="o">.</span><span class="n">getAttribute</span><span class="p">(</span><span class="n">detail</span><span class="o">.</span><span class="n">attr</span><span class="p">))</span> <span class="p">})</span> <span class="p">})</span> </code></pre></div><p>This listener is a generic solution: we can trigger any JS command (we can even execute a set of JS commands!) just by embedding them inside an HTML attribute.</p> <p>Let&#39;s see how it works:</p> <p>The listener function receives a <code>detail</code> object, which has two attributes: <code>to</code> and <code>attr</code>. <code>to</code> contains the identifier of one or more HTML elements, and <code>attr</code> is the name of the HTML attribute that embeds the JS command we want to trigger.</p> <p>For each element matching the <code>to</code> identifier, we trigger the JS command contained in the element&#39;s HTML attribute <code>attr</code>.</p> <p>Finally, we can trigger our <code>js-exec</code> event by adding it to the socket and pushing it to the client by using the <a href="https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html#push_event/3">push_event/3</a> function:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="n">push_event</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="s2">"js-exec"</span><span class="p">,</span> <span class="p">%{</span> <span class="ss">to:</span> <span class="s2">"#my_spinner"</span><span class="p">,</span> <span class="ss">attr:</span> <span class="s2">"data-ok-done"</span> <span class="p">})</span> </code></pre></div><p>We send a map with the details that the listener is waiting for: the identifier of our spinner, and the name of the attribute that embeds the JS command we want to trigger.</p> <p>This way we push the <code>js-exec</code> event to the client, and the listener receives the event and triggers the command embedded in the <code>data-ok-done</code> attribute.</p> <h3 id='loader-in-action' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#loader-in-action' aria-label='Anchor'></a>Loader in Action</h3><p>Speaking of limited skills, it&#39;s difficult for me to choose colors that look good together, so an API like <a href="https://palett.es/api">this one</a> that generates a random color palette is very useful.</p> <p>For our example, when we click a button, we send a request to the <a href="https://palett.es/api">Palett API</a> and display the generated colors in an interesting way:</p> <p><video src="/phoenix-files/2022-07-11/js-loader-02.mp4?card?center?1/3" autoplay="autoplay" loop="loop" muted="muted" playsinline="" disablePictureInPicture="" /></p> <p>We&#39;ll define a new LiveView for our example. We won&#39;t include <em>all</em> the content here. You can check out the full <a href="https://github.com/bemesa21/phoenix_files/pull/1">repo</a> to see everything. In this recipe we&#39;ll go over the most important details.</p> <p>The trick to using our loader lies in just a couple of functions:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">def</span> <span class="n">handle_event</span><span class="p">(</span><span class="s2">"create_palette"</span><span class="p">,</span> <span class="n">_value</span><span class="p">,</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span> <span class="n">send</span><span class="p">(</span><span class="n">self</span><span class="p">(),</span> <span class="ss">:run_request</span><span class="p">)</span> <span class="n">socket</span> <span class="o">=</span> <span class="n">push_event</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="s2">"js-exec"</span><span class="p">,</span> <span class="p">%{</span> <span class="ss">to:</span> <span class="s2">"#my_spinner"</span><span class="p">,</span> <span class="ss">attr:</span> <span class="s2">"data-plz-wait"</span> <span class="p">})</span> <span class="p">{</span><span class="ss">:noreply</span><span class="p">,</span> <span class="n">socket</span><span class="p">}</span> <span class="k">end</span> <span class="k">def</span> <span class="n">handle_info</span><span class="p">(</span><span class="ss">:run_request</span><span class="p">,</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span> <span class="n">socket</span> <span class="o">=</span> <span class="n">socket</span> <span class="o">|&gt;</span> <span class="n">assign</span><span class="p">(</span><span class="ss">:colors</span><span class="p">,</span> <span class="n">get_colors</span><span class="p">())</span> <span class="o">|&gt;</span> <span class="n">push_event</span><span class="p">(</span><span class="s2">"js-exec"</span><span class="p">,</span> <span class="p">%{</span><span class="ss">to:</span> <span class="s2">"#my_spinner"</span><span class="p">,</span> <span class="ss">attr:</span> <span class="s2">"data-ok-done"</span><span class="p">})</span> <span class="p">{</span><span class="ss">:noreply</span><span class="p">,</span> <span class="n">socket</span><span class="p">}</span> <span class="k">end</span> </code></pre></div><p>When the <code>create_palette</code> event is received from the button, we send the <code>:run_request</code> message to our own component and add the <code>js-exec</code> event to the socket just before returning the <code>{:noreply, socket}</code> tuple. This way, we process the <code>:run_request</code> message while the spinner is displayed and it stays there.</p> <p>On the other hand, the <code>handle_info</code> callback is in charge of asynchronously calling the API and adding the event to the socket to hide the spinner. Once the colors are fetched from the API, no matter how long it took to respond, the loader is hidden.</p> <p><strong class='font-semibold text-navy'>Discussion</strong></p> <p>We created a reusable loader, and with only 4 lines of JavaScript, got the server to display it using JS commands! I can say that it took me more effort to think and come up with a fun example than to create the solution.</p> <p>You can build on this. Maybe you have a background job that builds an invoice on demand. If you use Phoenix PubSub, then your far-away server can notify the waiting LiveView when the job is done, and your spinner can vanish as the invoice or link appears. The possibilities are myriad. I&#39;ll be keeping an eye out for other solutions that involve triggering JS commands with server events!</p> </content>
</entry>
<entry>
<title>A reusable Multi-Select component for Phoenix LiveView</title>
<link rel="alternate" href="https://fly.io/phoenix-files/liveview-multi-select/"/>
<id>https://fly.io/phoenix-files/liveview-multi-select/</id>
<published>2022-05-30T00:00:00+00:00</published>
<updated>2023-04-06T14:48:02+00:00</updated>
<content type="html"><p>Have you ever wanted a feature that lets your users select multiple items from a list, and performs some action on their selection? This is a really common thing to do, and it can be pretty involved to build. What do we do when we don&#39;t want to write something over and over? We build a component!</p> <p>Today we&#39;ll walk through building a reusable Phoenix LiveView multi-select component. Then we&#39;ll learn how to hook it up to let users filter a book collection by category. A single book can be both a &quot;Romance&quot; and a &quot;Thriller&quot; at the same time. We want to let users choose any combination of categories using the multi-select component we&#39;re about to build.</p> <h2 id='roadmap' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#roadmap' aria-label='Anchor'></a>Roadmap</h2><p>We&#39;ll <a href="#creating-a-livecomponent">define our component</a> using the <a href="https://hexdocs.pm/phoenix_live_view/Phoenix.LiveComponent.html">Phoenix.LiveComponent</a> module, so it can manage its own state and events. We want this component to:</p> <ul> <li><a href="#rendering-the-selectable-options-within-a-form">Display a list of selectable options</a>: To <a href="#defining-a-data-model">model the selectable options</a> and keep track of the state, we&#39;ll define a couple of <code>embedded_schema</code>s. Then we&#39;ll use the <a href="https://hexdocs.pm/phoenix_html/Phoenix.HTML.Form.html">Phoenix.HTML.Form</a> helpers to render the HTML inputs for selecting and deselecting the options; we&#39;ll design the component to take a <a href="https://hexdocs.pm/phoenix_html/Phoenix.HTML.Form.html#t:t/0">form</a> as a parameter so that we can create the inputs as part of any external form. </li><li><a href="#displaying-the-set-of-selected-options">Show the options we&#39;ve already chosen</a>: We&#39;ll define a <code>selected_options</code> assign to track and render the component&#39;s selections. </li><li><a href="#sending-selection-updates">Send selection updates to the parent LiveView</a>: every time an option is selected, the multi-select component should inform the parent LiveView of any changes to the selection, so that it can perform any needed action with them. We’ll make this happen using the new feature that was introduced in LiveView <a href="https://github.com/phoenixframework/phoenix_live_view/blob/master/CHANGELOG.md#0178-2022-04-06">v0.17.8</a>: The ability to use <code>phx-change</code> to emit an event when an individual input has changed! </li><li><a href="#multiselectcomponent-in-action">Update when the selection changes</a>: We&#39;ll take advantage of the <a href="https://hexdocs.pm/phoenix_live_view/Phoenix.LiveComponent.html#module-life-cycle">LiveComponent life cycle</a>. Once the parent assigns are updated to keep the updated selection, the updated assigns will propagate to the multi-select component so it will render its own changes. </li><li><a href="#showing-and-hiding-the-selectable-options">Show/hide the list of selectable options</a>: We&#39;ll use the <code>JS.toggle</code> command to hide and show the options list. </li></ul> <p>Once we finish our work, we&#39;ll have this component ready to be used:</p> <p><video src="/phoenix-files/2022-05-30/multi_select_00.mp4?card&amp;center?1/3" autoplay="autoplay" loop="loop" muted="muted" playsinline="" disablePictureInPicture="" /></p> <p>Let&#39;s start!</p> <h2 id='creating-a-livecomponent' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#creating-a-livecomponent' aria-label='Anchor'></a>Creating a LiveComponent</h2><p>We start by defining a skeleton <a href="https://hexdocs.pm/phoenix_live_view/Phoenix.LiveComponent.html">LiveComponent</a>—which we name <code>MultiSelectComponent</code>—with placeholder <code>render/1</code> and <code>update/2</code> callbacks.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">defmodule</span> <span class="no">PhoenixFilesWeb</span><span class="o">.</span><span class="no">MultiSelectComponent</span> <span class="k">do</span> <span class="kn">use</span> <span class="no">PhoenixFilesWeb</span><span class="p">,</span> <span class="ss">:live_component</span> <span class="n">alias</span> <span class="no">PhoenixFiles</span><span class="o">.</span><span class="no">MultiSelect</span> <span class="k">def</span> <span class="n">render</span><span class="p">(</span><span class="n">assigns</span><span class="p">)</span> <span class="k">do</span> <span class="sx">~H""</span><span class="s2">" &lt;div&gt; &lt;/div&gt; """</span> <span class="k">end</span> <span class="k">def</span> <span class="n">update</span><span class="p">(%{</span><span class="ss">id:</span> <span class="n">id</span><span class="p">}</span> <span class="o">=</span> <span class="n">params</span><span class="p">,</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">assign</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="ss">:id</span><span class="p">,</span> <span class="n">id</span><span class="p">)}</span> <span class="k">end</span> <span class="k">end</span> </code></pre></div><p>Our <code>update/2</code> function is called after the <code>mount/1</code> function on the parent LiveView, and again every time there is an update of the parent LiveView&#39;s assigns.</p> <p>Note that all of the component&#39;s HTML content must be inside a containing <code>&lt;div&gt;</code>. Let&#39;s start filling it in.</p> <aside class="right-sidenote"> You may have noticed that we&#39;re interpolating the component&#39;s <code>@id</code> assign to define the ID of the selected options container. This is to ensure that this element (and other HTML elements we&#39;ll define later) will have a unique ID in case more than one instance of our <code>MultiSelectComponent</code> is rendered.</aside><div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">def</span> <span class="n">render</span><span class="p">(</span><span class="n">assigns</span><span class="p">)</span> <span class="k">do</span> <span class="sx">~H""</span><span class="s2">" &lt;div class="</span><span class="n">multiselect</span><span class="s2">"&gt; &lt;div class="</span><span class="n">fake_select_tag</span><span class="s2">" id={"</span><span class="c1">#{@id}-selected-options-container"</span> <span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">"icon"</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">svg</span> <span class="n">id</span><span class="o">=</span><span class="p">{</span><span class="s2">"</span><span class="si">#{</span><span class="nv">@id</span><span class="si">}</span><span class="s2">-down"</span><span class="p">}</span> <span class="o">&lt;</span><span class="n">path</span> <span class="o">...</span> <span class="o">/&gt;</span> <span class="o">&lt;/</span><span class="n">svg</span><span class="o">&gt;</span> <span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span> <span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span> <span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span> <span class="s2">""" end </span></code></pre></div><p>We define a container to display the options, and simulate an HTML <code>&lt;select&gt;</code> tag with the help of a <code>&lt;div&gt;</code> and a <em>chevron-down</em> SVG icon:</p> <p><img src="/phoenix-files/2022-05-30/multi-select-011.webp?1/3?center" alt="" /></p> <p>We&#39;ll add some magic to this later. But first let&#39;s get the component working!</p> <h2 id='defining-a-data-model' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#defining-a-data-model' aria-label='Anchor'></a>Defining a Data Model</h2><p>Each option in our list needs a label to display, and some way to keep track of whether it is selected or not.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">defmodule</span> <span class="no">PhoenixFiles</span><span class="o">.</span><span class="no">MultiSelect</span> <span class="k">do</span> <span class="kn">use</span> <span class="no">Ecto</span><span class="o">.</span><span class="no">Schema</span> <span class="n">embedded_schema</span> <span class="k">do</span> <span class="n">embeds_many</span> <span class="ss">:options</span><span class="p">,</span> <span class="no">PhoenixFiles</span><span class="o">.</span><span class="no">MultiSelect</span><span class="o">.</span><span class="no">SelectOption</span> <span class="k">end</span> <span class="k">defmodule</span> <span class="no">SelectOption</span> <span class="k">do</span> <span class="kn">use</span> <span class="no">Ecto</span><span class="o">.</span><span class="no">Schema</span> <span class="n">embedded_schema</span> <span class="k">do</span> <span class="n">field</span> <span class="ss">:selected</span><span class="p">,</span> <span class="ss">:boolean</span><span class="p">,</span> <span class="ss">default:</span> <span class="no">false</span> <span class="n">field</span> <span class="ss">:label</span><span class="p">,</span> <span class="ss">:string</span> <span class="k">end</span> <span class="k">end</span> <span class="k">end</span> </code></pre></div><p>This defines an <code>embedded schema</code> called <code>MultiSelect</code> ; its <code>:options</code> field embeds a list of <code>SelectOption</code> schemas. The <code>SelectOption</code> schema, in turn, defines the two fields we need for each option: <code>:selected</code> and <code>:label</code>.</p> <h2 id='rendering-the-selectable-options-within-a-form' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#rendering-the-selectable-options-within-a-form' aria-label='Anchor'></a>Rendering the Selectable Options Within a Form</h2><p>Our <code>update/2</code> function adds <code>:selectable_options</code> (a list of <code>SelectOption</code> schemas) and a yet-to-be-defined enclosing <code>:form</code> to the component&#39;s assigns.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">def</span> <span class="n">update</span><span class="p">(</span><span class="n">params</span><span class="p">,</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span> <span class="p">%{</span><span class="ss">options:</span> <span class="n">options</span><span class="p">,</span> <span class="ss">form:</span> <span class="n">form</span><span class="p">,</span> <span class="ss">id:</span> <span class="n">id</span><span class="p">}</span> <span class="o">=</span> <span class="n">params</span> <span class="n">socket</span> <span class="o">=</span> <span class="n">socket</span> <span class="o">|&gt;</span> <span class="n">assign</span><span class="p">(</span><span class="ss">:id</span><span class="p">,</span> <span class="n">id</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="n">assign</span><span class="p">(</span><span class="ss">:selectable_options</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="n">assign</span><span class="p">(</span><span class="ss">:form</span><span class="p">,</span> <span class="n">form</span><span class="p">)</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">socket</span><span class="p">}</span> <span class="k">end</span> </code></pre></div><p>Then <code>render/1</code> uses those assigns to put the pieces together in our template:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">def</span> <span class="n">render</span><span class="p">(</span><span class="n">assigns</span><span class="p">)</span> <span class="k">do</span> <span class="sx">~H""</span><span class="s2">" &lt;div class="</span><span class="n">multiselect</span><span class="s2">"&gt; &lt;div class="</span><span class="n">fake_select_tag</span><span class="s2">" id={"</span><span class="c1">#{@id}-selected-options-container"}</span> <span class="o">&gt;</span> <span class="o">...</span> <span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">div</span> <span class="n">id</span><span class="o">=</span><span class="p">{</span><span class="s2">"</span><span class="si">#{</span><span class="nv">@id</span><span class="si">}</span><span class="s2">-options-container"</span><span class="p">}</span><span class="o">&gt;</span> <span class="o">&lt;%=</span> <span class="n">inputs_for</span> <span class="nv">@form</span><span class="p">,</span> <span class="ss">:options</span><span class="p">,</span> <span class="k">fn</span> <span class="n">opt</span> <span class="o">-&gt;</span> <span class="p">%</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">"form-check"</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">"selectable-option"</span><span class="o">&gt;</span> <span class="o">&lt;%=</span> <span class="n">checkbox</span> <span class="n">opt</span><span class="p">,</span> <span class="ss">:selected</span><span class="p">,</span> <span class="ss">value:</span> <span class="n">opt</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">selected</span> <span class="p">%</span><span class="o">&gt;</span> <span class="o">&lt;%=</span> <span class="n">label</span> <span class="n">opt</span><span class="p">,</span> <span class="ss">:label</span><span class="p">,</span> <span class="n">opt</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">label</span> <span class="p">%</span><span class="o">&gt;</span> <span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span> <span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="p">%</span> <span class="k">end</span> <span class="p">%</span><span class="o">&gt;</span> <span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span> <span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span> <span class="s2">""" end </span></code></pre></div><p>The main feature here is our <a href="https://hexdocs.pm/phoenix_html/Phoenix.HTML.Form.html#inputs_for/4">inputs_for/4</a> function. It attaches our nested <code>:options</code> data to the form and iterates over the options, invoking the <a href="https://hexdocs.pm/phoenix_html/Phoenix.HTML.Form.html#checkbox/3">checkbox/3</a> and <a href="https://hexdocs.pm/phoenix_html/Phoenix.HTML.Form.html#label/3">label/3</a> functions to render those elements for each option.</p> <p>With this code, our component looks like this:</p> <p><img src="/phoenix-files/2022-05-30/multi-select-01.webp?1/3?center" alt="" /></p> <h2 id='displaying-the-set-of-selected-options' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#displaying-the-set-of-selected-options' aria-label='Anchor'></a>Displaying the Set of Selected Options</h2><p>Inside our <em>select</em>, we want to display a list of selected options, like this:</p> <p><img src="/phoenix-files/2022-05-30/multi-select-02.webp?1/3?center" alt="" /></p> <p>We write a private function <code>filter_selected_options</code> to find all the <code>SelectOptions</code> with <code>selected == true</code> , and <code>update/2</code> adds these to our assigns:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">def</span> <span class="n">update</span><span class="p">(</span><span class="n">params</span><span class="p">,</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span> <span class="p">%{</span><span class="ss">options:</span> <span class="n">options</span><span class="p">,</span> <span class="ss">form:</span> <span class="n">form</span><span class="p">,</span> <span class="ss">id:</span> <span class="n">id</span><span class="p">}</span> <span class="o">=</span> <span class="n">params</span> <span class="n">socket</span> <span class="o">=</span> <span class="n">socket</span> <span class="o">|&gt;</span> <span class="n">assign</span><span class="p">(</span><span class="ss">:id</span><span class="p">,</span> <span class="n">id</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="n">assign</span><span class="p">(</span><span class="ss">:selectable_options</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="n">assign</span><span class="p">(</span><span class="ss">:form</span><span class="p">,</span> <span class="n">form</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="n">assign</span><span class="p">(</span><span class="ss">:selected_options</span><span class="p">,</span> <span class="n">filter_selected_options</span><span class="p">(</span><span class="n">options</span><span class="p">))</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">socket</span><span class="p">}</span> <span class="k">end</span> <span class="k">defp</span> <span class="n">filter_selected_options</span><span class="p">(</span><span class="n">options</span><span class="p">)</span> <span class="k">do</span> <span class="no">Enum</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">options</span><span class="p">,</span> <span class="k">fn</span> <span class="n">opt</span> <span class="o">-&gt;</span> <span class="n">opt</span><span class="o">.</span><span class="n">selected</span> <span class="ow">in</span> <span class="p">[</span><span class="no">true</span><span class="p">,</span> <span class="s2">"true"</span><span class="p">]</span> <span class="k">end</span><span class="p">)</span> <span class="k">end</span> </code></pre></div><p>Now we can iterate over <code>@selected_options</code> and display their labels in their own <code>&lt;div&gt;</code>s:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight xml'><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"fake_select_tag"</span> <span class="na">id=</span><span class="s">{"#{@id}-selected-options-container"}</span> <span class="nt">&gt;</span> <span class="err">&lt;</span>%= for option <span class="err">&lt;</span>- @selected_options do %&gt; <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"selected_option"</span><span class="nt">&gt;</span> <span class="err">&lt;</span>%= option.label %&gt; <span class="nt">&lt;/div&gt;</span> <span class="err">&lt;</span>% end %&gt; <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"icon"</span><span class="nt">&gt;</span> ... <span class="nt">&lt;/div&gt;</span> <span class="nt">&lt;/div&gt;</span> </code></pre></div><h2 id='sending-selection-updates' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#sending-selection-updates' aria-label='Anchor'></a>Sending Selection Updates</h2><p>So far we can render selected options, but the checkboxes aren&#39;t set up to change the selection.</p> <p>We need to tell the server (and update our component) every time items have been selected or deselected, which means emitting an event.</p> <p>Thanks to <a href="https://github.com/phoenixframework/phoenix_live_view/blob/master/CHANGELOG.md#0178-2022-04-06">LiveView v0.17.8</a>, we have the <code>phx_change</code> option available to emit events when there are changes to individual inputs in a form. For our example, we use this option on each of the checkboxes to emit the <code>checked</code> event. This tells us when a selection change was made.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="o">&lt;%=</span> <span class="n">checkbox</span> <span class="n">value</span><span class="p">,</span> <span class="ss">:selected</span><span class="p">,</span> <span class="ss">value:</span> <span class="n">value</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">selected</span> <span class="ss">phx_change:</span> <span class="s2">"checked"</span><span class="p">,</span> <span class="ss">phx_target:</span> <span class="nv">@myself</span> <span class="p">%</span><span class="o">&gt;</span> </code></pre></div><p>Since our <code>LiveComponent</code> lives in the same process as the parent LiveView, we must specify that the <code>checked</code> event is handled by the <code>MultiSelectComponent</code> and not by the parent LiveView. To do this, we add the <code>phx-target: @myself</code> option to our form. The <code>@myself</code> here tells LiveView <a href="https://hexdocs.pm/phoenix_live_view/Phoenix.LiveComponent.html#module-targeting-component-events">to route the event to our component</a>.</p> <p>Now let&#39;s see how to handle the <code>checked</code> event:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="c1">#values = %{"2" =&gt; %{"selected" =&gt; "true"}}</span> <span class="k">def</span> <span class="n">handle_event</span><span class="p">(</span> <span class="s2">"checked"</span><span class="p">,</span> <span class="p">%{</span><span class="s2">"multi_select"</span> <span class="o">=&gt;</span> <span class="p">%{</span><span class="s2">"options"</span> <span class="o">=&gt;</span> <span class="n">values</span><span class="p">}},</span> <span class="n">socket</span> <span class="p">)</span> <span class="k">do</span> <span class="p">[{</span><span class="n">index</span><span class="p">,</span> <span class="p">%{</span><span class="s2">"selected"</span> <span class="o">=&gt;</span> <span class="n">selected?</span><span class="p">}}]</span> <span class="o">=</span> <span class="no">Map</span><span class="o">.</span><span class="n">to_list</span><span class="p">(</span><span class="n">values</span><span class="p">)</span> <span class="n">index</span> <span class="o">=</span> <span class="no">String</span><span class="o">.</span><span class="n">to_integer</span><span class="p">(</span><span class="n">index</span><span class="p">)</span> <span class="n">selectable_options</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">assigns</span><span class="o">.</span><span class="n">selectable_options</span> <span class="n">current_option</span> <span class="o">=</span> <span class="no">Enum</span><span class="o">.</span><span class="n">at</span><span class="p">(</span><span class="n">selectable_options</span><span class="p">,</span> <span class="n">index</span><span class="p">)</span> <span class="n">updated_options</span> <span class="o">=</span> <span class="no">List</span><span class="o">.</span><span class="n">replace_at</span><span class="p">(</span><span class="n">selectable_options</span><span class="p">,</span> <span class="n">index</span><span class="p">,</span> <span class="p">%{</span><span class="n">current_option</span> <span class="o">|</span> <span class="ss">selected:</span> <span class="n">selected?</span><span class="p">}</span> <span class="p">)</span> <span class="n">send</span><span class="p">(</span><span class="n">self</span><span class="p">(),</span> <span class="p">{</span><span class="ss">:updated_options</span><span class="p">,</span> <span class="n">updated_options</span><span class="p">})</span> <span class="p">{</span><span class="ss">:noreply</span><span class="p">,</span> <span class="n">socket</span><span class="p">}</span> <span class="k">end</span> </code></pre></div><p>There&#39;s a lot going on in that code. Let&#39;s go through it in more detail.</p> <p>The event is emitted with a payload with the following structure:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="p">%{</span><span class="s2">"multi_select"</span> <span class="o">=&gt;</span> <span class="p">%{</span><span class="s2">"options"</span> <span class="o">=&gt;</span> <span class="p">%{</span><span class="s2">"2"</span> <span class="o">=&gt;</span> <span class="p">%{</span><span class="s2">"selected"</span> <span class="o">=&gt;</span> <span class="s2">"true"</span><span class="p">}}</span> <span class="p">}</span> <span class="p">}</span> </code></pre></div><p>First we extract the checkbox <code>index</code> and the <code>selected?</code> value from that payload, with the following line:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="c1">#[{"2", %{"selected" =&gt; "true"}}]</span> <span class="p">[{</span><span class="n">index</span><span class="p">,</span> <span class="p">%{</span><span class="s2">"selected"</span> <span class="o">=&gt;</span> <span class="n">selected?</span><span class="p">}}]</span> <span class="o">=</span> <span class="no">Map</span><span class="o">.</span><span class="n">to_list</span><span class="p">(</span><span class="n">values</span><span class="p">)</span> </code></pre></div><p>We used the <code>:selectable_options</code> assign to store the options list in our component; now we have to update the <em>checked</em> option value inside that list. For that, we get the <code>SelectOption</code> found at the <code>index</code> we got earlier from the <code>:selectable_options</code> assign, and change the <code>:selected</code> value within the list of options.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="n">index</span> <span class="o">=</span> <span class="no">String</span><span class="o">.</span><span class="n">to_integer</span><span class="p">(</span><span class="n">index</span><span class="p">)</span> <span class="n">selectable_options</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">assigns</span><span class="o">.</span><span class="n">selectable_options</span> <span class="n">current_option</span> <span class="o">=</span> <span class="no">Enum</span><span class="o">.</span><span class="n">at</span><span class="p">(</span><span class="n">selectable_options</span><span class="p">,</span> <span class="n">index</span><span class="p">)</span> <span class="n">updated_options</span> <span class="o">=</span> <span class="no">List</span><span class="o">.</span><span class="n">replace_at</span><span class="p">(</span><span class="n">selectable_options</span><span class="p">,</span> <span class="n">index</span><span class="p">,</span> <span class="p">%{</span><span class="n">current_option</span> <span class="o">|</span> <span class="ss">selected:</span> <span class="n">selected?</span><span class="p">}</span> <span class="p">)</span> </code></pre></div><p>Then, we send the updated options to the parent LiveView, so it can decide what to do with them.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="n">send</span><span class="p">(</span><span class="n">self</span><span class="p">(),</span> <span class="p">{</span><span class="ss">:updated_options</span><span class="p">,</span> <span class="n">updated_options</span><span class="p">})</span> </code></pre></div><h2 id='showing-and-hiding-the-selectable-options' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#showing-and-hiding-the-selectable-options' aria-label='Anchor'></a>Showing and Hiding the Selectable Options</h2><p>Now that our component essentially works, we can add life to our simulated HTML <code>&lt;select&gt;</code> tag.</p> <p>We add a chevron-up icon to match the chevron-down we already have, so that both icons have the same location. When the component loads, the <code>#up-</code> icon and the <code>#options_container-</code> element containing the whole list have class <code>hidden</code>, which is defined in our CSS (we use Tailwind) with the property <code>display: none;</code>.</p> <p>A <code>phx-click</code> binding on each <code>&lt;svg&gt;</code> invokes <a href="https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.JS.html#toggle/1">JS.toggle</a> to toggle visibility of both icons and the options list on click.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">"icon"</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">svg</span> <span class="n">id</span><span class="o">=</span><span class="p">{</span><span class="s2">"</span><span class="si">#{</span><span class="nv">@id</span><span class="si">}</span><span class="s2">-down-icon"</span><span class="p">}</span> <span class="n">phx</span><span class="o">-</span><span class="n">click</span><span class="o">=</span><span class="p">{</span> <span class="no">JS</span><span class="o">.</span><span class="n">toggle</span><span class="p">()</span> <span class="o">|&gt;</span> <span class="no">JS</span><span class="o">.</span><span class="n">toggle</span><span class="p">(</span><span class="ss">to:</span> <span class="s2">"#</span><span class="si">#{</span><span class="nv">@id</span><span class="si">}</span><span class="s2">-up-icon"</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="no">JS</span><span class="o">.</span><span class="n">toggle</span><span class="p">(</span><span class="ss">to:</span> <span class="s2">"#</span><span class="si">#{</span><span class="nv">@id</span><span class="si">}</span><span class="s2">-options-container"</span><span class="p">)</span> <span class="p">}</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">path</span> <span class="o">...</span> <span class="o">/&gt;</span> <span class="o">&lt;/</span><span class="n">svg</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">svg</span> <span class="n">id</span><span class="o">=</span><span class="p">{</span><span class="s2">"</span><span class="si">#{</span><span class="nv">@id</span><span class="si">}</span><span class="s2">-up-icon"</span> <span class="n">class</span><span class="o">=</span><span class="s2">"hidden"</span> <span class="n">phx</span><span class="o">-</span><span class="n">click</span><span class="o">=</span><span class="p">{</span> <span class="no">JS</span><span class="o">.</span><span class="n">toggle</span><span class="p">()</span> <span class="o">|&gt;</span> <span class="no">JS</span><span class="o">.</span><span class="n">toggle</span><span class="p">(</span><span class="ss">to:</span> <span class="s2">"#</span><span class="si">#{</span><span class="nv">@id</span><span class="si">}</span><span class="s2">-down-icon"</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="no">JS</span><span class="o">.</span><span class="n">toggle</span><span class="p">(</span><span class="ss">to:</span> <span class="s2">"#</span><span class="si">#{</span><span class="nv">@id</span><span class="si">}</span><span class="s2">-options-container"</span><span class="p">)</span> <span class="p">}</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">path</span> <span class="o">....</span> <span class="o">/&gt;</span> <span class="o">&lt;/</span><span class="n">svg</span><span class="o">&gt;</span> <span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span> </code></pre></div><p>Tada! Our <code>render</code> function is finished!</p> <p><video src="/phoenix-files/2022-05-30/multi_select_03.mp4?card&amp;center?1/3" autoplay="autoplay" loop="loop" muted="muted" playsinline="" disablePictureInPicture="" /></p> <h2 id='multiselectcomponent-in-action' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#multiselectcomponent-in-action' aria-label='Anchor'></a>MultiSelectComponent in Action</h2><p>You&#39;ll remember we were going to let users choose multiple categories to filter our books by. We saw the categories in our examples, but we haven&#39;t shown where they come from yet. We need to plug our categories into <code>MultiSelectComponent</code>.</p> <p>Here they come! We define the assigns we use in the parent LiveView:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">def</span> <span class="n">mount</span><span class="p">(</span><span class="n">_params</span><span class="p">,</span> <span class="n">_session</span><span class="p">,</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span> <span class="n">categories</span> <span class="o">=</span> <span class="p">[</span> <span class="p">%</span><span class="no">SelectOption</span><span class="p">{</span><span class="ss">id:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">label:</span> <span class="s2">"Fantasy"</span><span class="p">,</span> <span class="ss">selected:</span> <span class="no">false</span><span class="p">}</span> <span class="p">%</span><span class="no">SelectOption</span><span class="p">{</span><span class="ss">id:</span> <span class="mi">2</span><span class="p">,</span> <span class="ss">label:</span> <span class="s2">"Horror"</span><span class="p">,</span> <span class="ss">selected:</span> <span class="no">true</span><span class="p">},</span> <span class="p">%</span><span class="no">SelectOption</span><span class="p">{</span><span class="ss">id:</span> <span class="mi">3</span><span class="p">,</span> <span class="ss">label:</span> <span class="s2">"Literary Fiction"</span><span class="p">,</span> <span class="ss">selected:</span> <span class="no">false</span><span class="p">},</span> <span class="p">]</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">set_assigns</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="n">categories</span><span class="p">)}</span> <span class="k">end</span> </code></pre></div><p><code>categories</code> contains our category options in the shape of the <code>SelectOption</code> schema we defined earlier as part of <code>MultiSelectComponent</code>.</p> <p>Our <code>set_assigns/2</code> function sets three assigns we&#39;ll need: <code>:changeset</code>, <code>:books</code>, and <code>:categories</code>:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">defp</span> <span class="n">set_assigns</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="n">categories</span><span class="p">)</span> <span class="k">do</span> <span class="n">socket</span> <span class="o">|&gt;</span> <span class="n">assign</span><span class="p">(</span><span class="ss">:changeset</span><span class="p">,</span> <span class="n">build_changeset</span><span class="p">(</span><span class="n">categories</span><span class="p">))</span> <span class="o">|&gt;</span> <span class="n">assign</span><span class="p">(</span><span class="ss">:books</span><span class="p">,</span> <span class="n">filter_books</span><span class="p">(</span><span class="n">categories</span><span class="p">))</span> <span class="o">|&gt;</span> <span class="n">assign</span><span class="p">(</span><span class="ss">:categories</span><span class="p">,</span> <span class="n">categories</span><span class="p">)</span> <span class="k">end</span> </code></pre></div><p>We&#39;ve discussed <code>:categories</code>, and you can guess what <code>:books</code> and <code>filter_books/2</code> are. What about <code>:changeset</code>?</p> <p>LiveView provides the <a href="https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.Helpers.html#form/1">form</a> function component to create HTML forms. This component receives an <a href="https://hexdocs.pm/ecto/Ecto.Changeset.html">Ecto.Changeset</a> to convert it to a form, and then, the resulting form is used to generate input fields.</p> <p>We create a <a href="#defining-a-data-model">MultiSelect</a> changeset with the <code>build_changeset/1</code> function:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">defp</span> <span class="n">build_changeset</span><span class="p">(</span><span class="n">options</span><span class="p">)</span> <span class="k">do</span> <span class="p">%</span><span class="no">MultiSelect</span><span class="p">{}</span> <span class="o">|&gt;</span> <span class="no">Ecto</span><span class="o">.</span><span class="no">Changeset</span><span class="o">.</span><span class="n">change</span><span class="p">()</span> <span class="o">|&gt;</span> <span class="no">Ecto</span><span class="o">.</span><span class="no">Changeset</span><span class="o">.</span><span class="n">put_embed</span><span class="p">(</span><span class="ss">:options</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span> <span class="k">end</span> </code></pre></div><p>Once the changeset is created, we can use it to create our <code>form</code>:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="o">&lt;.</span><span class="n">form</span> <span class="n">let</span><span class="o">=</span><span class="p">{</span><span class="n">f</span><span class="p">}</span> <span class="n">for</span><span class="o">=</span><span class="p">{</span><span class="nv">@changeset</span><span class="p">}</span> <span class="n">id</span><span class="o">=</span><span class="s2">"multiselect-form"</span><span class="o">&gt;</span> <span class="o">&lt;/.</span><span class="n">form</span><span class="o">&gt;</span> </code></pre></div><p>An important detail here is that our form is accessible in the <code>f</code> variable. We need to pass this to our inputs so it all gets linked together inside our <code>MultiSelectComponent</code>. For that, we just render our <code>MultiSelectComponent</code> inside our form as follows:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="o">&lt;.</span><span class="n">form</span> <span class="n">let</span><span class="o">=</span><span class="p">{</span><span class="n">f</span><span class="p">}</span> <span class="n">for</span><span class="o">=</span><span class="p">{</span><span class="nv">@changeset</span><span class="p">}</span> <span class="n">id</span><span class="o">=</span><span class="s2">"multiselect-form"</span><span class="o">&gt;</span> <span class="o">&lt;.</span><span class="n">live_component</span> <span class="n">id</span><span class="o">=</span><span class="s2">"multi"</span> <span class="n">module</span><span class="o">=</span><span class="p">{</span><span class="no">MultiSelectComponent</span><span class="p">}</span> <span class="n">options</span><span class="o">=</span><span class="p">{</span><span class="nv">@categories</span><span class="p">}</span> <span class="n">form</span><span class="o">=</span><span class="p">{</span><span class="n">f</span><span class="p">}</span> <span class="o">/&gt;</span> <span class="o">&lt;/.</span><span class="n">form</span><span class="o">&gt;</span> </code></pre></div><p>When a category is selected in the <code>MultiSelectComponent</code>, an update is sent to the parent LiveView. The parent LiveView needs to handle the event and update the books list:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">def</span> <span class="n">handle_info</span><span class="p">({</span><span class="ss">:updated_options</span><span class="p">,</span> <span class="n">options</span><span class="p">},</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span> <span class="c1"># update books list, the selected categories and the changeset</span> <span class="p">{</span><span class="ss">:noreply</span><span class="p">,</span> <span class="n">set_assigns</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="n">options</span><span class="p">)}</span> <span class="k">end</span> </code></pre></div><p>When the update is received, the parent assigns are updated and the <code>update/2</code> function inside our <code>MultiSelectComponent</code> is called. This means both parent and multi-select component <code>:categories/:selected_options</code> are updated, and both the parent LiveView and the <code>MultiSelectComponent</code> now have the same information.</p> <p>The parent LiveView <a href="https://hexdocs.pm/phoenix_live_view/Phoenix.LiveComponent.html#module-liveview-as-the-source-of-truth">is the source of truth</a>; it keeps the selected categories and is responsible for updating the <code>MultiSelectComponent</code> assigns.</p> <p><video src="/phoenix-files/2022-05-30/multi_select_04.mp4?card&amp;center" autoplay="autoplay" loop="loop" muted="muted" playsinline="" disablePictureInPicture="" /></p> <figure class="post-cta"> <figcaption> <h1> Fly.io ❤️ Elixir</h1><p> Fly.io is a great way to run your Phoenix LiveView app close to your users. It&#39;s really easy to get started. You can be running in minutes.</p><p><a class="button bg-white text-violet-600 hover:bg-opacity-75 hover:text-violet-700 transition-colors" href="https://fly.io/docs/elixir/"> Deploy a Phoenix app today!&nbsp;&nbsp;<span class='opacity:50'>&rarr;</span> </a></p> </figcaption><div class="image-container"> <img src="/static/images/cta-kitty.webp" srcset="/static/images/cta-kitty@2x.webp 2x" alt=""></div></figure><p>Wow, we covered a lot! We built a highly responsive fancy filter feature, without writing any JavaScript!</p> <p>Our component is great, but we can still improve it. Let&#39;s think about the future: what would happen to the selected options if we lost the internet connection for a few seconds and the page was reloaded? What if, in addition to sending updates to the parent LiveView, we want to perform another action?</p> <h2 id='bonus-form-recovery' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#bonus-form-recovery' aria-label='Anchor'></a>Bonus: Form Recovery</h2><p>What happens to the component if we lose the connection and then recover it?</p> <p>Let&#39;s try selecting some values, stopping the app and starting it again to see what happens:</p> <p><video src="/phoenix-files/2022-05-30/multi_select_05.mp4?card&amp;center" autoplay="autoplay" loop="loop" muted="muted" playsinline="" disablePictureInPicture="" /></p> <p>The selected options are lost!</p> <p>To avoid losing the selected options, we make use of <a href="https://hexdocs.pm/phoenix_live_view/0.7.0/Phoenix.LiveView.html#module-form-recovery-following-crashes-or-disconnects">form recovery</a> after reconnections. We mark our form with the <code>phx-change</code> binding, so that the <code>validate</code> event is triggered to the server with the selected values right after the connection is re-established.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="o">&lt;.</span><span class="n">form</span> <span class="n">let</span><span class="o">=</span><span class="p">{</span><span class="n">f</span><span class="p">}</span> <span class="n">for</span><span class="o">=</span><span class="p">{</span><span class="nv">@changeset</span><span class="p">}</span> <span class="n">id</span><span class="o">=</span><span class="s2">"multiselect-form"</span> <span class="n">phx</span><span class="o">-</span><span class="n">change</span><span class="o">=</span><span class="s2">"validate"</span> <span class="o">&gt;</span> <span class="o">...</span> <span class="o">&lt;/.</span><span class="n">form</span><span class="o">&gt;</span> </code></pre></div><p>Now we have to set all our assigns inside the <code>handle_event</code> callback:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="c1">#multi_form = %{ "options" =&gt; </span> <span class="c1"># %{</span> <span class="c1"># "0" =&gt; </span> <span class="c1"># %{"id" =&gt; "1", "label" =&gt; "Fantasy", "selected" =&gt; "true"},</span> <span class="c1"># "1" =&gt; </span> <span class="c1"># %{"id" =&gt; "2", "label" =&gt; "Horror", "selected" =&gt; "true"},</span> <span class="c1"># "2" =&gt; </span> <span class="c1"># %{"id" =&gt; "3", "label" =&gt; "Liter...", "selected" =&gt; "true"}</span> <span class="c1"># }</span> <span class="c1">#}</span> <span class="k">def</span> <span class="n">handle_event</span><span class="p">(</span> <span class="s2">"validate"</span><span class="p">,</span> <span class="p">%{</span><span class="s2">"multi_select"</span> <span class="o">=&gt;</span> <span class="n">multi_form</span><span class="p">},</span> <span class="n">socket</span> <span class="p">)</span> <span class="k">do</span> <span class="n">options</span> <span class="o">=</span> <span class="n">build_options</span><span class="p">(</span><span class="n">multi_form</span><span class="p">[</span><span class="s2">"options"</span><span class="p">])</span> <span class="p">{</span><span class="ss">:noreply</span><span class="p">,</span> <span class="n">set_assigns</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="n">options</span><span class="p">)}</span> <span class="k">end</span> </code></pre></div><p>We receive all the values that had been selected and were saved thanks to our form. The <code>build_options/1</code> function is just a helper to create a list of <code>SelectOption</code> with the form values.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">defp</span> <span class="n">build_options</span><span class="p">(</span><span class="n">options</span><span class="p">)</span> <span class="k">do</span> <span class="no">Enum</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="n">options</span><span class="p">,</span> <span class="k">fn</span> <span class="p">{</span><span class="n">_idx</span><span class="p">,</span> <span class="n">data</span><span class="p">}</span> <span class="o">-&gt;</span> <span class="p">%</span><span class="no">SelectOption</span><span class="p">{</span> <span class="ss">id:</span> <span class="n">data</span><span class="p">[</span><span class="s2">"id"</span><span class="p">],</span> <span class="ss">label:</span> <span class="n">data</span><span class="p">[</span><span class="s2">"label"</span><span class="p">],</span> <span class="ss">selected:</span> <span class="n">data</span><span class="p">[</span><span class="s2">"selected"</span><span class="p">]</span> <span class="p">}</span> <span class="k">end</span><span class="p">)</span> <span class="k">end</span> </code></pre></div><p>With these changes, we ensure that the form can recover the values after reconnecting:</p> <p><video src="/phoenix-files/2022-05-30/multi_select_06.mp4?card&amp;center" autoplay="autoplay" loop="loop" muted="muted" playsinline="" disablePictureInPicture="" /></p> <h2 id='bonus-2-customized-behavior-when-options-are-selected' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#bonus-2-customized-behavior-when-options-are-selected' aria-label='Anchor'></a>Bonus 2: Customized Behavior When Options Are Selected.</h2><p>Right now, every time an element is selected, we send the updates to the parent LiveView. However, we are creating a reusable component; wouldn&#39;t it be better to be able to customize what action to take when there is a new selection?</p> <p>To do this, we apply a little trick; we send a function in the component&#39;s parameters to be executed when an element is selected.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="o">&lt;.</span><span class="n">live_component</span> <span class="n">id</span><span class="o">=</span><span class="s2">"multi"</span> <span class="n">module</span><span class="o">=</span><span class="p">{</span><span class="no">MultiSelectComponent</span><span class="p">}</span> <span class="n">options</span><span class="o">=</span><span class="p">{</span><span class="nv">@categories</span><span class="p">}</span> <span class="n">form</span><span class="o">=</span><span class="p">{</span><span class="n">f</span><span class="p">}</span> <span class="n">selected</span><span class="o">=</span><span class="p">{</span><span class="k">fn</span> <span class="n">opts</span> <span class="o">-&gt;</span> <span class="n">send</span><span class="p">(</span><span class="n">self</span><span class="p">(),</span> <span class="p">{</span><span class="ss">:updated_options</span><span class="p">,</span> <span class="n">opts</span><span class="p">})</span> <span class="k">end</span><span class="p">}</span> <span class="o">/&gt;</span> </code></pre></div><p>Then we keep the <code>:selected</code> function in the component assigns:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">def</span> <span class="n">update</span><span class="p">(</span><span class="n">params</span><span class="p">,</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span> <span class="p">%{</span><span class="ss">options:</span> <span class="n">options</span><span class="p">,</span> <span class="ss">form:</span> <span class="n">form</span><span class="p">,</span> <span class="ss">id:</span> <span class="n">id</span><span class="p">,</span> <span class="ss">selected:</span> <span class="n">selected</span><span class="p">}</span> <span class="o">=</span> <span class="n">params</span> <span class="n">socket</span> <span class="o">=</span> <span class="n">socket</span> <span class="o">|&gt;</span> <span class="n">assign</span><span class="p">(</span><span class="ss">:id</span><span class="p">,</span> <span class="n">id</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="n">assign</span><span class="p">(</span><span class="ss">:selectable_options</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="n">assign</span><span class="p">(</span><span class="ss">:form</span><span class="p">,</span> <span class="n">form</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="n">assign</span><span class="p">(</span><span class="ss">:selected_options</span><span class="p">,</span> <span class="n">filter_selected_options</span><span class="p">(</span><span class="n">options</span><span class="p">))</span> <span class="o">|&gt;</span> <span class="n">assign</span><span class="p">(</span><span class="ss">:selected</span><span class="p">,</span> <span class="n">selected</span><span class="p">)</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">socket</span><span class="p">}</span> <span class="k">end</span> </code></pre></div><p>That way we can execute any function with an arity 1 when we handle the <code>checked</code> event:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">def</span> <span class="n">handle_event</span><span class="p">(</span> <span class="s2">"checked"</span><span class="p">,</span> <span class="p">%{</span><span class="s2">"multi_select"</span> <span class="o">=&gt;</span> <span class="p">%{</span><span class="s2">"options"</span> <span class="o">=&gt;</span> <span class="n">values</span><span class="p">}},</span> <span class="n">socket</span> <span class="p">)</span> <span class="k">do</span> <span class="o">.</span> <span class="o">.</span> <span class="o">.</span> <span class="n">socket</span><span class="o">.</span><span class="n">assigns</span><span class="o">.</span><span class="n">selected</span><span class="o">.</span><span class="p">(</span><span class="n">updated_options</span><span class="p">)</span> <span class="p">{</span><span class="ss">:noreply</span><span class="p">,</span> <span class="n">socket</span><span class="p">}</span> <span class="k">end</span> </code></pre></div><p>Pretty slick! It lets the caller of the function decide what action to apply.</p> <h2 id='wrap-up' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#wrap-up' aria-label='Anchor'></a>Wrap-Up</h2><p>In our example we used the <code>Phoenix.LiveComponent</code> behavior to separate markup, state and events into a component that we can reuse as many times as needed. We designed a data model to keep the selectable options independent of any specific use case, we designed our component to be used as part of any custom <code>Phoenix.Form</code>, and we used a trick to execute a callback function each time an option is selected.</p> <p>All these design decisions to create a solid base to reuse our component and customize it to fit our needs!</p> <p>Where else would you use this multi-select component?</p> <p>You can find this example here: <a href="https://github.com/bemesa21/phoenix_files/">bemesa21/phoenix_files</a></p> </content>
</entry>
<entry>
<title>Recognize digits using ML in Elixir</title>
<link rel="alternate" href="https://fly.io/phoenix-files/recognize-digits-using-ml-in-elixir/"/>
<id>https://fly.io/phoenix-files/recognize-digits-using-ml-in-elixir/</id>
<published>2022-05-05T00:00:00+00:00</published>
<updated>2023-04-06T14:48:02+00:00</updated>
<content type="html"><p class="lead"> Here&#39;s Philip Brown, Elixir engineer <a href="https://yflag.com/">Yellow Flag</a>, with a tutorial on building a fullstack machine learning application using Nx, Axon, and LiveView. Coincidentally, Fly.io is the perfect place to run your LiveView apps. <a href="https://fly.io/docs/elixir/">Get started</a>.</p><p>(<strong class='font-semibold text-navy'>Updated</strong> March 2023 by <a href="https://twitter.com/tjcberman">Tom Berman</a> for the official Axon releases.)</p> <p>Machine learning allows you to solve problems that were once totally unimaginable. The ability for a computer to take an image and tell you what it sees was once only possible in science fiction.</p> <p>Now, it&#39;s possible to build machine learning models that can do amazing things. However, part of the challenge of machine learning is that there are a lot of moving parts to learn. This means that solving a problem with machine learning can be a difficult task for an individual engineer.</p> <p>One of the big advantages Elixir has over similar programming languages is the integrated nature of what you have available to you. You can do a lot in Elixir without ever leaving the comfort of the language you love.</p> <h2 id='what-are-we-going-to-build' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#what-are-we-going-to-build' aria-label='Anchor'></a>What Are We Going to Build?</h2><p>In this tutorial we&#39;re going to look at building out an end-to-end machine learning project using only Elixir. Boom! As if that wasn&#39;t enough, we&#39;re going to build a machine learning model that can recognize a handwritten digit. We&#39;ll train the model so that it will predict the digit from an image. We&#39;ll also build an application that can accept new handwritten digits from the user, and then display the prediction.</p> <aside class="right-sidenote"> <strong class='font-semibold text-navy'>HOT TIP!</strong> Be sure to grab the full code for this tutorial <a href="https://github.com/philipbrown/handwritten-digits">here</a>!</aside><p>Here&#39;s a preview of what it looks like:</p> <p><video title="Handwritten prediction animation" src="/phoenix-files/2022-05-05/handwritten-predictions.mp4?center&amp;2/3&amp;card" autoplay="autoplay" loop="loop" muted="muted" playsinline="" disablePictureInPicture="" /></p> <p>Let&#39;s get started!</p> <h2 id='setting-up-the-project' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#setting-up-the-project' aria-label='Anchor'></a>Setting Up the Project</h2><p>We&#39;re going to build this project using <a href="https://www.phoenixframework.org">Phoenix</a>, so the first thing we need is to create a new Phoenix project.</p> <p>If you don&#39;t already have Elixir installed on your computer, you can find instructions for your operating system on the <a href="https://elixir-lang.org/install.html">Elixir Website</a>.</p> <p>Once you have Phoenix installed, you can run the following command in terminal:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight bash'><code><span class="nv">$ </span>mix archive.install hex phx_new </code></pre></div><p>With Elixir and Phoenix installed, we can create a new Phoenix project:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight '><code>$ mix phx.new digits --no-ecto </code></pre></div><p>I&#39;m including the <code>--no-ecto</code> flag because we don&#39;t need a database for this project. This command should prompt you to install the project&#39;s dependencies. Hit <code>Y</code> on that prompt and wait for the dependencies to be installed.</p> <p>Once the dependencies are installed, follow the onscreen instructions to run your new Phoenix application and verify that everything was set up correctly.</p> <p>I&#39;m also going to add the <a href="https://github.com/phoenixframework/tailwind">Tailwind</a> package for styling the application. If you want to add Tailwind to your project add the following to the list of dependencies in your <code>mix.exs</code> file:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="p">{</span><span class="ss">:tailwind</span><span class="p">,</span> <span class="s2">"~&gt; 0.1"</span><span class="p">,</span> <span class="ss">runtime:</span> <span class="no">Mix</span><span class="o">.</span><span class="n">env</span><span class="p">()</span> <span class="o">==</span> <span class="ss">:dev</span><span class="p">}</span> </code></pre></div><p>Then follow the configuration instructions listed <a href="https://github.com/phoenixframework/tailwind#installation">here</a>.</p> <h2 id='where-will-get-our-training-data' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#where-will-get-our-training-data' aria-label='Anchor'></a>Where Will Get Our Training Data?</h2><p>One of the most important aspects of machine learning is having good, quality data to train on. When working on real life machine learning projects, expect to spend the majority of your time on the data.</p> <p>Fortunately for us, there is already a ready made dataset we can use. The <a href="https://en.wikipedia.org/wiki/MNIST_database">MNIST Database</a> is a large dataset of handwritten digits that have already been prepared and labeled. This dataset is commonly used for training image recognition machine learning models. The dataset consists of images of handwritten digits from 0 - 9 that are already labeled.</p> <h2 id='prepare-the-project-for-machine-learning' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#prepare-the-project-for-machine-learning' aria-label='Anchor'></a>Prepare the Project for Machine Learning</h2><p>Next, we need to set up the machine learning model. The Elixir ecosystem has a number of exciting packages that can be used for training machine learning models.</p> <p>The <a href="https://github.com/elixir-nx/nx/tree/main/nx#readme">Nx</a> package is the foundation of machine learning in Elixir. Nx allows us to manipulate our data using tensors, which are essentially efficient multi-dimensional arrays. When we say &quot;tensor&quot; below, just think &quot;multi-dimensional array&quot;.</p> <p>Next, we have <a href="https://github.com/elixir-nx/nx/tree/main/exla#readme">EXLA</a>, which provides hardware acceleration for training our models. Crunching the numbers of machine learning is a very intensive process, but EXLA makes that much faster.</p> <p><a href="https://github.com/elixir-nx/axon">Axon</a> builds on top of Nx and makes it possible for us to create neural networks in Elixir.</p> <p>Finally we have the <a href="https://github.com/elixir-nx/scidata">Scidata</a> package, which provides conveniences for working with machine learning datasets, including MNIST.</p> <p>So, the first thing we need to do is to add those dependencies to our <code>mix.exs</code> file:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="p">{</span><span class="ss">:axon</span><span class="p">,</span> <span class="s2">"~&gt; 0.5.1"</span><span class="p">},</span> <span class="p">{</span><span class="ss">:exla</span><span class="p">,</span> <span class="s2">"~&gt; 0.5.1"</span><span class="p">},</span> <span class="p">{</span><span class="ss">:nx</span><span class="p">,</span> <span class="s2">"~&gt; 0.5.1"</span><span class="p">},</span> <span class="p">{</span><span class="ss">:scidata</span><span class="p">,</span> <span class="s2">"~&gt; 0.1.5"</span><span class="p">}</span> </code></pre></div><p>Then we can install our new dependencies from a terminal:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight bash'><code><span class="nv">$ </span>mix deps.get </code></pre></div><p>We also need to set the default backend in <code>config.exs</code></p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="kn">import</span> <span class="no">Config</span> <span class="c1"># Set the backend for Nx</span> <span class="n">config</span> <span class="ss">:nx</span><span class="p">,</span> <span class="ss">:default_backend</span><span class="p">,</span> <span class="no">EXLA</span><span class="o">.</span><span class="no">Backend</span> </code></pre></div><h2 id='working-with-our-training-data' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#working-with-our-training-data' aria-label='Anchor'></a>Working With Our Training Data</h2><p>There&#39;s a couple of steps required for getting and transforming the training data, so we&#39;ll start building out a module that can encapsulate everything that we&#39;re building:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">defmodule</span> <span class="no">Digits</span><span class="o">.</span><span class="no">Model</span> <span class="k">do</span> <span class="nv">@moduledoc</span> <span class="sd">""" The Digits Machine Learning model """</span> <span class="k">end</span> </code></pre></div><p>First up we&#39;ll add a <code>download/0</code> function that downloads the training data for us. We&#39;re just delegating to the <code>Scidata</code> package for that.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">def</span> <span class="n">download</span> <span class="k">do</span> <span class="no">Scidata</span><span class="o">.</span><span class="no">MNIST</span><span class="o">.</span><span class="n">download</span><span class="p">()</span> <span class="k">end</span> </code></pre></div><p>This function returns a tuple of <code>{images, labels}</code>. However, we want to transform the images and labels so we can use them in our model.</p> <p>First, we&#39;ll use the following function to transform the images:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">def</span> <span class="n">transform_images</span><span class="p">({</span><span class="n">binary</span><span class="p">,</span> <span class="n">type</span><span class="p">,</span> <span class="n">shape</span><span class="p">})</span> <span class="k">do</span> <span class="n">binary</span> <span class="o">|&gt;</span> <span class="no">Nx</span><span class="o">.</span><span class="n">from_binary</span><span class="p">(</span><span class="n">type</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="no">Nx</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">shape</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="no">Nx</span><span class="o">.</span><span class="n">divide</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span> <span class="k">end</span> </code></pre></div><p>The image data from the download includes the following:</p> <ul> <li>Binary data - This is the image data as a binary. </li><li>The type of the data - In this example the type is <code>{:u, 8}</code> unsigned integer. </li><li>The shape of the data - In this example the shape is <code>{60000, 1, 28, 28}</code>. This means there are 60000 images, which all have 1 channel (ie they&#39;re black and white) and have a dimension of 28x28. </li></ul> <p>We can convert the binary into a tensor using Nx.</p> <p>If we open up <code>iex</code> we can visualize the image data. Run the following command in a terminal to open up <code>iex</code> with our project loaded:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight bash'><code><span class="nv">$ </span>iex <span class="nt">-S</span> mix </code></pre></div><p>Next, we run the following code:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="p">{</span><span class="n">images</span><span class="p">,</span> <span class="n">labels</span><span class="p">}</span> <span class="o">=</span> <span class="no">Digits</span><span class="o">.</span><span class="no">Model</span><span class="o">.</span><span class="n">download</span><span class="p">()</span> <span class="n">images</span> <span class="o">|&gt;</span> <span class="no">Digits</span><span class="o">.</span><span class="no">Model</span><span class="o">.</span><span class="n">transform_images</span><span class="p">()</span> <span class="o">|&gt;</span> <span class="no">Nx</span><span class="o">.</span><span class="n">slice_axis</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="no">Nx</span><span class="o">.</span><span class="n">reshape</span><span class="p">({</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">28</span><span class="p">})</span> <span class="o">|&gt;</span> <span class="no">Nx</span><span class="o">.</span><span class="n">to_heatmap</span><span class="p">()</span> </code></pre></div><p>You should see the first handwritten digit of the dataset. This is what it looks like:</p> <p><img src="/phoenix-files/2022-05-05/example-digit-no-5.webp?centered&amp;1/3&amp;card" alt="Sample image of number 5 digit heatmap" /></p> <p>We can see the corresponding label for the image too. Let&#39;s see how to do that.</p> <p>First, we pattern match the binary data and type from the downloaded label data.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="p">{</span><span class="n">binary</span><span class="p">,</span> <span class="n">type</span><span class="p">,</span> <span class="n">_</span><span class="p">}</span> <span class="o">=</span> <span class="n">labels</span> </code></pre></div><p>Then we convert the binary to a tensor and &quot;slice&quot; off the first item as our example.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="n">binary</span> <span class="o">|&gt;</span> <span class="no">Nx</span><span class="o">.</span><span class="n">from_binary</span><span class="p">(</span><span class="n">type</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="no">Nx</span><span class="o">.</span><span class="n">new_axis</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="no">Nx</span><span class="o">.</span><span class="n">slice_axis</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> </code></pre></div><p>The first label should be a <code>5</code>. We&#39;ll refactor that code in our transform function to get the labels.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">def</span> <span class="n">transform_labels</span><span class="p">({</span><span class="n">binary</span><span class="p">,</span> <span class="n">type</span><span class="p">,</span> <span class="n">_</span><span class="p">})</span> <span class="k">do</span> <span class="n">binary</span> <span class="o">|&gt;</span> <span class="no">Nx</span><span class="o">.</span><span class="n">from_binary</span><span class="p">(</span><span class="n">type</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="no">Nx</span><span class="o">.</span><span class="n">new_axis</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="no">Nx</span><span class="o">.</span><span class="n">equal</span><span class="p">(</span><span class="no">Nx</span><span class="o">.</span><span class="n">tensor</span><span class="p">(</span><span class="no">Enum</span><span class="o">.</span><span class="n">to_list</span><span class="p">(</span><span class="mi">0</span><span class="o">..</span><span class="mi">9</span><span class="p">)))</span> <span class="k">end</span> </code></pre></div><p>The labels of the training data are used as targets for the model&#39;s predictions. For each image, we know how it was labelled. During training, the model uses the labels to compare it&#39;s predictions with the actual correct result. The guessing is adjusted to give better results in the future.</p> <p>Currently, the labels are integers from 0 - 9. You can think of them as 10 different categories. In our case, the categories are integers, but when training a machine learning model, you might have categories such as colors, sizes, types of animals, etc.</p> <p>So we need to convert our categories into something that the machine learning model can understand. The way we do this is to convert the label into a tensor of size <code>{1, 10}</code>, where <code>10</code> is the number of categories you have.</p> <p>For example:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="c1">#Nx.Tensor&lt;</span> <span class="n">u8</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">10</span><span class="p">]</span> <span class="p">[</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span> <span class="p">]</span> <span class="o">&gt;</span> </code></pre></div><p>In this example, the long list of numbers has a <code>1</code> is in the first position. This represents the first category. In our case, that is the number &quot;0&quot;, but it could also be the color &quot;red&quot;, the size &quot;small&quot;, or the type of animal &quot;dog&quot;.</p> <p>The second category would be:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="c1">#Nx.Tensor&lt;</span> <span class="n">u8</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">10</span><span class="p">]</span> <span class="p">[</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span> <span class="p">]</span> <span class="o">&gt;</span> </code></pre></div><p>And so on.</p> <p>This process is called one-hot encoding.</p> <p>You can see what the first label of the training data is when it&#39;s been one-hot encoded using the following chunk of code. (Still in <code>iex</code>):</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="n">labels</span> <span class="o">|&gt;</span> <span class="no">Digits</span><span class="o">.</span><span class="no">Model</span><span class="o">.</span><span class="n">transform_labels</span><span class="p">()</span> <span class="o">|&gt;</span> <span class="no">Nx</span><span class="o">.</span><span class="n">slice_axis</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> </code></pre></div><p>This should output the following tensor:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="c1">#Nx.Tensor&lt;</span> <span class="n">u8</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">10</span><span class="p">]</span> <span class="p">[</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span> <span class="p">]</span> <span class="o">&gt;</span> </code></pre></div><p>Remember, we&#39;re working with the number <code>5</code> right now. This tensor is an array of zeros with a <code>1</code> in the index for the 5. Counting from 0, the <code>1</code> is in the 5th spot.</p> <p>Next, we convert the images and labels into batches. During training, we feed the data into the model in batches rather all at once. In this example we&#39;re using a batch size of 32. This means each batch will include 32 examples.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="n">batch_size</span> <span class="o">=</span> <span class="mi">32</span> <span class="n">images</span> <span class="o">=</span> <span class="n">images</span> <span class="o">|&gt;</span> <span class="no">Digits</span><span class="o">.</span><span class="no">Model</span><span class="o">.</span><span class="n">transform_images</span><span class="p">()</span> <span class="o">|&gt;</span> <span class="no">Nx</span><span class="o">.</span><span class="n">to_batched</span><span class="p">(</span><span class="n">batch_size</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="no">Enum</span><span class="o">.</span><span class="n">to_list</span><span class="p">()</span> <span class="n">labels</span> <span class="o">=</span> <span class="n">labels</span> <span class="o">|&gt;</span> <span class="no">Digits</span><span class="o">.</span><span class="no">Model</span><span class="o">.</span><span class="n">transform_labels</span><span class="p">()</span> <span class="o">|&gt;</span> <span class="no">Nx</span><span class="o">.</span><span class="n">to_batched</span><span class="p">(</span><span class="n">batch_size</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="no">Enum</span><span class="o">.</span><span class="n">to_list</span><span class="p">()</span> </code></pre></div><p>Next, we zip the images and labels together using <code>Enum.zip</code>. Then we split the dataset into training, testing, and validation datasets. We need to use the majority of the data for training, and then a portion of the data to use to test the accuracy of the model. In this example we&#39;re using 80% of the data for training and validation, and the remaining 20% unseen data will be used for testing.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="n">data</span> <span class="o">=</span> <span class="no">Enum</span><span class="o">.</span><span class="n">zip</span><span class="p">(</span><span class="n">images</span><span class="p">,</span> <span class="n">labels</span><span class="p">)</span> <span class="n">training_count</span> <span class="o">=</span> <span class="n">floor</span><span class="p">(</span><span class="mf">0.8</span> <span class="o">*</span> <span class="no">Enum</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="n">data</span><span class="p">))</span> <span class="n">validation_count</span> <span class="o">=</span> <span class="n">floor</span><span class="p">(</span><span class="mf">0.2</span> <span class="o">*</span> <span class="n">training_count</span><span class="p">)</span> <span class="p">{</span><span class="n">training_data</span><span class="p">,</span> <span class="n">test_data</span><span class="p">}</span> <span class="o">=</span> <span class="no">Enum</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">training_count</span><span class="p">)</span> <span class="p">{</span><span class="n">validation_data</span><span class="p">,</span> <span class="n">training_data</span><span class="p">}</span> <span class="o">=</span> <span class="no">Enum</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="n">train</span><span class="p">,</span> <span class="n">validation_count</span><span class="p">)</span> </code></pre></div><p>Phew! That may seem pretty heavy but we&#39;ve already achieved a lot! We&#39;ve downloaded our training data, preprocessed it, and got it ready for building the model. During a real-life machine learning project you will likely spend a lot of time at acquiring, cleaning, and manipulating the data. We&#39;re now in a great position to build and train the model!</p> <h2 id='building-the-model' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#building-the-model' aria-label='Anchor'></a>Building the Model</h2><p>Next up we&#39;ll use Axon to build the machine learning model. Add a new function to the <code>Digits.Model</code> module with the following code:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">def</span> <span class="n">new</span><span class="p">({</span><span class="n">channels</span><span class="p">,</span> <span class="n">height</span><span class="p">,</span> <span class="n">width</span><span class="p">})</span> <span class="k">do</span> <span class="no">Axon</span><span class="o">.</span><span class="n">input</span><span class="p">(</span><span class="s2">"input_0"</span><span class="p">,</span> <span class="ss">shape:</span> <span class="p">{</span><span class="no">nil</span><span class="p">,</span> <span class="n">channels</span><span class="p">,</span> <span class="n">height</span><span class="p">,</span> <span class="n">width</span><span class="p">})</span> <span class="o">|&gt;</span> <span class="no">Axon</span><span class="o">.</span><span class="n">flatten</span><span class="p">()</span> <span class="o">|&gt;</span> <span class="no">Axon</span><span class="o">.</span><span class="n">dense</span><span class="p">(</span><span class="mi">128</span><span class="p">,</span> <span class="ss">activation:</span> <span class="ss">:relu</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="no">Axon</span><span class="o">.</span><span class="n">dense</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="ss">activation:</span> <span class="ss">:softmax</span><span class="p">)</span> <span class="k">end</span> </code></pre></div><p>First we need to set the input shape of the model to fit our training data. Next we flatten the previous layer and add a dense layer that uses relu as the activation function. Finally the output layer returns one of 10 labels (because our labels are 0 - 9).</p> <p>You can experiment with different model configurations to get different results.</p> <h2 id='training-the-model' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#training-the-model' aria-label='Anchor'></a>Training the Model</h2><p>Now that we have the data and the model, we can start training. Add another function to <code>Digits.Model</code> to train the model:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">def</span> <span class="n">train</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">training_data</span><span class="p">,</span> <span class="n">validation_data</span><span class="p">)</span> <span class="k">do</span> <span class="n">model</span> <span class="o">|&gt;</span> <span class="no">Axon</span><span class="o">.</span><span class="no">Loop</span><span class="o">.</span><span class="n">trainer</span><span class="p">(</span><span class="ss">:categorical_cross_entropy</span><span class="p">,</span> <span class="no">Axon</span><span class="o">.</span><span class="no">Optimizers</span><span class="o">.</span><span class="n">adam</span><span class="p">(</span><span class="mf">0.01</span><span class="p">))</span> <span class="o">|&gt;</span> <span class="no">Axon</span><span class="o">.</span><span class="no">Loop</span><span class="o">.</span><span class="n">metric</span><span class="p">(</span><span class="ss">:accuracy</span><span class="p">,</span> <span class="s2">"Accuracy"</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="no">Axon</span><span class="o">.</span><span class="no">Loop</span><span class="o">.</span><span class="n">validate</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">validation_data</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="no">Axon</span><span class="o">.</span><span class="no">Loop</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">training_data</span><span class="p">,</span> <span class="p">%{},</span> <span class="ss">compiler:</span> <span class="no">EXLA</span><span class="p">,</span> <span class="ss">epochs:</span> <span class="mi">10</span><span class="p">)</span> <span class="k">end</span> </code></pre></div><p>We&#39;re using categorical cross entropy because we&#39;re matching multiple labels and the &quot;adam&quot; optimizer because it gives fairly good results. We&#39;ll track a single accuracy metric, and we&#39;ll also validate the model with our validation data from earlier to ensure the model is not over-fitting on the training data.</p> <p>Finally we&#39;ll use EXLA as the compiler and we&#39;ll train for 10 epochs. An epoch is one cycle through the data, so this means we&#39;ll cycle through the data 10 times during training.</p> <h2 id='testing-our-model' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#testing-our-model' aria-label='Anchor'></a>Testing Our Model</h2><p>We can also test our model after training to get an idea of how well it performs. Add the following function to <code>Digits.Model</code>:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">def</span> <span class="n">test</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">state</span><span class="p">,</span> <span class="n">test_data</span><span class="p">)</span> <span class="k">do</span> <span class="n">model</span> <span class="o">|&gt;</span> <span class="no">Axon</span><span class="o">.</span><span class="no">Loop</span><span class="o">.</span><span class="n">evaluator</span><span class="p">()</span> <span class="o">|&gt;</span> <span class="no">Axon</span><span class="o">.</span><span class="no">Loop</span><span class="o">.</span><span class="n">metric</span><span class="p">(</span><span class="ss">:accuracy</span><span class="p">,</span> <span class="s2">"Accuracy"</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="no">Axon</span><span class="o">.</span><span class="no">Loop</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">test_data</span><span class="p">,</span> <span class="n">state</span><span class="p">)</span> <span class="k">end</span> </code></pre></div><p>This tests the model using previously unseen data to check the accuracy of the predictions.</p> <h2 id='saving-and-loading-our-model' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#saving-and-loading-our-model' aria-label='Anchor'></a>Saving and Loading Our Model</h2><p>The final thing to do is to add the ability to save and load the model. Our model is just an Elixir struct, so saving and loading it is simply a case of using Erlang&#39;s <code>binary_to_term/1</code> and <code>term_to_binary/1</code> functions:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">def</span> <span class="n">save!</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">state</span><span class="p">)</span> <span class="k">do</span> <span class="n">contents</span> <span class="o">=</span> <span class="no">Axon</span><span class="o">.</span><span class="n">serialize</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">state</span><span class="p">)</span> <span class="no">File</span><span class="o">.</span><span class="n">write!</span><span class="p">(</span><span class="n">path</span><span class="p">(),</span> <span class="n">contents</span><span class="p">)</span> <span class="k">end</span> <span class="k">def</span> <span class="n">load!</span> <span class="k">do</span> <span class="n">path</span><span class="p">()</span> <span class="o">|&gt;</span> <span class="no">File</span><span class="o">.</span><span class="n">read!</span><span class="p">()</span> <span class="o">|&gt;</span> <span class="no">Axon</span><span class="o">.</span><span class="n">deserialize</span><span class="p">()</span> <span class="k">end</span> <span class="k">def</span> <span class="n">path</span> <span class="k">do</span> <span class="no">Path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">Application</span><span class="o">.</span><span class="n">app_dir</span><span class="p">(</span><span class="ss">:digits</span><span class="p">,</span> <span class="s2">"priv"</span><span class="p">),</span> <span class="s2">"model.axon"</span><span class="p">)</span> <span class="k">end</span> </code></pre></div><h2 id='running-the-model' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#running-the-model' aria-label='Anchor'></a>Running the Model</h2><p>Now that we&#39;ve written all the code to transform the data, train, and test our machine learning model, we&#39;ll write a mix command to put it all together:</p> <aside class="right-sidenote"> <strong class='font-semibold text-navy'>NOTE:</strong> The mix task locally caches the downloaded Minst data set so it doesn&#39;t download it every time it&#39;s run.</aside><div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">defmodule</span> <span class="no">Mix</span><span class="o">.</span><span class="no">Tasks</span><span class="o">.</span><span class="no">Train</span> <span class="k">do</span> <span class="kn">use</span> <span class="no">Mix</span><span class="o">.</span><span class="no">Task</span> <span class="nv">@requirements</span> <span class="p">[</span><span class="s2">"app.start"</span><span class="p">]</span> <span class="n">alias</span> <span class="no">Digits</span> <span class="k">def</span> <span class="n">run</span><span class="p">(</span><span class="n">_</span><span class="p">)</span> <span class="k">do</span> <span class="p">{</span><span class="n">images</span><span class="p">,</span> <span class="n">labels</span><span class="p">}</span> <span class="o">=</span> <span class="n">load_mnist</span><span class="p">()</span> <span class="n">images</span> <span class="o">=</span> <span class="n">images</span> <span class="o">|&gt;</span> <span class="no">Digits</span><span class="o">.</span><span class="no">Model</span><span class="o">.</span><span class="n">transform_images</span><span class="p">()</span> <span class="o">|&gt;</span> <span class="no">Nx</span><span class="o">.</span><span class="n">to_batched</span><span class="p">(</span><span class="mi">32</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="no">Enum</span><span class="o">.</span><span class="n">to_list</span><span class="p">()</span> <span class="n">labels</span> <span class="o">=</span> <span class="n">labels</span> <span class="o">|&gt;</span> <span class="no">Digits</span><span class="o">.</span><span class="no">Model</span><span class="o">.</span><span class="n">transform_labels</span><span class="p">()</span> <span class="o">|&gt;</span> <span class="no">Nx</span><span class="o">.</span><span class="n">to_batched</span><span class="p">(</span><span class="mi">32</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="no">Enum</span><span class="o">.</span><span class="n">to_list</span><span class="p">()</span> <span class="n">data</span> <span class="o">=</span> <span class="no">Enum</span><span class="o">.</span><span class="n">zip</span><span class="p">(</span><span class="n">images</span><span class="p">,</span> <span class="n">labels</span><span class="p">)</span> <span class="n">training_count</span> <span class="o">=</span> <span class="n">floor</span><span class="p">(</span><span class="mf">0.8</span> <span class="o">*</span> <span class="no">Enum</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="n">data</span><span class="p">))</span> <span class="n">validation_count</span> <span class="o">=</span> <span class="n">floor</span><span class="p">(</span><span class="mf">0.2</span> <span class="o">*</span> <span class="n">training_count</span><span class="p">)</span> <span class="p">{</span><span class="n">training_data</span><span class="p">,</span> <span class="n">test_data</span><span class="p">}</span> <span class="o">=</span> <span class="no">Enum</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">training_count</span><span class="p">)</span> <span class="p">{</span><span class="n">validation_data</span><span class="p">,</span> <span class="n">training_data</span><span class="p">}</span> <span class="o">=</span> <span class="no">Enum</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="n">training_data</span><span class="p">,</span> <span class="n">validation_count</span><span class="p">)</span> <span class="n">model</span> <span class="o">=</span> <span class="no">Digits</span><span class="o">.</span><span class="no">Model</span><span class="o">.</span><span class="n">new</span><span class="p">({</span><span class="mi">1</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">28</span><span class="p">})</span> <span class="no">Mix</span><span class="o">.</span><span class="no">Shell</span><span class="o">.</span><span class="no">IO</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s2">"training..."</span><span class="p">)</span> <span class="n">state</span> <span class="o">=</span> <span class="no">Digits</span><span class="o">.</span><span class="no">Model</span><span class="o">.</span><span class="n">train</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">training_data</span><span class="p">,</span> <span class="n">validation_data</span><span class="p">)</span> <span class="no">Mix</span><span class="o">.</span><span class="no">Shell</span><span class="o">.</span><span class="no">IO</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s2">"testing..."</span><span class="p">)</span> <span class="no">Digits</span><span class="o">.</span><span class="no">Model</span><span class="o">.</span><span class="n">test</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">state</span><span class="p">,</span> <span class="n">test_data</span><span class="p">)</span> <span class="no">Digits</span><span class="o">.</span><span class="no">Model</span><span class="o">.</span><span class="n">save!</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">state</span><span class="p">)</span> <span class="ss">:ok</span> <span class="k">end</span> <span class="k">defp</span> <span class="n">load_mnist</span><span class="p">()</span> <span class="k">do</span> <span class="k">if</span> <span class="n">!File</span><span class="o">.</span><span class="n">exists?</span><span class="p">(</span><span class="n">path</span><span class="p">())</span> <span class="k">do</span> <span class="n">save_mnist</span><span class="p">()</span> <span class="k">end</span> <span class="n">load!</span><span class="p">()</span> <span class="k">end</span> <span class="k">defp</span> <span class="n">save_mnist</span> <span class="k">do</span> <span class="no">Digits</span><span class="o">.</span><span class="no">Model</span><span class="o">.</span><span class="n">download</span><span class="p">()</span> <span class="o">|&gt;</span> <span class="n">save!</span><span class="p">()</span> <span class="k">end</span> <span class="k">defp</span> <span class="n">save!</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="k">do</span> <span class="n">contents</span> <span class="o">=</span> <span class="ss">:erlang</span><span class="o">.</span><span class="n">term_to_binary</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="no">File</span><span class="o">.</span><span class="n">write!</span><span class="p">(</span><span class="n">path</span><span class="p">(),</span> <span class="n">contents</span><span class="p">)</span> <span class="k">end</span> <span class="k">defp</span> <span class="n">load!</span> <span class="k">do</span> <span class="n">path</span><span class="p">()</span> <span class="o">|&gt;</span> <span class="no">File</span><span class="o">.</span><span class="n">read!</span><span class="p">()</span> <span class="o">|&gt;</span> <span class="ss">:erlang</span><span class="o">.</span><span class="n">binary_to_term</span><span class="p">()</span> <span class="k">end</span> <span class="k">defp</span> <span class="n">path</span> <span class="k">do</span> <span class="no">Path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">Application</span><span class="o">.</span><span class="n">app_dir</span><span class="p">(</span><span class="ss">:digits</span><span class="p">,</span> <span class="s2">"priv"</span><span class="p">),</span> <span class="s2">"mnist.axon"</span><span class="p">)</span> <span class="k">end</span> <span class="k">end</span> </code></pre></div><p>We can run the training with the following command:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight bash'><code>mix train </code></pre></div><h2 id='setting-up-the-liveview' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#setting-up-the-liveview' aria-label='Anchor'></a>Setting Up the LiveView</h2><p>Now that we have a trained machine learning model, we can set up a LiveView to accept new handwritten digits, and then display the predicted results.</p> <p>First, we add a new live route to our router file in <code>lib/digits_web/router.ex</code> :</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="n">scope</span> <span class="s2">"/"</span><span class="p">,</span> <span class="no">DigitsWeb</span> <span class="k">do</span> <span class="n">pipe_through</span> <span class="ss">:browser</span> <span class="n">live</span> <span class="s2">"/"</span><span class="p">,</span> <span class="no">PageLive</span><span class="p">,</span> <span class="ss">:index</span> <span class="k">end</span> </code></pre></div><p>Next, we create a new file under <code>lib/digits_web/live</code> called <code>page_live.ex</code>. This is our LiveView module where all the interactivity happens:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">defmodule</span> <span class="no">DigitsWeb</span><span class="o">.</span><span class="no">PageLive</span> <span class="k">do</span> <span class="nv">@moduledoc</span> <span class="sd">""" PageLive LiveView """</span> <span class="kn">use</span> <span class="no">DigitsWeb</span><span class="p">,</span> <span class="ss">:live_view</span> <span class="k">end</span> </code></pre></div><p>When a user submits a new handwritten digit, the machine learning model makes a prediction on what digit was written and then the LiveView displays the prediction to the user. However, when the LiveView is first loaded, there isn&#39;t a prediction to display. So, first, we need to initiate the <code>prediction</code> assign value as <code>nil</code> inside the <code>mount/3</code> callback:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">def</span> <span class="n">mount</span><span class="p">(</span><span class="n">_params</span><span class="p">,</span> <span class="n">_session</span><span class="p">,</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">assign</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="p">%{</span><span class="ss">prediction:</span> <span class="no">nil</span><span class="p">})}</span> <span class="k">end</span> </code></pre></div><p>Next, the <code>render/1</code> function is responsible for rendering the LiveView:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">def</span> <span class="n">render</span><span class="p">(</span><span class="n">assigns</span><span class="p">)</span> <span class="k">do</span> <span class="sx">~H""</span><span class="s2">" &lt;div id="</span><span class="n">wrapper</span><span class="s2">" phx-update="</span><span class="n">ignore</span><span class="s2">"&gt; &lt;div id="</span><span class="n">canvas</span><span class="s2">" phx-hook="</span><span class="no">Draw</span><span class="s2">"&gt;&lt;/div&gt; &lt;/div&gt; &lt;div&gt; &lt;button phx-click="</span><span class="n">reset</span><span class="s2">"&gt;Reset&lt;/button&gt; &lt;button phx-click="</span><span class="n">predict</span><span class="s2">"&gt;Predict&lt;/button&gt; &lt;/div&gt; &lt;%= if @prediction do %&gt; &lt;div&gt; &lt;div&gt; Prediction: &lt;/div&gt; &lt;div&gt; &lt;%= @prediction %&gt; &lt;/div&gt; &lt;/div&gt; &lt;% end %&gt; """</span> <span class="k">end</span> </code></pre></div><p>Notice above that we have a <code>div</code> with the <code>id</code> of &quot;canvas&quot;. This will have an HTML canvas attached. The <code>phx-hook</code> uses Javascript to let us interact with the canvas. The canvas <code>div</code> is wrapped in another <code>div</code> with the <code>phx-update=&quot;ignore&quot;</code> because we don&#39;t want Phoenix to update it.</p> <p>Next are two buttons, one to reset the canvas and one to make a prediction from what the user drew. Each of these buttons are wired up to <code>phx-click</code> triggers.</p> <p>Finally, if we have a <code>prediction</code>, it is displayed.</p> <figure class="post-cta"> <figcaption> <h1> Fly.io ❤️ Elixir</h1><p> Fly.io is a great way to run your Phoenix LiveView app close to your users. It&#39;s really easy to get started. You can be running in minutes.</p><p><a class="button bg-white text-violet-600 hover:bg-opacity-75 hover:text-violet-700 transition-colors" href="https://fly.io/docs/elixir/"> Deploy a Phoenix app today!&nbsp;&nbsp;<span class='opacity:50'>&rarr;</span> </a></p> </figcaption><div class="image-container"> <img src="/static/images/cta-turtle.webp" srcset="/static/images/cta-turtle@2x.webp 2x" alt=""></div></figure><h2 id='adding-the-canvas' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#adding-the-canvas' aria-label='Anchor'></a>Adding the Canvas</h2><p>Next, we need some input from the user. We could let the user upload images using Phoenix&#39;s LiveView upload functionality, but a better (and way cooler) experience is to let the user draw new examples directly into the LiveView.</p> <p>There&#39;s a handy NPM package called <a href="https://www.npmjs.com/package/draw-on-canvas">draw-on-canvas</a> that make this part easy.</p> <p>To install it, <code>cd</code> into the <code>assets</code> directory and run the following command in a terminal:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight bash'><code><span class="nv">$ </span>npm i draw-on-canvas </code></pre></div><p>This installs the <code>draw-on-canvas</code> into the project.</p> <p>Now we connect the <code>draw-on-canvas</code> package to our LiveView via a hook. Open up <code>assets/js/app.js</code> and import the <code>draw-on-canvas</code> package:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight javascript'><code><span class="k">import</span> <span class="nx">Draw</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">draw-on-canvas</span><span class="dl">'</span> </code></pre></div><p>Let&#39;s create a new <code>Hooks</code> object:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight javascript'><code><span class="kd">let</span> <span class="nx">Hooks</span> <span class="o">=</span> <span class="p">{}</span> </code></pre></div><p>Remember to register the hook object in the <code>LiveSocket</code>:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight javascript'><code><span class="kd">let</span> <span class="nx">liveSocket</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LiveSocket</span><span class="p">(</span><span class="dl">"</span><span class="s2">/live</span><span class="dl">"</span><span class="p">,</span> <span class="nx">Socket</span><span class="p">,</span> <span class="p">{</span> <span class="na">params</span><span class="p">:</span> <span class="p">{</span><span class="na">_csrf_token</span><span class="p">:</span> <span class="nx">csrfToken</span><span class="p">},</span> <span class="na">hooks</span><span class="p">:</span> <span class="nx">Hooks</span> <span class="p">})</span> </code></pre></div><p>Next we add a new <code>Draw</code> hook:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight javascript'><code><span class="nx">Hooks</span><span class="p">.</span><span class="nx">Draw</span> <span class="o">=</span> <span class="p">{}</span> </code></pre></div><p>We need to implement the <code>mounted</code> function, which is called when the hook is mounted. This is where we set up the canvas:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight javascript'><code><span class="nx">Hooks</span><span class="p">.</span><span class="nx">Draw</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">mounted</span><span class="p">()</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">draw</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Draw</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">,</span> <span class="mi">384</span><span class="p">,</span> <span class="mi">384</span><span class="p">,</span> <span class="p">{</span> <span class="na">backgroundColor</span><span class="p">:</span> <span class="dl">"</span><span class="s2">black</span><span class="dl">"</span><span class="p">,</span> <span class="na">strokeColor</span><span class="p">:</span> <span class="dl">"</span><span class="s2">white</span><span class="dl">"</span><span class="p">,</span> <span class="na">strokeWeight</span><span class="p">:</span> <span class="mi">10</span> <span class="p">})</span> <span class="p">}</span> <span class="p">}</span> </code></pre></div><p>When we open the app in a browser, we should see a black square canvas that we can draw on!</p> <h2 id='interacting-with-the-canvas' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#interacting-with-the-canvas' aria-label='Anchor'></a>Interacting With the Canvas</h2><p>Remember back in our <code>PageLive</code> module, we added two buttons for interacting with the canvas.</p> <p>The first button is used to reset the canvas. When the button is pressed we send a message to the client to reset the canvas. The <code>push_event</code> function makes this easy.</p> <p>Our new &quot;reset&quot; event handler in <code>PageLive</code> looks like this:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">def</span> <span class="n">handle_event</span><span class="p">(</span><span class="s2">"reset"</span><span class="p">,</span> <span class="n">_params</span><span class="p">,</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span> <span class="p">{</span><span class="ss">:noreply</span><span class="p">,</span> <span class="n">socket</span> <span class="o">|&gt;</span> <span class="n">assign</span><span class="p">(</span><span class="ss">prediction:</span> <span class="no">nil</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="n">push_event</span><span class="p">(</span><span class="s2">"reset"</span><span class="p">,</span> <span class="p">%{})</span> <span class="p">}</span> <span class="k">end</span> </code></pre></div><p>When the reset button is clicked, the <code>phx-click</code> trigger sends the <code>reset</code> event to the server. We then push an event called <code>reset</code> to the client. We also set the prediction to <code>nil</code> in the socket assigns.</p> <p>On the Javascript side, we add a <code>handleEvent</code>, that listens for the <code>reset</code> event, and resets the canvas:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight javascript'><code><span class="k">this</span><span class="p">.</span><span class="nx">handleEvent</span><span class="p">(</span><span class="dl">"</span><span class="s2">reset</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">draw</span><span class="p">.</span><span class="nx">reset</span><span class="p">()</span> <span class="p">})</span> </code></pre></div><p>Next, let&#39;s make our &quot;predict&quot; button work. We want to grab the contents of the canvas as an image. Again, we send a message to the client from the <code>PageLive</code> LiveView module:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">def</span> <span class="n">handle_event</span><span class="p">(</span><span class="s2">"predict"</span><span class="p">,</span> <span class="n">_params</span><span class="p">,</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span> <span class="p">{</span><span class="ss">:noreply</span><span class="p">,</span> <span class="n">push_event</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="s2">"predict"</span><span class="p">,</span> <span class="p">%{})}</span> <span class="k">end</span> </code></pre></div><p>In the <code>mounted</code> callback, we add another <code>handleEvent</code>. This grabs the contents of the canvas as a data URL and sends it to the server using <code>pushEvent</code>:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight javascript'><code><span class="k">this</span><span class="p">.</span><span class="nx">handleEvent</span><span class="p">(</span><span class="dl">"</span><span class="s2">predict</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">pushEvent</span><span class="p">(</span><span class="dl">"</span><span class="s2">image</span><span class="dl">"</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">draw</span><span class="p">.</span><span class="nx">canvas</span><span class="p">.</span><span class="nx">toDataURL</span><span class="p">(</span><span class="dl">'</span><span class="s1">image/png</span><span class="dl">'</span><span class="p">))</span> <span class="p">})</span> </code></pre></div><h2 id='making-predictions' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#making-predictions' aria-label='Anchor'></a>Making Predictions</h2><p>Now that we hooked up the buttons to reset the canvas and send up the canvas contents to make a prediction, we will use the image from the canvas as a new input to our machine learning model.</p> <p>We can accept the image data URL from the client using another <code>handle_event/3</code> callback function:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">def</span> <span class="n">handle_event</span><span class="p">(</span><span class="s2">"image"</span><span class="p">,</span> <span class="s2">"data:image/png;base64,"</span> <span class="o">&lt;&gt;</span> <span class="n">raw</span><span class="p">,</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span> <span class="n">name</span> <span class="o">=</span> <span class="no">Base</span><span class="o">.</span><span class="n">url_encode64</span><span class="p">(</span><span class="ss">:crypto</span><span class="o">.</span><span class="n">strong_rand_bytes</span><span class="p">(</span><span class="mi">10</span><span class="p">),</span> <span class="ss">padding:</span> <span class="no">false</span><span class="p">)</span> <span class="n">path</span> <span class="o">=</span> <span class="no">Path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">System</span><span class="o">.</span><span class="n">tmp_dir!</span><span class="p">(),</span> <span class="s2">"</span><span class="si">#{</span><span class="n">name</span><span class="si">}</span><span class="s2">.webp"</span><span class="p">)</span> <span class="no">File</span><span class="o">.</span><span class="n">write!</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="no">Base</span><span class="o">.</span><span class="n">decode64!</span><span class="p">(</span><span class="n">raw</span><span class="p">))</span> <span class="n">prediction</span> <span class="o">=</span> <span class="no">Digits</span><span class="o">.</span><span class="no">Model</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">path</span><span class="p">)</span> <span class="no">File</span><span class="o">.</span><span class="n">rm!</span><span class="p">(</span><span class="n">path</span><span class="p">)</span> <span class="p">{</span><span class="ss">:noreply</span><span class="p">,</span> <span class="n">assign</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="ss">prediction:</span> <span class="n">prediction</span><span class="p">)}</span> <span class="k">end</span> </code></pre></div><p>In this function, we use a binary pattern matching on the <code>params</code> to get the image data. Next, we generate a random file name and create a path to a temporary directory for storing the image. Then we decode the image data and write it to the path.</p> <p>Next we pass the path into the <code>Digits.Model.predict/1</code> function and return a prediction. The prediction result is a number between 0 and 9. We&#39;ll write that function next.</p> <p>Finally, we delete the image file and assign the prediction to the socket for display in our LiveView.</p> <p>Before we can use the user&#39;s drawing with our model, we need to prepare the image. We need to:</p> <ul> <li>Convert it to grayscale to reduce the number channels from 3 to 1 </li><li>Resize it to 28 x 28 </li></ul> <p>The <code>Evision</code> library can do these changes for us. Let&#39;s add it as a dependency in our <code>mix.exs</code> file now:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code> <span class="p">{</span><span class="ss">:evision</span><span class="p">,</span> <span class="s2">"~&gt; 0.1.28"</span><span class="p">}</span> </code></pre></div><p>Install the dependency using:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight '><code>mix deps.get </code></pre></div><p>In the <code>Digits.Model</code> module, let&#39;s add a new function for making a prediction.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">def</span> <span class="n">predict</span><span class="p">(</span><span class="n">path</span><span class="p">)</span> <span class="k">do</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">mat</span><span class="p">}</span> <span class="o">=</span> <span class="no">Evision</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="ss">flags:</span> <span class="no">Evision</span><span class="o">.</span><span class="no">Constant</span><span class="o">.</span><span class="n">cv_IMREAD_GRAYSCALE</span><span class="p">())</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">mat</span><span class="p">}</span> <span class="o">=</span> <span class="no">Evision</span><span class="o">.</span><span class="n">resize</span><span class="p">(</span><span class="n">mat</span><span class="p">,</span> <span class="p">[</span><span class="mi">28</span><span class="p">,</span> <span class="mi">28</span><span class="p">])</span> <span class="n">data</span> <span class="o">=</span> <span class="no">Evision</span><span class="o">.</span><span class="no">Nx</span><span class="o">.</span><span class="n">to_nx</span><span class="p">(</span><span class="n">mat</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="no">Nx</span><span class="o">.</span><span class="n">reshape</span><span class="p">({</span><span class="mi">1</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">28</span><span class="p">})</span> <span class="o">|&gt;</span> <span class="no">List</span><span class="o">.</span><span class="n">wrap</span><span class="p">()</span> <span class="o">|&gt;</span> <span class="no">Nx</span><span class="o">.</span><span class="n">stack</span><span class="p">()</span> <span class="o">|&gt;</span> <span class="no">Nx</span><span class="o">.</span><span class="n">backend_transfer</span><span class="p">()</span> <span class="p">{</span><span class="n">model</span><span class="p">,</span> <span class="n">state</span><span class="p">}</span> <span class="o">=</span> <span class="n">load!</span><span class="p">()</span> <span class="n">model</span> <span class="o">|&gt;</span> <span class="no">Axon</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="no">Nx</span><span class="o">.</span><span class="n">argmax</span><span class="p">()</span> <span class="o">|&gt;</span> <span class="no">Nx</span><span class="o">.</span><span class="n">to_number</span><span class="p">()</span> <span class="k">end</span> </code></pre></div><p>First, we read the image path and convert it to grayscale. This reduces the number of channels from 3 to 1. Then we resize the image to <code>28</code> x <code>28</code>.</p> <p>We also need to convert the image data to an Nx tensor and reshape it to an expected correct shape. Our machine learning model expects a &quot;batch&quot; of inputs, and so we&#39;ll wrap the tensor using <code>List.wrap/1</code> and then stack it using <code>Nx.stack/1</code>.</p> <p>Next, we load the <code>model</code> and the <code>state</code>, using the <code>load!/0</code> function from earlier. Ideally you wouldn&#39;t be loading the <code>model</code> and <code>state</code> for each prediction, but it&#39;s fine for our basic example.</p> <p>We pass the <code>model</code>, <code>state</code> and <code>data</code> into the <code>Axon.predict/4</code> function. One thing to note is, you will need to add <code>require Axon</code> to the <code>Digits.Model</code> module because <code>Axon.predict/4</code> is actually a macro.</p> <p>The <code>Axon.predict/4</code> function returns a prediction in the form of a one-hot encoded tensor. We use the <code>Nx.argmax/1</code> function to convert it to a tensor that contains a single scalar value between 0 and 9, and then we use <code>Nx.to_number/1</code> to return the value as a number.</p> <p>Our predicted number is set as the <code>prediction</code> is the LiveView assigns, displaying it to the user.</p> <h2 id='we-built-an-end-to-end-machine-learning-application-in-elixir' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#we-built-an-end-to-end-machine-learning-application-in-elixir' aria-label='Anchor'></a>We Built an End-to-end Machine Learning Application in Elixir!</h2><p>Wow! Check out what we just did!</p> <p>We built an end-to-end machine learning application using Elixir! We trained a model from scratch. We used LiveView for interactive, real-time application input from the user. We ran predictions and displayed the results interactively.</p> <p>One of the most amazing things here was that we did it all using Elixir and didn&#39;t need external machine learning tools or languages. Machine learning in Elixir is still maturing, but I hope this inspires you to try something new in your own project.</p> <p>Full code for this tutorial is found at <a href="https://github.com/philipbrown/handwritten-digits">philipbrown/handwritten-digits-elixir</a>.</p> </content>
</entry>
<entry>
<title>Formatting the user's local date-times using Hooks</title>
<link rel="alternate" href="https://fly.io/phoenix-files/dates-formatting-with-hooks/"/>
<id>https://fly.io/phoenix-files/dates-formatting-with-hooks/</id>
<published>2022-04-19T00:00:00+00:00</published>
<updated>2023-04-06T14:48:02+00:00</updated>
<content type="html"><h2 id='problem' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#problem' aria-label='Anchor'></a>Problem</h2><p>When we&#39;re developing an application for users around the world, we are bound to hit problems with timezones.</p> <p>Often we decide to store the dates in UTC format to avoid storing the timezone of each user. This brings us to the real problem, &quot;How can we display the UTC time in the user&#39;s local timezone?&quot;</p> <h2 id='solution' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#solution' aria-label='Anchor'></a>Solution</h2><p>We need to convert the date to the user&#39;s local timezone and display it. We can use the user&#39;s locale information in the browser, add a few lines of Javascript in a <a href="https://hexdocs.pm/phoenix_live_view/js-interop.html#client-hooks-via-phx-hook">Client Hook</a> and update the DOM to display the right time!</p> <h3 id='converting-a-utc-date-to-a-local-date-in-javascript' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#converting-a-utc-date-to-a-local-date-in-javascript' aria-label='Anchor'></a>Converting a UTC Date to a Local Date in Javascript</h3><p>First we&#39;ll create a <code>Date</code> object, passing our UTC date as a parameter to the constructor. This lets us use the <code>Date</code> class methods to manipulate dates.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight javascript'><code><span class="kd">let</span> <span class="nx">dt</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="dl">"</span><span class="s2">2016-05-24T13:26:08.003Z</span><span class="dl">"</span><span class="p">);</span> </code></pre></div><p>Through a <code>Date</code> class object we can use the <code>toLocaleString</code> method. Based on the user&#39;s default locale and timezone, this method returns the local date as a string.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight javascript'><code><span class="nx">dt</span><span class="p">.</span><span class="nx">toLocaleString</span><span class="p">()</span> <span class="c1">// 5/24/2016, 8:26:08 AM</span> </code></pre></div><p>We can also extract and display the timezone that is used internally for the conversion as follows:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight javascript'><code><span class="nx">Intl</span><span class="p">.</span><span class="nx">DateTimeFormat</span><span class="p">().</span><span class="nx">resolvedOptions</span><span class="p">().</span><span class="nx">timeZone</span><span class="p">;</span> <span class="c1">// America/Mexico_City</span> </code></pre></div><p>Concatenating the results of the previous functions, we put our string into a more friendly format:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight javascript'><code><span class="kd">let</span> <span class="nx">dt</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="dl">"</span><span class="s2">2016-05-24T13:26:08.003Z</span><span class="dl">"</span><span class="p">);</span> <span class="kd">let</span> <span class="nx">dateString</span> <span class="o">=</span> <span class="nx">dt</span><span class="p">.</span><span class="nx">toLocaleString</span><span class="p">()</span> <span class="o">+</span> <span class="dl">"</span><span class="s2"> </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">Intl</span><span class="p">.</span><span class="nx">DateTimeFormat</span><span class="p">().</span><span class="nx">resolvedOptions</span><span class="p">().</span><span class="nx">timeZone</span><span class="p">;</span> <span class="c1">// 5/24/2016, 8:26:08 AM America/Mexico_City</span> </code></pre></div><h3 id='configuring-and-defining-a-hook' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#configuring-and-defining-a-hook' aria-label='Anchor'></a>Configuring and Defining a Hook</h3><p>We&#39;ve figured out how to get a new representation of a date from the user locale with JavaScript. Now we want to show the date in its new format from our LiveView application.</p> <p>We&#39;ve stored the <a href="https://hexdocs.pm/elixir/1.13/DateTime.html">date</a> we want to show in the <code>@utc</code> assign, and we render its content inside a <code>time</code> tag:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="o">&lt;</span><span class="n">time</span><span class="err">&gt;</span><span class="o">&lt;%=</span> <span class="nv">@utc</span> <span class="p">%</span><span class="err">&gt;</span><span class="o">&lt;/</span><span class="n">time</span><span class="o">&gt;</span> </code></pre></div><p>To change this to the new format, we&#39;ll use a client hook to execute a variant of the lines of Javascript we used above.</p> <p>First we need to define our <code>Hooks</code> object inside <code>assets/js/app.js</code> and add the hook, which we name <code>LocalTime</code> . This hook is responsible for taking the content of the <code>time</code> tag, reformatting it and updating its content.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight javascript'><code><span class="kd">let</span> <span class="nx">Hooks</span> <span class="o">=</span> <span class="p">{}</span> <span class="nx">Hooks</span><span class="p">.</span><span class="nx">LocalTime</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">mounted</span><span class="p">()</span> <span class="p">{</span> <span class="kd">let</span> <span class="nx">dt</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">textContent</span><span class="p">);</span> <span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="nx">dt</span><span class="p">.</span><span class="nx">toLocaleString</span><span class="p">()</span> <span class="o">+</span> <span class="dl">"</span><span class="s2"> </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">Intl</span><span class="p">.</span><span class="nx">DateTimeFormat</span><span class="p">().</span><span class="nx">resolvedOptions</span><span class="p">().</span><span class="nx">timeZone</span><span class="p">;</span> <span class="p">}</span> <span class="p">}</span> </code></pre></div><p>A hook can be executed at different life stages of an HTML element. Above, we defined the <code>mounted</code> callback, so the transformation will happen when the <code>time</code> tag is added to the DOM and the component has finished mounting.</p> <p>All callbacks in a hook object have in-scope access to the <code>el</code> attribute, which is a reference to the DOM element on which the hook is running: here, the <code>time</code> tag. We get the UTC date from its <code>textContent</code> attribute, and store it in a Date object called <code>dt</code>:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight javascript'><code><span class="kd">let</span> <span class="nx">dt</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">textContent</span><span class="p">);</span> </code></pre></div><p>Then we replace the content of the HTML element with the new string we&#39;ve created.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight javascript'><code><span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="nx">dt</span><span class="p">.</span><span class="nx">toLocaleString</span><span class="p">()</span> <span class="o">+</span> <span class="dl">"</span><span class="s2"> </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">Intl</span><span class="p">.</span><span class="nx">DateTimeFormat</span><span class="p">().</span><span class="nx">resolvedOptions</span><span class="p">().</span><span class="nx">timeZone</span><span class="p">;</span> </code></pre></div><p>The conversion also needs to be redone whenever the server updates the element, so we add the <code>updated</code> callback, with a small refactor to avoid duplicating code:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight javascript'><code><span class="nx">Hooks</span><span class="p">.</span><span class="nx">LocalTime</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">mounted</span><span class="p">(){</span> <span class="k">this</span><span class="p">.</span><span class="nx">updated</span><span class="p">()</span> <span class="p">},</span> <span class="nx">updated</span><span class="p">()</span> <span class="p">{</span> <span class="kd">let</span> <span class="nx">dt</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">textContent</span><span class="p">);</span> <span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="nx">dt</span><span class="p">.</span><span class="nx">toLocaleString</span><span class="p">()</span> <span class="o">+</span> <span class="dl">"</span><span class="s2"> </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">Intl</span><span class="p">.</span><span class="nx">DateTimeFormat</span><span class="p">().</span><span class="nx">resolvedOptions</span><span class="p">().</span><span class="nx">timeZone</span><span class="p">;</span> <span class="p">}</span> <span class="p">}</span> </code></pre></div><p>Now that our <code>LocalTime</code> hook is defined, we pass the <code>Hooks</code> object to the socket:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight javascript'><code><span class="kd">let</span> <span class="nx">liveSocket</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LiveSocket</span><span class="p">(</span><span class="dl">"</span><span class="s2">/live</span><span class="dl">"</span><span class="p">,</span> <span class="nx">Socket</span><span class="p">,</span> <span class="p">{</span><span class="na">hooks</span><span class="p">:</span> <span class="nx">Hooks</span><span class="p">})</span> </code></pre></div><figure class="post-cta"> <figcaption> <h1> Fly.io ❤️ Elixir</h1><p> Fly.io is a great way to run your Phoenix LiveView app close to your users. It&#39;s really easy to get started. You can be running in minutes.</p><p><a class="button bg-white text-violet-600 hover:bg-opacity-75 hover:text-violet-700 transition-colors" href="https://fly.io/docs/elixir/"> Deploy a Phoenix app today!&nbsp;&nbsp;<span class='opacity:50'>&rarr;</span> </a></p> </figcaption><div class="image-container"> <img src="/static/images/cta-rabbit.webp" srcset="/static/images/cta-rabbit@2x.webp 2x" alt=""></div></figure><h3 id='executing-a-hook-from-an-html-element' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#executing-a-hook-from-an-html-element' aria-label='Anchor'></a>Executing a Hook From an HTML Element</h3><p>The only missing piece is to tie our <code>LocalTime</code> hook to the <code>time</code> tag we defined. For this, we&#39;ll use the <code>phx-hook</code> option, passing the name of our <code>LocalTime</code> hook.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="o">&lt;</span><span class="n">time</span> <span class="n">phx</span><span class="o">-</span><span class="n">hook</span><span class="o">=</span><span class="s2">"LocalTime"</span> <span class="n">id</span><span class="o">=</span><span class="s2">"my-local-time"</span><span class="o">&gt;</span> <span class="o">&lt;%=</span> <span class="nv">@utc</span> <span class="p">%</span><span class="o">&gt;</span> <span class="o">&lt;/</span><span class="n">time</span><span class="o">&gt;</span> </code></pre></div><p>Note that, when using <code>phx-hook</code>, we must always define a unique DOM ID for the HTML element.</p> <p>Let&#39;s see our work in action (slowed down for visibility):</p> <p><video title="The date in utc format is rendered inside a button; a second later the content of the button changes to the new format." src="/phoenix-files/2022-04-19/date-times-01.mp4?card&amp;center" autoplay="autoplay" loop="loop" muted="muted" playsinline="" disablePictureInPicture="" /></p> <p>When the <code>time</code> tag is first rendered, the date is in UTC format, but then our hook is executed and the content of the tag is replaced.</p> <p>We can make a little improvement and hide the initial content of the time tag using CSS. Here we&#39;re using the TailwindCSS <code>invisible</code> class.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="o">&lt;</span><span class="n">time</span> <span class="n">phx</span><span class="o">-</span><span class="n">hook</span><span class="o">=</span><span class="s2">"LocalTime"</span> <span class="n">id</span><span class="o">=</span><span class="s2">"my-local-time"</span> <span class="n">class</span><span class="o">=</span><span class="s2">"invisible"</span><span class="o">&gt;</span> <span class="o">&lt;%=</span> <span class="nv">@utc</span> <span class="p">%</span><span class="o">&gt;</span> <span class="o">&lt;/</span><span class="n">time</span><span class="o">&gt;</span> </code></pre></div><p>This way the time tag still exists in the DOM, but its content will be hidden.</p> <p>Once we&#39;ve modified the date format, we remove the class with JavaScript to display the content of the time tag:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight javascript'><code><span class="nx">updated</span><span class="p">()</span> <span class="p">{</span> <span class="kd">let</span> <span class="nx">dt</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">textContent</span><span class="p">);</span> <span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="nx">dt</span><span class="p">.</span><span class="nx">toLocaleString</span><span class="p">()</span> <span class="o">+</span> <span class="dl">"</span><span class="s2"> </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">Intl</span><span class="p">.</span><span class="nx">DateTimeFormat</span><span class="p">().</span><span class="nx">resolvedOptions</span><span class="p">().</span><span class="nx">timeZone</span><span class="p">;</span> <span class="k">this</span><span class="p">.</span><span class="nx">el</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="dl">"</span><span class="s2">invisible</span><span class="dl">"</span><span class="p">)</span> <span class="p">}</span> </code></pre></div><p>Let&#39;s see what has changed:</p> <p><video title="The button is rendered without visible content until the formatted date appears" src="/phoenix-files/2022-04-19/date-times-02.mp4?card&amp;center" autoplay="autoplay" loop="loop" muted="muted" playsinline="" disablePictureInPicture="" /></p> <p>The content of the time tag is not displayed until the date is reformatted and replaced.</p> <h3 id='creating-a-reusable-component' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#creating-a-reusable-component' aria-label='Anchor'></a>Creating a Reusable Component</h3><p>If this is not the only date we&#39;ll show in our application, we can go one step further and define a function component that takes a unique DOM ID and a date as part of its assigns:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">def</span> <span class="n">local_time</span><span class="p">(%{</span><span class="ss">date:</span> <span class="n">date</span><span class="p">,</span> <span class="ss">id:</span> <span class="n">id</span><span class="p">}</span> <span class="o">=</span> <span class="n">assigns</span><span class="p">)</span> <span class="k">do</span> <span class="sx">~H""</span><span class="s2">" &lt;time phx-hook="</span><span class="no">LocalTime</span><span class="s2">" id={@id} class="</span><span class="n">invisible</span><span class="s2">"&gt; &lt;%= @date %&gt; &lt;/time&gt; """</span> <span class="k">end</span> </code></pre></div><p>We use our component as follows:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="o">&lt;.</span><span class="n">local_time</span> <span class="n">id</span><span class="o">=</span><span class="s2">"my-date"</span> <span class="n">date</span><span class="o">=</span><span class="s2">"2016-05-24T13:26:08.003Z"</span><span class="o">/&gt;</span> </code></pre></div><p>Or passing the content of an assign:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="o">&lt;.</span><span class="n">local_time</span> <span class="n">id</span><span class="o">=</span><span class="s2">"my-date"</span> <span class="n">date</span><span class="o">=</span><span class="p">{</span><span class="nv">@date</span><span class="p">}</span><span class="o">/&gt;</span> </code></pre></div><h2 id='discussion' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#discussion' aria-label='Anchor'></a>Discussion</h2><p>We could get the user&#39;s locale and timezone from the browser and use server-side libraries like <a href="https://hexdocs.pm/timex/Timex.html">Timex</a> to manipulate datetimes, which would involve writing lines of code on both, the client and server side, and storing those values in some part of our application.</p> <p>With the Phoenix client Hooks, we can format dates using a few lines of Javascript and entirely client-side.</p> </content>
</entry>
<entry>
<title>Easy UI Toggling with LiveView JS Commands</title>
<link rel="alternate" href="https://fly.io/phoenix-files/sdeb-toggling-element/"/>
<id>https://fly.io/phoenix-files/sdeb-toggling-element/</id>
<published>2022-04-11T00:00:00+00:00</published>
<updated>2023-04-06T14:48:02+00:00</updated>
<content type="html"><p class="lead"> Here&#39;s Sophie DeBenedetto, co-author of <a href="https://pragprog.com/titles/liveview/programming-phoenix-liveview/"><em>Programming Phoenix LiveView</em></a>, with a deep dive into building a toggling UI element with LiveView&#39;s <code>JS.toggle</code> command. Coincidentally, you can run Phoenix LiveView apps here on Fly.io! <a href="/docs/elixir/">Get started</a>.</p><p>LiveView empowers developers to be more productive than ever before by keeping your mind firmly focused on the server, even while you build out rich interactive UIs. But until recently, we were somewhat limited by LiveView&#39;s reliance on server-side state to manage those interactions. With LiveView&#39;s new <a href="https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.JS.html">JS commands</a>, you can manage common UI interactions purely on the client, while still maintaining accurate and up-to-date state on the server. In this post, we&#39;ll use JS commands to build a toggle feature. When we&#39;re done, you&#39;ll have a solid understanding of how to use JS commands to build common UI interactions on the client in LiveView.</p> <h2 id='the-problem' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#the-problem' aria-label='Anchor'></a>The Problem</h2><p>You want to toggle the appearance of some content on your live view page in response to a user&#39;s interaction. For example, you want to show/hide a search form when the user clicks the &quot;search&quot; icon, like this:</p> <p><video title="Screen capture of a search bar appearing and disappearing when an icon is clicked." src="/phoenix-files/2022-04-11/sdeb-2-1.mp4?card&amp;center" autoplay="autoplay" loop="loop" muted="muted" playsinline="" disablePictureInPicture="" /></p> <p>Without LiveView&#39;s JS commands, you&#39;d be forced to send an event to the server to update socket state to indicate that the form should be shown/hidden. Your template would have some conditional logic to show/hide the search from depending on some key in socket assigns. The live view&#39;s template would re-render when you updated that socket assigns key in response to the user clicking the search icon, thereby showing or hiding the form appropriately. This means a round-trip to the server to do something that a simple JavaScript snippet can do for you. But we&#39;re LiveView developers; we like to let the LiveView framework handle our JavaScript for us. Well, now we can.</p> <h2 id='the-solution' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#the-solution' aria-label='Anchor'></a>The Solution</h2><p>The <code>Phoenix.LiveView.JS</code> module provides functionality to invoke client-side operations in response to LiveView events like the <code>phx-click</code> event. It abstracts away some of the most common JS interactions, like showing/hiding content, adding/removing classes, setting CSS attributes, and transitioning CSS classes. It builds these interactions directly into the LiveView JS framework and exposes an easy-to-use API you can use to execute these JS commands in response to user events on your live view page.</p> <h2 id='example-toggling-a-form' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#example-toggling-a-form' aria-label='Anchor'></a>Example: Toggling a Form</h2><p>First, we&#39;ll take a look at a simple example. Then, we&#39;ll break down how it works under the hood before making our example slightly more advanced. Let&#39;s turn our attention back to the search form that we want to toggle. We&#39;d like the form to be hidden when the user loads the page, so we&#39;ll give the form an ID of <code>#book-search-form</code> and add some custom css to <code>app.scss</code> to set the display to <code>none</code>.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="c1"># lib/live_library_web/live/book_live/search_component.html.heex</span> <span class="o">&lt;.</span><span class="n">form</span> <span class="n">let</span><span class="o">=</span><span class="p">{</span><span class="n">f</span><span class="p">}</span> <span class="n">for</span><span class="o">=</span><span class="p">{</span><span class="nv">@search_changeset</span><span class="p">}</span> <span class="n">id</span><span class="o">=</span><span class="s2">"book-search-form"</span> <span class="n">phx</span><span class="o">-</span><span class="n">submit</span><span class="o">=</span><span class="s2">"search"</span> <span class="n">phx</span><span class="o">-</span><span class="n">target</span><span class="o">=</span><span class="p">{</span><span class="nv">@myself</span><span class="p">}</span> <span class="n">class</span><span class="o">=</span><span class="p">{</span><span class="nv">@search_class</span><span class="p">}</span> <span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">!</span><span class="o">--</span> <span class="o">...</span> <span class="o">--&gt;</span> <span class="o">/*</span> <span class="n">assets</span><span class="o">/</span><span class="n">css</span><span class="o">/</span><span class="n">app</span><span class="o">.</span><span class="n">css</span> <span class="o">*/</span> <span class="c1">#book-search-form {</span> <span class="ss">display:</span> <span class="n">none</span><span class="p">;</span> <span class="p">}</span> </code></pre></div><p>Great. Now when the page loads, the form will be hidden. Next up, we&#39;ll use the <code>Phoenix.LiveView.JS.toggle/1</code> function to toggle the display attribute between <code>none</code> and <code>block</code>. Before we do though, let&#39;s take a look at the code that renders the search icon into the search form template.</p> <p>We have a simple function component, <code>Search.icon/1</code> that display the search icon. Here&#39;s a look at our function component:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="c1"># lib/live_library_web/live/book_live/search.ex</span> <span class="k">defmodule</span> <span class="no">LiveLibraryWeb</span><span class="o">.</span><span class="no">Search</span> <span class="k">do</span> <span class="kn">use</span> <span class="no">Phoenix</span><span class="o">.</span><span class="no">Component</span> <span class="k">def</span> <span class="n">icon</span><span class="p">(</span><span class="n">assigns</span><span class="p">)</span> <span class="k">do</span> <span class="sx">~H""</span><span class="s2">" &lt;i class="</span><span class="n">bi</span> <span class="n">bi</span><span class="o">-</span><span class="n">search</span><span class="s2">"&gt;&lt;/i&gt; """</span> <span class="k">end</span> <span class="k">end</span> </code></pre></div><p>Our <code>Search</code> module implements one function, <code>icon/1</code>, that returns some HEEx markup with the search Bootstrap icon. Assuming we&#39;ve aliased the <code>LiveLibraryWeb.Search</code> module in the live view or live component rendering the search form template, we can render our function component in that template like this:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="o">&lt;</span><span class="no">Search</span><span class="o">.</span><span class="n">icon</span> <span class="o">/&gt;</span> </code></pre></div><p>With that in place, we&#39;re ready to add our JS binding. Add a <code>phx-click</code> binding to the icon element with a value of the <code>JS.toggle/1</code> function call:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">def</span> <span class="n">icon</span><span class="p">(</span><span class="n">assigns</span><span class="p">)</span> <span class="k">do</span> <span class="sx">~H""</span><span class="s2">" &lt;i phx-click={JS.toggle(to: "</span><span class="c1">#book-search-form")} class="bi bi-search"&gt;&lt;/i&gt;</span> <span class="s2">""" end </span></code></pre></div><p>And that&#39;s it! Now, when the user clicks the search icon, the <code>phx-click</code> event will fire which will trigger LiveView&#39;s JavaScript to toggle the value of the CSS <code>display</code> attribute of the specified element between <code>none</code> and <code>block</code>. This one small line of code is incredibly powerful, and it&#39;s all we need in order to implement this purely client-side interaction.</p> <p>Let&#39;s take a brief look at how it works under the hood. Then, we&#39;ll add some more advanced options to our toggling example.</p> <h2 id='liveview-js-commands-under-the-hood' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#liveview-js-commands-under-the-hood' aria-label='Anchor'></a>LiveView JS Commands Under the Hood</h2><p>We&#39;ll examine how the <code>Phoenix.LiveView.JS</code> module and the front-end <code>JS</code> object work together to implement the JS toggle command. First up, let&#39;s revisit our toggle-adding code here:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="o">&lt;</span><span class="n">i</span> <span class="n">phx</span><span class="o">-</span><span class="n">click</span><span class="o">=</span><span class="p">{</span><span class="no">JS</span><span class="o">.</span><span class="n">toggle</span><span class="p">(</span><span class="ss">to:</span> <span class="s2">"#book-search-form"</span><span class="p">)}</span> <span class="n">class</span><span class="o">=</span><span class="s2">"bi bi-search"</span><span class="err">&gt;</span><span class="o">&lt;/</span><span class="n">i</span><span class="o">&gt;</span> </code></pre></div><p>Here&#39;s where the magic happens:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="n">phx</span><span class="o">-</span><span class="n">click</span><span class="o">=</span><span class="p">{</span><span class="no">JS</span><span class="o">.</span><span class="n">toggle</span><span class="p">(</span><span class="ss">to:</span> <span class="s2">"#book-search-form"</span><span class="p">)}</span> </code></pre></div><p>This call to <code>JS.toggle/1</code> returns a <code>Phoenix.LiveView.JS</code> struct that looks like this:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="p">%</span><span class="no">Phoenix</span><span class="o">.</span><span class="no">LiveView</span><span class="o">.</span><span class="no">JS</span><span class="p">{</span> <span class="ss">ops:</span> <span class="p">[</span> <span class="p">[</span> <span class="s2">"toggle"</span><span class="p">,</span> <span class="p">%{</span> <span class="ss">display:</span> <span class="no">nil</span><span class="p">,</span> <span class="ss">ins:</span> <span class="p">[[],</span> <span class="p">[],</span> <span class="p">[]],</span> <span class="ss">outs:</span> <span class="p">[[],</span> <span class="p">[],</span> <span class="p">[]],</span> <span class="ss">time:</span> <span class="mi">200</span><span class="p">,</span> <span class="ss">to:</span> <span class="s2">"#book-search-form"</span> <span class="p">}</span> <span class="p">]</span> <span class="p">]</span> <span class="p">}</span> </code></pre></div><p>You can see the <code>:to</code> attribute is populated with our <code>&quot;#book-search-form&quot;</code> CSS selector, and the remaining attributes are set to their default values. We&#39;re not taking advantage of the additional attributes at this time, but you can optionally specify a <code>:display</code> value to set when the element is toggled (defaults to &quot;block&quot; on the front-end), as well as classes to apply/remove when the element is transitioning in and out of visibility, and the time duration for which to apply those transition classes.</p> <p>When LiveView renders our template, this struct is rendered by <code>Phoenix.HTML.Safe</code> and appears as the following markup in the UI:</p> <p><img src="/phoenix-files/2022-04-11/sdeb-2-2.webp?card" alt="A selected element and browser devtools with the phx-click binding described in the text." /></p> <p>You can see that all this has done is add a <code>phx-click</code> event that specifies an event that looks like this:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight js'><code><span class="p">[[</span><span class="dl">"</span><span class="s2">toggle</span><span class="dl">"</span><span class="p">,{</span><span class="dl">"</span><span class="s2">display</span><span class="dl">"</span><span class="p">:</span><span class="kc">null</span><span class="p">,</span><span class="dl">"</span><span class="s2">ins</span><span class="dl">"</span><span class="p">:[[],[],[]],</span><span class="dl">"</span><span class="s2">outs</span><span class="dl">"</span><span class="p">:[[],[],[]],</span><span class="dl">"</span><span class="s2">time</span><span class="dl">"</span><span class="p">:</span><span class="mi">200</span><span class="p">,</span><span class="dl">"</span><span class="s2">to</span><span class="dl">"</span><span class="p">:</span><span class="dl">"</span><span class="s2">#book-search-form</span><span class="dl">"</span><span class="p">}]]</span> </code></pre></div><p>Recall that when the page loads, the <code>app.js</code> file loads with it. The <code>app.js</code> file that is generated when you generate your Phoenix LiveView app contains these lines:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight js'><code><span class="kd">let</span> <span class="nx">liveSocket</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LiveSocket</span><span class="p">(</span><span class="dl">"</span><span class="s2">/live</span><span class="dl">"</span><span class="p">,</span> <span class="nx">Socket</span><span class="p">,</span> <span class="p">{</span><span class="na">params</span><span class="p">:</span> <span class="p">{</span><span class="na">_csrf_token</span><span class="p">:</span> <span class="nx">csrfToken</span><span class="p">},</span> <span class="na">hooks</span><span class="p">:</span> <span class="nx">Hooks</span><span class="p">})</span> <span class="c1">// ...</span> <span class="nx">liveSocket</span><span class="p">.</span><span class="nx">connect</span><span class="p">()</span> </code></pre></div><p>Under the hood, <code>liveSocket.connect()</code> will call the <code>bindClick()</code> function that adds an event listener for every <code>phx-click</code> event. At a high level, the code looks like this:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight js'><code><span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="nx">eventName</span><span class="p">,</span> <span class="nx">e</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="c1">// ...</span> <span class="nx">JS</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="dl">"</span><span class="s2">click</span><span class="dl">"</span><span class="p">,</span> <span class="nx">phxEvent</span><span class="p">,</span> <span class="nx">view</span><span class="p">,</span> <span class="nx">target</span><span class="p">,</span> <span class="p">[</span><span class="dl">"</span><span class="s2">push</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span><span class="na">data</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">eventMeta</span><span class="p">(</span><span class="dl">"</span><span class="s2">click</span><span class="dl">"</span><span class="p">,</span> <span class="nx">e</span><span class="p">,</span><span class="nx">target</span><span class="p">)}])</span> <span class="p">},</span> <span class="nx">capture</span><span class="p">)</span> </code></pre></div><p>That brings us to the <code>JS.exec</code> function. This function pulls the event &quot;kind&quot; out of the name (in our case <code>&quot;toggle&quot;</code>) and dynamically invokes <code>exec_${kind}</code>, as you can see here:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight js'><code><span class="k">this</span><span class="p">[</span><span class="s2">`exec_</span><span class="p">${</span><span class="nx">kind</span><span class="p">}</span><span class="s2">`</span><span class="p">](</span><span class="nx">eventType</span><span class="p">,</span> <span class="nx">phxEvent</span><span class="p">,</span> <span class="nx">view</span><span class="p">,</span> <span class="nx">sourceEl</span><span class="p">,</span> <span class="nx">el</span><span class="p">,</span> <span class="nx">args</span><span class="p">);</span> </code></pre></div><p>Finally, the <code>exec_toggle</code> function is invoked, which implements the <a href="https://github.com/phoenixframework/phoenix_live_view/blob/30ee942b3a18a9e2e1f222a76a707bfba7bd94f7/priv/static/phoenix_live_view.js#L2062">logic</a> to toggle the value of the <code>display</code> attribute on the target element and apply any transition classes.</p> <p>All of this happens within the LiveView framework. The only thing we had to do to trigger the toggling JavaScript was add one <code>phx-click</code> binding to our HTML element.</p> <p>Now that we have a basic understanding of how LiveView JS commands work, let&#39;s revisit our toggle command make it a little more sophisticated.</p> <figure class="post-cta"> <figcaption> <h1> Fly.io ❤️ Elixir</h1><p> Fly.io is a great way to run your Phoenix LiveView app close to your users. It&#39;s really easy to get started. You can be running in minutes.</p><p><a class="button bg-white text-violet-600 hover:bg-opacity-75 hover:text-violet-700 transition-colors" href="https://fly.io/docs/elixir/"> Deploy a Phoenix app today!&nbsp;&nbsp;<span class='opacity:50'>&rarr;</span> </a></p> </figcaption><div class="image-container"> <img src="/static/images/cta-kitty.webp" srcset="/static/images/cta-kitty@2x.webp 2x" alt=""></div></figure><h2 id='trigger-client-and-server-side-interactions-together' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#trigger-client-and-server-side-interactions-together' aria-label='Anchor'></a>Trigger Client- and Server-Side Interactions Together</h2><p>JS commands let us execute common UI interactions entirely on the client, without round-tripping to the server. But what if we <em>also</em> want to push some message to the server in response to the same <code>phx-click</code> event? We can chain a call to the <code>JS.push/1</code> function to push a message to the server while still toggling our search form entirely on the client-side. We want our push event to target the live component that is rendering the search icon function component. So, when we call <code>Search.icon/1</code> in that component&#39;s template, we&#39;ll pass in a <code>target</code> assignment, like this:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight erb'><code><span class="c">&lt;!-- lib/live_library_web/book_live/search_component.html.heex --&gt;</span> <span class="nt">&lt;Search.icon</span> <span class="na">target=</span><span class="s">{@myself}</span> <span class="nt">/&gt;</span> </code></pre></div><p>Now, add the following to your <code>phx-click</code> event:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">def</span> <span class="n">icon</span><span class="p">(</span><span class="n">assigns</span><span class="p">)</span> <span class="k">do</span> <span class="sx">~H""</span><span class="s2">" &lt;i phx-click={JS.push("</span><span class="n">toggle_book_search</span><span class="s2">", target: @target) |&gt; JS.toggle(to: "</span><span class="c1">#book-search-form")} class="bi bi-search"&gt;&lt;/i&gt;</span> <span class="s2">""" end </span></code></pre></div><p>First, we call <code>JS.push(&quot;toggle_book_search&quot;, target: @target)</code>, then we pipe the resulting <code>Phoenix.LiveView.JS</code> struct to a call to <code>JS.toggle/1</code>. This nice neat reducer pipeline is eloquent and easy to read. We can even wrap it up in a helper function like this:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">def</span> <span class="n">icon</span><span class="p">(</span><span class="n">assigns</span><span class="p">)</span> <span class="k">do</span> <span class="sx">~H""</span><span class="s2">" &lt;i phx-click={toggle(@target)} class="</span><span class="n">bi</span> <span class="n">bi</span><span class="o">-</span><span class="n">search</span><span class="s2">"&gt;&lt;/i&gt; """</span> <span class="k">end</span> <span class="k">def</span> <span class="n">toggle</span><span class="p">(</span><span class="n">target</span><span class="p">)</span> <span class="k">do</span> <span class="no">JS</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="s2">"toggle_book_search"</span><span class="p">,</span> <span class="ss">target:</span> <span class="n">target</span><span class="p">)</span> <span class="o">|&gt;</span> <span class="no">JS</span><span class="o">.</span><span class="n">toggle</span><span class="p">(</span><span class="ss">to:</span> <span class="s2">"#book-search-form"</span><span class="p">)</span> <span class="k">end</span> </code></pre></div><p>Before we build an event handler, let&#39;s think about what we want to happen when the user clicks the icon. We know we want the search form to be shown/hidden, but let&#39;s say we <em>also</em> want to update the URL to <code>/books?search</code> and ensure that if a user navigates directly to <code>/books?search</code>, the search form is shown. We&#39;ll take a step back and tackle that second behavior first.</p> <p>When a user visits <code>/books?search</code>, the search form should be shown. Let&#39;s implement a new CSS rule that sets <code>display: block;</code> for a CSS selector with an ID of <code>#book-search-form</code> <em>and</em> a class of <code>.show</code>:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight scss'><code><span class="cm">/* app.scss */</span> <span class="nn">#book-search-form</span><span class="nc">.show</span> <span class="p">{</span> <span class="nl">display</span><span class="p">:</span> <span class="nb">block</span><span class="p">;</span> <span class="p">}</span> </code></pre></div><p>Next up, let&#39;s implement a <code>handle_params/3</code> function in the parent live view that stores the appropriate CSS class name in state depending on the URI:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="c1"># lib/live_library_web/live/book_live/index.dex</span> <span class="k">def</span> <span class="n">handle_params</span><span class="p">(</span><span class="n">_params</span><span class="p">,</span> <span class="n">uri</span><span class="p">,</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span> <span class="k">if</span> <span class="no">String</span><span class="o">.</span><span class="n">match?</span><span class="p">(</span><span class="n">uri</span><span class="p">,</span> <span class="sr">~r/search/</span><span class="p">)</span> <span class="k">do</span> <span class="p">{</span><span class="ss">:noreply</span><span class="p">,</span> <span class="n">assign_search_class</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="s2">"show"</span><span class="p">)}</span> <span class="k">else</span> <span class="p">{</span><span class="ss">:noreply</span><span class="p">,</span> <span class="n">assign_search_class</span><span class="p">(</span><span class="n">socket</span><span class="p">)}</span> <span class="k">end</span> <span class="k">end</span> <span class="k">def</span> <span class="n">assign_search_class</span><span class="p">(</span><span class="n">socket</span><span class="p">)</span> <span class="k">do</span> <span class="n">assign</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="ss">:search_class</span><span class="p">,</span> <span class="s2">""</span><span class="p">)</span> <span class="k">end</span> <span class="k">def</span> <span class="n">assign_search_class</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="n">class</span><span class="p">)</span> <span class="k">do</span> <span class="n">assign</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="ss">:search_class</span><span class="p">,</span> <span class="n">class</span><span class="p">)</span> <span class="k">end</span> </code></pre></div><p>The index template renders the search live component, and the search component renders the form. We&#39;ll update the form markup in the search live component now to apply a class of the <code>@search_class</code> assignment:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="o">&lt;</span><span class="n">!</span><span class="o">--</span> <span class="n">lib</span><span class="o">/</span><span class="n">live_library_web</span><span class="o">/</span><span class="n">book_live</span><span class="o">/</span><span class="n">search_component</span><span class="o">.</span><span class="n">html</span><span class="o">.</span><span class="n">heex</span> <span class="o">--&gt;</span> <span class="o">&lt;.</span><span class="n">form</span> <span class="n">let</span><span class="o">=</span><span class="p">{</span><span class="n">f</span><span class="p">}</span> <span class="n">for</span><span class="o">=</span><span class="p">{</span><span class="nv">@search_changeset</span><span class="p">}</span> <span class="n">id</span><span class="o">=</span><span class="s2">"book-search-form"</span> <span class="n">phx</span><span class="o">-</span><span class="n">submit</span><span class="o">=</span><span class="s2">"search"</span> <span class="n">phx</span><span class="o">-</span><span class="n">change</span><span class="o">=</span><span class="s2">"update"</span> <span class="n">phx</span><span class="o">-</span><span class="n">target</span><span class="o">=</span><span class="p">{</span><span class="nv">@myself</span><span class="p">}</span> <span class="n">class</span><span class="o">=</span><span class="p">{</span><span class="nv">@search_class</span><span class="p">}</span> <span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">!</span><span class="o">--</span> <span class="n">add</span> <span class="n">this</span> <span class="n">line</span> <span class="o">--&gt;</span> </code></pre></div><p>Now, when a user points their browser at <code>/books?search</code>, the live view will set <code>:search_class</code> in socket assigns to <code>&quot;show&quot;</code>, and our CSS rule will kick-in and set <code>display: block;</code>. If the user points their browser at <code>/books</code>, the live view socket assigns will set <code>:search_class</code> to <code>&quot;&quot;</code>, and our CSS rule will <em>not</em> kick-in. This will will the <code>#book-search-form</code> CSS rule in place, setting <code>display: none;</code>.</p> <p>With this logic in place, we&#39;re finally ready to implement the event handler for the <code>&quot;toggle_book_search&quot;</code> event that we&#39;re pushing to the live component when the user clicks the search icon. Let&#39;s do that now:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="c1"># lib/live_library_web/live/book_live/search_component.ex</span> <span class="k">def</span> <span class="n">handle_event</span><span class="p">(</span><span class="s2">"toggle_book_search"</span><span class="p">,</span> <span class="n">_value</span><span class="p">,</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span> <span class="k">if</span> <span class="n">socket</span><span class="o">.</span><span class="n">assigns</span><span class="o">.</span><span class="n">search_class</span> <span class="o">==</span> <span class="s2">"show"</span> <span class="k">do</span> <span class="p">{</span><span class="ss">:noreply</span><span class="p">,</span> <span class="n">push_patch</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="ss">to:</span> <span class="s2">"/books"</span><span class="p">)}</span> <span class="k">else</span> <span class="p">{</span><span class="ss">:noreply</span><span class="p">,</span> <span class="n">push_patch</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="ss">to:</span> <span class="s2">"/books?search"</span><span class="p">)}</span> <span class="k">end</span> <span class="k">end</span> </code></pre></div><p>Our event handler is fairly simple. If the socket assigns <code>:search_class</code> is already set to <code>&quot;show&quot;</code>, then push a patch to <code>/books</code>. Otherwise, push a patch to <code>/books?search</code>. This will invoke the parent LiveView&#39;s <code>handle_params/3</code> callback. This will update the URL and change the value of <code>socket.assigns.search_class</code> accordingly. But, the page <em>won&#39;t</em> re-render. This is because the <code>JS.toggle</code> client-side code already fired and updated the <code>display</code> CSS value of the target element, so there will be no changes to display. No changes means no re-rendering. With this, we achieve the following:</p> <ul> <li>A user can navigate directly to <code>/books</code> and see a search icon with no form. </li><li>A user can navigate directly to <code>/books?search</code> and see a search icon and a search form. </li><li>If the form is hidden, a user can click the icon and see the URL update to <code>/books?search</code> and see the form appear, all without reloading any portion of the page. </li></ul> <p>Thanks to our ability to chain JS commands, and push events to the server even while we continue to trigger client-side code, we get all of this for just a few lines of Elixir code.</p> <h2 id='js-commands-give-us-simple-and-powerful-client-side-interactions' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#js-commands-give-us-simple-and-powerful-client-side-interactions' aria-label='Anchor'></a>JS Commands Give Us Simple and Powerful Client-Side Interactions</h2><p>You&#39;ve seen how the LiveView framework abstracts away more and more of the commonly reached-for pieces of functionality that back the average modern web page. Now, you get even more JavaScript-powered features without writing any of your own JavaScript.</p> <p>Check out the full functionality in the <a href="https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.JS.html">docs</a> and check out <a href="https://fly.io/phoenix-files/tabs-with-js-commands/">this post</a> to play around with even more JS commands functionality.</p> </content>
</entry>
<entry>
<title>Loading indicators for events with JS.push</title>
<link rel="alternate" href="https://fly.io/phoenix-files/js-push-loading-options/"/>
<id>https://fly.io/phoenix-files/js-push-loading-options/</id>
<published>2022-04-06T00:00:00+00:00</published>
<updated>2023-04-06T14:48:02+00:00</updated>
<content type="html"><h2 id='problem' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#problem' aria-label='Anchor'></a>Problem</h2><p>Phoenix/LiveView apps involve a lot of interaction between the client and the server. We want to customize how we indicate to users that our UI is waiting for a server response to some event. Specifically, we&#39;d like to see a general-purpose loading animation triggered, or we&#39;d like to apply a visual cue to a specific part of our app.</p> <h2 id='solution' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#solution' aria-label='Anchor'></a>Solution</h2><p>Depending on the desired effect, we can use the JS.push command to customize one (or both) of two approaches built into LiveView: a loading animation, such as <a href="https://hexdocs.pm/phoenix_live_view/installation.html#progress-animation">LiveView&#39;s default progress bar</a>, or the temporary <a href="https://hexdocs.pm/phoenix_live_view/bindings.html#loading-states-and-errors">loading classes</a> applied to elements when a <code>phx-</code> event is pushed.</p> <p>Let&#39;s explore how, using <a href="https://livebeats.fly.dev">LiveBeats</a>!</p> <h3 id='setup' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#setup' aria-label='Anchor'></a>Setup</h3><p>Our real-life example uses the <code>JS.push</code> API to send an event with a payload and a target, much as we did in an <a href="https://fly.io/phoenix-files/pushing-events-with-js-push/">earlier post</a>.</p> <p>In LiveBeats we can listen to our favorite playlist and browse different friends&#39; profiles at the same time, without interrupting the music. The secret behind the scenes is that we have two different LiveViews (<code>PlayerLive</code> and <code>ProfileLive</code>) that work independently and communicate by pushing events.</p> <p><img src="/phoenix-files/2022-04-06/loading-indicators-01.webp?2/3&amp;centered" alt="" /></p> <p><code>ProfileLive</code> shows the profile and the playlist; <code>PlayerLive</code> takes care of playing whichever playlist we tell it to play.</p> <p>The &quot;Listen&quot; button is part of <code>ProfileLive</code>. When we click it, we want the <em>player</em>, <code>PlayerLive</code><em>,</em> to start playing the playlist currently displayed in the profile.</p> <p>Here&#39;s how we achieve that with <code>JS.push</code>:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="o">&lt;.</span><span class="n">button</span> <span class="n">phx</span><span class="o">-</span><span class="n">click</span><span class="o">=</span><span class="p">{</span><span class="no">JS</span><span class="o">.</span><span class="n">push</span><span class="p">(</span> <span class="s2">"switch_profile"</span><span class="p">,</span> <span class="ss">value:</span> <span class="p">%{</span><span class="ss">user_id:</span> <span class="nv">@profile</span><span class="o">.</span><span class="n">user_id</span><span class="p">},</span> <span class="ss">target:</span> <span class="s2">"#player"</span><span class="p">)}</span> <span class="o">&gt;</span> <span class="no">Listen</span> <span class="o">&lt;/.</span><span class="n">button</span><span class="o">&gt;</span> </code></pre></div><p>The &quot;Listen&quot; button sends an event called <code>switch_profile</code> to the server. We define a payload that contains the user ID of the profile owner, and finally, we specify that the event should be handled by the component whose identifier is <code>#player</code>.</p> <p>On the <code>PlayerLive</code> side, we need a <code>handle_event</code> callback to execute all the logic to switch to the current playlist:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">def</span> <span class="n">handle_event</span><span class="p">(</span><span class="s2">"switch_profile"</span><span class="p">,</span> <span class="p">%{</span><span class="s2">"user_id"</span> <span class="o">=&gt;</span> <span class="n">user_id</span><span class="p">},</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span> <span class="p">{</span><span class="ss">:noreply</span><span class="p">,</span> <span class="n">switch_profile</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="n">user_id</span><span class="p">)}</span> <span class="k">end</span> </code></pre></div><p>We&#39;re ready to play music!</p> <p><video title="When a user clicks the &quot;listen&quot; button, the player displays the profile playlist name" src="/phoenix-files/2022-04-06/loading-indicators-02.mp4?card?center" autoplay="autoplay" loop="loop" muted="muted" playsinline="" disablePictureInPicture="" /></p> <h3 id='triggering-a-page-loading-animation' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#triggering-a-page-loading-animation' aria-label='Anchor'></a>Triggering a Page Loading Animation</h3><p>We&#39;ve set up our profile-player communication. Now we want some visual feedback on the page while the server applies its changes.</p> <p>By default, LiveView displays the <code>topbar</code> progress indicator at the top of the page when we navigate across our application, as well as on form submits. Can we trigger <code>topbar</code> when our custom events are being processed, too?</p> <p>The secret is in the <code>phx:page-loading-start</code> and <code>phx:page-loading-stop</code> events. If we take a look in our <code>app.js</code> file, we find a listener for each of those events:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight javascript'><code><span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">phx:page-loading-start</span><span class="dl">"</span><span class="p">,</span> <span class="nx">info</span> <span class="o">=&gt;</span> <span class="nx">topbar</span><span class="p">.</span><span class="nx">show</span><span class="p">())</span> <span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">phx:page-loading-stop</span><span class="dl">"</span><span class="p">,</span> <span class="nx">info</span> <span class="o">=&gt;</span> <span class="nx">topbar</span><span class="p">.</span><span class="nx">hide</span><span class="p">())</span> </code></pre></div><p>The top bar is shown and hidden when events <code>phx:page-loading-start</code> and <code>phx:page-loading-stop</code> are emitted, respectively.</p> <aside class="right-sidenote"> You can replace the default <code>topbar</code> animation with your own actions to be applied when these events are triggered.</aside><p>With this in mind: if we can emit those events, we can trigger the <code>topbar</code> animation. And that&#39;s what the <code>page_loading</code> option of <code>JS.push</code> is for!</p> <p>This option takes a boolean value. If <code>true</code>, <code>phx:page-loading-start</code> is emitted when the event is pushed, and <code>phx:page-loading-stop</code> when the server has finished all its processing and responded with an acknowledgement.</p> <p>We can extend the LiveBeats &quot;Listen&quot; button to use this and see the <code>topbar</code>:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="no">JS</span><span class="o">.</span><span class="n">push</span><span class="p">(</span> <span class="s2">"switch_profile"</span><span class="p">,</span> <span class="ss">value:</span> <span class="p">%{</span><span class="ss">user_id:</span> <span class="nv">@profile</span><span class="o">.</span><span class="n">user_id</span><span class="p">},</span> <span class="ss">target:</span> <span class="s2">"#player"</span><span class="p">,</span> <span class="ss">page_loading:</span> <span class="no">true</span> <span class="p">)</span> </code></pre></div><aside class="right-sidenote"> You may be thinking that you could do the same with <code>phx-page-loading</code> annotation, but it&#39;s always good to have new options, right?</aside><p>This is an artificial example, because in general the LiveBeats profile change is so fast that adding a loading indicator <a href="https://fly.io/phoenix-files/make-your-liveview-feel-faster/">would make it feel slower</a>!</p> <p><video title="When a user clicks the &quot;listen&quot; button, a topbar is showed and after that the player displays the profile playlist name" src="/phoenix-files/2022-04-06/loading-indicators-03.mp4?card?center" autoplay="autoplay" loop="loop" muted="muted" playsinline="" disablePictureInPicture="" /></p> <h3 id='using-temporary-loading-classes' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#using-temporary-loading-classes' aria-label='Anchor'></a>Using Temporary Loading Classes</h3><p>The <code>topbar</code> animation makes our playlist change look the same as a full page reload. What if we want to indicate that <em>just</em> the player is waiting for an action to finish?</p> <p>Whenever an event is sent using a LiveView <code>phx-</code> binding, the emitting element is given a temporary <a href="https://hexdocs.pm/phoenix_live_view/bindings.html#loading-states-and-errors">loading class</a> (e.g. <code>phx-click-loading</code>) that can be used to apply some effect in CSS.</p> <p>The <code>JS.push</code> <code>loading</code> option specifies further elements to receive this loading class.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="no">JS</span><span class="o">.</span><span class="n">push</span><span class="p">(</span> <span class="s2">"switch_profile"</span><span class="p">,</span> <span class="ss">value:</span><span class="p">%{</span><span class="ss">user_id:</span> <span class="nv">@profile</span><span class="o">.</span><span class="n">user_id</span><span class="p">},</span> <span class="ss">target:</span> <span class="s2">"#player"</span><span class="p">,</span> <span class="ss">loading:</span> <span class="s2">"#player"</span> <span class="p">)</span> </code></pre></div><p>Now we can apply a fade effect to the <code>#player</code> that ends when the server responds with an acknowledgement for the <code>switch_profile</code> event.</p> <p><video title="When a user clicks the &quot;listen&quot; button, the player fades out until the profile playlist name is displayed" src="/phoenix-files/2022-04-06/loading-indicators-04.mp4?card?center" autoplay="autoplay" loop="loop" muted="muted" playsinline="" disablePictureInPicture="" /></p> <p>We are indicating that the player is executing an action, but there isn&#39;t an entire page reloading.</p> <figure class="post-cta"> <figcaption> <h1> Fly ❤️ Elixir</h1><p> Fly is an awesome place to run your Elixir apps. It&#39;s really easy to get started. You can be running in minutes.</p><p><a class="button bg-white text-violet-600 hover:bg-opacity-75 hover:text-violet-700 transition-colors" href="https://fly.io/docs/elixir/"> Deploy your Elixir app today!&nbsp;&nbsp;<span class='opacity:50'>&rarr;</span> </a></p> </figcaption><div class="image-container"> <img src="/static/images/cta-rabbit.webp" srcset="/static/images/cta-rabbit@2x.webp 2x" alt=""></div></figure><h2 id='discussion' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#discussion' aria-label='Anchor'></a>Discussion</h2><p><code>JS.push</code> is a difficult utility to summarize.</p> <p>We <em>can</em> simply use its API as an <a href="https://fly.io/phoenix-files/pushing-events-with-js-push/">alternative syntax to send events to the back end</a>. We can <a href="https://fly.io/phoenix-files/pushing-events-with-js-push/#composing-loading-indicators-0with-other-js-commands">compose it with the client-side LiveView <code>JS commands</code></a>, to coordinate optimistic client-side effects. Today, we explored the unique loading-state options of JS.push, which allow us more control over how an app, or some part of it, indicates that it&#39;s awaiting a server response to a given event.</p> <p>Put together, <code>JS.push</code> is a toolkit to push events and extend our creative options for how the front-end interacts and communicates with the user.</p> </content>
</entry>
<entry>
<title>Exploring Options for Storing Custom Data in Ecto</title>
<link rel="alternate" href="https://fly.io/phoenix-files/exploring-options-for-storing-custom-data-in-ecto/"/>
<id>https://fly.io/phoenix-files/exploring-options-for-storing-custom-data-in-ecto/</id>
<published>2022-04-04T00:00:00+00:00</published>
<updated>2023-04-06T14:48:02+00:00</updated>
<content type="html"><p class="lead"> <a href="http://Fly.io">Fly.io</a> runs applications by transmogrifying Docker containers into Firecracker micro-VMs running on our hardware around the world, connected with WireGuard to a global Anycast network. Your Elixir app could be one of them! <a href="https://fly.io/docs/speedrun/">Check us out</a>: you can deploy in minutes.</p><p>Ever wanted to store a blob of custom data on a database record? The data we want to store might be complex too, made up of multiple fields and even lists. When the data is stored using <a href="https://hexdocs.pm/ecto/Ecto.html">Ecto</a> there are several ways we can do it. This article explores two paths and discusses some of the pros and cons for each approach.</p> <p>Recently I was confronted with this choice again. This choice doesn&#39;t come along that often for me and I had to re-discover the pros and cons for each option. This article is intended to be a sign posted at the fork in the road to let travelers know a bit more about what lies beyond in the paths before them.</p> <p>Both in life and in programming, we can be presented with a choice of two directions to go. If you are familiar with Robert Frost&#39;s poem <a href="https://www.poetryfoundation.org/poems/44272/the-road-not-taken">The Road Not Taken</a>, then you may know that it&#39;s actually about <a href="https://www.poetryfoundation.org/articles/89511/robert-frost-the-road-not-taken">indecision</a>, the desire to take <em>both</em> paths because deciding things can be scary! In this article, we will venture a little way down each path before finally deciding which to take.</p> <p>Before we discuss the choice of paths, we need to cover the problem being solved. Let&#39;s talk about the kind of data being stored.</p> <h2 id='our-custom-data' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#our-custom-data' aria-label='Anchor'></a>Our Custom Data</h2><p>In our scenario, we have a service that offers many games that members can play. The games can be saved in various states of play and be resumed later. An <code>Account</code> has many <code>GameSave</code> records.</p> <p>We didn&#39;t want to create a database table for every type of game that <em>could</em> be saved. We are continually adding new games and occasionally retiring old ones that didn&#39;t catch on.</p> <p>Instead of creating a table for each game type, we created a single table that records a saved game of <em>any</em> game type. It looks something like this:</p> <p><img src="/phoenix-files/2022-04-04/store_custom_data_erd.webp?center" alt="Account has many GameSave. GameSave has one GameData. ERD diagram" /></p> <p>Every game needs to store its data in a different way. For example, our saved <a href="https://fly.io/blog/building-a-distributed-turn-based-game-system-in-elixir/">Tic-Tac-Toe</a> game will be stored very differently from a chess game or a memory game. The structure and details of the <code>GameData</code> are defined by the game itself.</p> <p>How can we do this using <a href="https://www.postgresql.org/">Postgres</a> and <a href="https://hexdocs.pm/ecto/Ecto.html">Ecto</a>?</p> <h2 id='path-one-store-data-as-a-map' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#path-one-store-data-as-a-map' aria-label='Anchor'></a>Path One: Store Data as a <code>map</code></h2><p>The easiest and first thought might be to use an Ecto <code>:map</code> field type. In Postgres, this is stored as a <code>jsonb</code> field. In MSSQL it is stored as text. Other databases will vary, so we need to understand how it works in our particular database. In this situation, it&#39;s Postgres.</p> <p>The <a href="https://hexdocs.pm/ecto/Ecto.Schema.html#module-the-map-type"><code>Ecto.Schema</code> docs on the <code>:map</code> field type</a> are very helpful if you plan to go in this direction.</p> <p>Let&#39;s see what it would look like for our <code>GameSave</code> to use a <code>:map</code> field.</p> <h3 id='migration' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#migration' aria-label='Anchor'></a>Migration</h3><p>It&#39;s easy to create this in our migration:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">defmodule</span> <span class="no">Core</span><span class="o">.</span><span class="no">Repo</span><span class="o">.</span><span class="no">Migrations</span><span class="o">.</span><span class="no">CreateGameSaves</span> <span class="k">do</span> <span class="kn">use</span> <span class="no">Ecto</span><span class="o">.</span><span class="no">Migration</span> <span class="k">def</span> <span class="n">change</span> <span class="k">do</span> <span class="n">create</span> <span class="n">table</span><span class="p">(</span><span class="ss">:game_saves</span><span class="p">)</span> <span class="k">do</span> <span class="n">add</span> <span class="ss">:account_id</span><span class="p">,</span> <span class="n">references</span><span class="p">(</span><span class="ss">:accounts</span><span class="p">,</span> <span class="ss">on_delete:</span> <span class="ss">:delete_all</span><span class="p">),</span> <span class="ss">null:</span> <span class="no">false</span> <span class="c1"># ...</span> <span class="c1"># Game data stored as a map</span> <span class="n">add</span> <span class="ss">:data</span><span class="p">,</span> <span class="ss">:map</span><span class="p">,</span> <span class="ss">null:</span> <span class="no">false</span><span class="p">,</span> <span class="ss">default:</span> <span class="p">%{}</span> <span class="n">timestamps</span><span class="p">()</span> <span class="k">end</span> <span class="k">end</span> <span class="k">end</span> </code></pre></div><p>The data type used is <code>:map</code>. We can even assign a default value of an empty map. Cool!</p> <h3 id='ecto-schema' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#ecto-schema' aria-label='Anchor'></a>Ecto Schema</h3><p>Our schema also makes easy use of the <code>:map</code> field type.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">defmodule</span> <span class="no">Core</span><span class="o">.</span><span class="no">GameSaves</span><span class="o">.</span><span class="no">GameSave</span> <span class="k">do</span> <span class="kn">use</span> <span class="no">Ecto</span><span class="o">.</span><span class="no">Schema</span> <span class="n">schema</span> <span class="s2">"game_saves"</span> <span class="k">do</span> <span class="c1"># ...</span> <span class="n">field</span> <span class="ss">:data</span><span class="p">,</span> <span class="ss">:map</span><span class="p">,</span> <span class="ss">default:</span> <span class="p">%{},</span> <span class="ss">required:</span> <span class="no">true</span> <span class="n">belongs_to</span> <span class="ss">:account</span><span class="p">,</span> <span class="no">Core</span><span class="o">.</span><span class="no">Accounts</span><span class="o">.</span><span class="no">Account</span> <span class="n">timestamps</span><span class="p">()</span> <span class="k">end</span> <span class="k">end</span> </code></pre></div><p>With our storage and data structures ready, let&#39;s look at how we use it.</p> <h3 id='writing-data' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#writing-data' aria-label='Anchor'></a>Writing Data</h3><p>When writing the data, a common approach is to use a normal map. By &quot;normal&quot;, we mean that it uses atoms for keys and uses atoms for field values as well. Like this:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="n">data</span> <span class="o">=</span> <span class="p">%{</span> <span class="ss">turn:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">group_types:</span> <span class="p">[</span><span class="ss">:hero</span><span class="p">,</span> <span class="ss">:mage</span><span class="p">,</span> <span class="ss">:elf</span><span class="p">],</span> <span class="ss">characters:</span> <span class="p">[</span> <span class="p">%{</span><span class="ss">name:</span> <span class="s2">"Herman the Hero"</span><span class="p">,</span> <span class="ss">type:</span> <span class="ss">:hero</span><span class="p">,</span> <span class="ss">health:</span> <span class="mi">130</span><span class="p">},</span> <span class="p">%{</span><span class="ss">name:</span> <span class="s2">"Morgan the Mage"</span><span class="p">,</span> <span class="ss">type:</span> <span class="ss">:mage</span><span class="p">,</span> <span class="ss">health:</span> <span class="mi">100</span><span class="p">},</span> <span class="p">%{</span><span class="ss">name:</span> <span class="s2">"Edward the Elf"</span><span class="p">,</span> <span class="ss">type:</span> <span class="ss">:elf</span><span class="p">,</span> <span class="ss">health:</span> <span class="mi">100</span><span class="p">},</span> <span class="p">]</span> <span class="p">}</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">save</span><span class="p">}</span> <span class="o">=</span> <span class="no">Core</span><span class="o">.</span><span class="no">GameSaves</span><span class="o">.</span><span class="n">create_game_save</span><span class="p">(</span><span class="n">player_account</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span> <span class="n">save</span> </code></pre></div><p>After inserting the data, our struct is returned looking like this:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="p">%</span><span class="no">GameSave</span><span class="p">{</span> <span class="ss">id:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">data:</span> <span class="p">%{</span> <span class="ss">turn:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">group_types:</span> <span class="p">[</span><span class="ss">:hero</span><span class="p">,</span> <span class="ss">:mage</span><span class="p">,</span> <span class="ss">:elf</span><span class="p">],</span> <span class="ss">characters:</span> <span class="p">[</span> <span class="p">%{</span><span class="ss">name:</span> <span class="s2">"Herman the Hero"</span><span class="p">,</span> <span class="ss">type:</span> <span class="ss">:hero</span><span class="p">,</span> <span class="ss">health:</span> <span class="mi">130</span><span class="p">},</span> <span class="p">%{</span><span class="ss">name:</span> <span class="s2">"Morgan the Mage"</span><span class="p">,</span> <span class="ss">type:</span> <span class="ss">:mage</span><span class="p">,</span> <span class="ss">health:</span> <span class="mi">100</span><span class="p">},</span> <span class="p">%{</span><span class="ss">name:</span> <span class="s2">"Edward the Elf"</span><span class="p">,</span> <span class="ss">type:</span> <span class="ss">:elf</span><span class="p">,</span> <span class="ss">health:</span> <span class="mi">100</span><span class="p">},</span> <span class="p">]</span> <span class="p">}</span> <span class="p">}</span> </code></pre></div><p>The thing to note here is the <code>data</code> field. As you would expect, it looks like the data we assigned.</p> <p>However, when we load that same record back from the database, it looks very different.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="p">%</span><span class="no">GameSave</span><span class="p">{</span> <span class="ss">id:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">data:</span> <span class="p">%{</span> <span class="s2">"turn"</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="s2">"group_types"</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s2">"hero"</span><span class="p">,</span> <span class="s2">"mage"</span><span class="p">,</span> <span class="s2">"elf"</span><span class="p">],</span> <span class="s2">"characters"</span> <span class="o">=&gt;</span> <span class="p">[</span> <span class="p">%{</span><span class="s2">"name"</span> <span class="o">=&gt;</span> <span class="s2">"Herman the Hero"</span><span class="p">,</span> <span class="s2">"type"</span> <span class="o">=&gt;</span> <span class="s2">"hero"</span><span class="p">,</span> <span class="s2">"health"</span> <span class="o">=&gt;</span> <span class="mi">130</span><span class="p">},</span> <span class="p">%{</span><span class="s2">"name"</span> <span class="o">=&gt;</span> <span class="s2">"Morgan the Mage"</span><span class="p">,</span> <span class="s2">"type"</span> <span class="o">=&gt;</span> <span class="s2">"mage"</span><span class="p">,</span> <span class="s2">"health"</span> <span class="o">=&gt;</span> <span class="mi">100</span><span class="p">},</span> <span class="p">%{</span><span class="s2">"name"</span> <span class="o">=&gt;</span> <span class="s2">"Edward the Elf"</span><span class="p">,</span> <span class="s2">"type"</span> <span class="o">=&gt;</span> <span class="s2">"elf"</span><span class="p">,</span> <span class="s2">"health"</span> <span class="o">=&gt;</span> <span class="mi">100</span><span class="p">},</span> <span class="p">]</span> <span class="p">}</span> <span class="p">}</span> </code></pre></div><p>Everything in <code>data</code> was serialized through the <a href="https://hex.pm/packages/jason">Jason</a> library. We lost all the atoms, both as keys and values.</p> <p>This behavior <em>is</em> expected and <a href="https://hexdocs.pm/ecto/Ecto.Schema.html#module-the-map-type">documented</a>, but it still catches people because at first it looks like it works just how you&#39;d expect.</p> <p>From the documentation:</p> <blockquote> <p>Keep in mind that we advise the map keys to be strings or integers instead of atoms. Atoms may be accepted depending on how maps are serialized but the database will always convert atom keys to strings due to security reasons.</p> </blockquote> <p>The inconsistency of assigning a map with atoms and later restoring with string keys can create accidental bugs. If we write code that uses the data right after creation when it still has atom keys, those same functions will not work when used on data after it&#39;s read from the database.</p> <p>Take a look at this function. It works fine right after we create the record. When we load it back, the <code>characters</code> key will be a string and this function won&#39;t match!</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">def</span> <span class="n">get_group_size</span><span class="p">(%</span><span class="no">GameSave</span><span class="p">{</span><span class="ss">data:</span> <span class="p">%{</span><span class="ss">characters:</span> <span class="n">characters</span><span class="p">}})</span> <span class="k">do</span> <span class="n">length</span><span class="p">(</span><span class="n">characters</span><span class="p">)</span> <span class="k">end</span> </code></pre></div><p>Hopefully our tests would catch this early.</p> <p>So let&#39;s assume that we are careful and only create maps with string keys and no atoms. What are some pros and cons to this approach?</p> <h3 id='pros-to-map-approach' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#pros-to-map-approach' aria-label='Anchor'></a>Pros to Map Approach</h3> <ul> <li><a href="https://www.postgresql.org/docs/current/datatype-json.html">Postgres allows us to query</a> data in the JSON map. This is perhaps the biggest benefit! We can actually query for data based on the contents inside the Postgres <code>jsonb</code> field! </li><li>Postgres tools like <a href="https://www.pgadmin.org/">pgAdmin</a> know how to display the data and support reading and writing it. </li><li>This approach is officially encouraged. </li></ul> <h3 id='cons-to-map-approach' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#cons-to-map-approach' aria-label='Anchor'></a>Cons to Map Approach</h3> <ul> <li>Data needs to be created using string keys and strings for atoms. Depending on where the data is coming from, it may need to be converted manually. </li><li>Limited to only store what JSON can represent. </li><li>The potential for accidental bugs when setting data using atoms. </li></ul> <h2 id='path-two-store-data-as-an-erlang-encoded-binary' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#path-two-store-data-as-an-erlang-encoded-binary' aria-label='Anchor'></a>Path Two: Store Data as an Erlang Encoded Binary</h2><p>There is another less used approach available to us. We can natively serialize our Elixir data structures and store them directly in the database. Doing this has a different set of trade-offs which we&#39;ll explore further.</p> <p>First, it&#39;s important to know that you can do this:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="n">data</span> <span class="o">=</span> <span class="p">%{</span><span class="ss">custom_data:</span> <span class="s2">"Yes!"</span><span class="p">,</span> <span class="ss">valid_states:</span> <span class="p">[</span><span class="ss">:on</span><span class="p">,</span> <span class="ss">:off</span><span class="p">]}</span> <span class="n">term</span> <span class="o">=</span> <span class="ss">:erlang</span><span class="o">.</span><span class="n">term_to_binary</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="c1">#=&gt; &lt;&lt;131, 116, 0, 0, 0, 2, 100, 0, 11, 99, 117, 115, 116, 111, 109, 95, 100, 97,</span> <span class="c1">#=&gt; 116, 97, 109, 0, 0, 0, 4, 89, 101, 115, 33, 100, 0, 12, 118, 97, 108, 105,</span> <span class="c1">#=&gt; 100, 95, 115, 116, 97, 116, 101, 115, 108, 0, 0, 0, 2, 100, ...&gt;&gt;</span> <span class="n">restored</span> <span class="o">=</span> <span class="ss">:erlang</span><span class="o">.</span><span class="n">binary_to_term</span><span class="p">(</span><span class="n">term</span><span class="p">)</span> <span class="c1">#=&gt; %{custom_data: "Yes!", valid_states: [:on, :off]}</span> </code></pre></div><p>In the above code, we create an Elixir map and convert it to a binary term format. Then we convert from the binary format back to the our original data.</p> <p>Using <a href="https://www.erlang.org/doc/man/erlang.html#term_to_binary-1"><code>:erlang.term_to_binary/1</code></a> we can convert <em>any</em> Elixir term to a binary format. The binary data is restored using <a href="https://www.erlang.org/doc/man/erlang.html#binary_to_term-1"><code>:erlang.binary_to_term/1</code></a>.</p> <p>Serializing through the <a href="https://www.erlang.org/doc/apps/erts/erl_ext_dist.html">External Term Format</a> is a documented official feature. It is used for transferring data outside of Elixir/Erlang systems and back. Hey! That&#39;s what we&#39;re doing!</p> <p>If we wanted to try this out on an <code>Ecto.Schema</code>, how would we do it?</p> <h3 id='migration-2' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#migration-2' aria-label='Anchor'></a>Migration</h3><p>Postgres and Ecto both support <code>binary</code> column types.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">defmodule</span> <span class="no">Core</span><span class="o">.</span><span class="no">Repo</span><span class="o">.</span><span class="no">Migrations</span><span class="o">.</span><span class="no">CreateGameSaves</span> <span class="k">do</span> <span class="kn">use</span> <span class="no">Ecto</span><span class="o">.</span><span class="no">Migration</span> <span class="k">def</span> <span class="n">change</span> <span class="k">do</span> <span class="n">create</span> <span class="n">table</span><span class="p">(</span><span class="ss">:game_saves</span><span class="p">)</span> <span class="k">do</span> <span class="n">add</span> <span class="ss">:account_id</span><span class="p">,</span> <span class="n">references</span><span class="p">(</span><span class="ss">:accounts</span><span class="p">,</span> <span class="ss">on_delete:</span> <span class="ss">:delete_all</span><span class="p">),</span> <span class="ss">null:</span> <span class="no">false</span> <span class="c1"># ...</span> <span class="c1"># Game data stored as binary</span> <span class="n">add</span> <span class="ss">:data</span><span class="p">,</span> <span class="ss">:binary</span><span class="p">,</span> <span class="ss">null:</span> <span class="no">false</span> <span class="n">timestamps</span><span class="p">()</span> <span class="k">end</span> <span class="k">end</span> <span class="k">end</span> </code></pre></div><p>Notice that our <code>data</code> field has the type <code>:binary</code>.</p> <h3 id='ecto-schema-2' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#ecto-schema-2' aria-label='Anchor'></a>Ecto Schema</h3><p>To make it easier to store our binary data in our schema, we can create a custom <a href="https://hexdocs.pm/ecto/Ecto.Type.html">Ecto.Type</a>. To do what we want, this is what ours would look like:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">defmodule</span> <span class="no">Core</span><span class="o">.</span><span class="no">EctoErlangBinary</span> <span class="k">do</span> <span class="nv">@moduledoc</span> <span class="sd">""" A custom Ecto type for handling the serialization of arbitrary data types stored as binary data in the database. Requires the underlying DB field to be a binary. """</span> <span class="kn">use</span> <span class="no">Ecto</span><span class="o">.</span><span class="no">Type</span> <span class="k">def</span> <span class="n">type</span><span class="p">,</span> <span class="k">do</span><span class="p">:</span> <span class="ss">:binary</span> <span class="nv">@doc</span> <span class="sd">""" Provides custom casting rules for params. Nothing changes here. We only need to handle deserialization. """</span> <span class="k">def</span> <span class="n">cast</span><span class="p">(</span><span class="ss">:any</span><span class="p">,</span> <span class="n">term</span><span class="p">),</span> <span class="k">do</span><span class="p">:</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">term</span><span class="p">}</span> <span class="k">def</span> <span class="n">cast</span><span class="p">(</span><span class="n">term</span><span class="p">),</span> <span class="k">do</span><span class="p">:</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">term</span><span class="p">}</span> <span class="nv">@doc</span> <span class="sd">""" Convert the raw binary value from the database back to the desired term. """</span> <span class="k">def</span> <span class="n">load</span><span class="p">(</span><span class="n">raw_binary</span><span class="p">)</span> <span class="ow">when</span> <span class="n">is_binary</span><span class="p">(</span><span class="n">raw_binary</span><span class="p">),</span> <span class="k">do</span><span class="p">:</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="ss">:erlang</span><span class="o">.</span><span class="n">binary_to_term</span><span class="p">(</span><span class="n">raw_binary</span><span class="p">)}</span> <span class="nv">@doc</span> <span class="sd">""" Converting the data structure to binary for storage. """</span> <span class="k">def</span> <span class="n">dump</span><span class="p">(</span><span class="n">term</span><span class="p">),</span> <span class="k">do</span><span class="p">:</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="ss">:erlang</span><span class="o">.</span><span class="n">term_to_binary</span><span class="p">(</span><span class="n">term</span><span class="p">)}</span> <span class="k">end</span> </code></pre></div><p>This implements the callbacks for the <a href="https://hexdocs.pm/ecto/Ecto.Type.html">Ecto.Type</a> behaviour. The important bits here are the <code>load</code> and <code>dump</code> functions.</p> <p>With our custom <code>Ecto.Type</code> defined, we can use it in our schema.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">defmodule</span> <span class="no">Core</span><span class="o">.</span><span class="no">GameSaves</span><span class="o">.</span><span class="no">GameSave</span> <span class="k">do</span> <span class="kn">use</span> <span class="no">Ecto</span><span class="o">.</span><span class="no">Schema</span> <span class="n">alias</span> <span class="no">Core</span><span class="o">.</span><span class="no">EctoErlangBinary</span> <span class="n">schema</span> <span class="s2">"game_saves"</span> <span class="k">do</span> <span class="c1"># ...</span> <span class="n">field</span> <span class="ss">:data</span><span class="p">,</span> <span class="no">EctoErlangBinary</span><span class="p">,</span> <span class="ss">required:</span> <span class="no">true</span> <span class="n">belongs_to</span> <span class="ss">:account</span><span class="p">,</span> <span class="no">Core</span><span class="o">.</span><span class="no">Accounts</span><span class="o">.</span><span class="no">Account</span> <span class="n">timestamps</span><span class="p">()</span> <span class="k">end</span> <span class="k">end</span> </code></pre></div><p>The field <code>data</code> uses the type <code>EctoErlangBinary</code>. Now, what does it look like to use this?</p> <h3 id='writing-data-2' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#writing-data-2' aria-label='Anchor'></a>Writing Data</h3><p>What happens when we use our same map example?</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="n">data</span> <span class="o">=</span> <span class="p">%{</span> <span class="ss">turn:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">group_types:</span> <span class="p">[</span><span class="ss">:hero</span><span class="p">,</span> <span class="ss">:mage</span><span class="p">,</span> <span class="ss">:elf</span><span class="p">],</span> <span class="ss">characters:</span> <span class="p">[</span> <span class="p">%{</span><span class="ss">name:</span> <span class="s2">"Herman the Hero"</span><span class="p">,</span> <span class="ss">type:</span> <span class="ss">:hero</span><span class="p">,</span> <span class="ss">health:</span> <span class="mi">130</span><span class="p">},</span> <span class="p">%{</span><span class="ss">name:</span> <span class="s2">"Morgan the Mage"</span><span class="p">,</span> <span class="ss">type:</span> <span class="ss">:mage</span><span class="p">,</span> <span class="ss">health:</span> <span class="mi">100</span><span class="p">},</span> <span class="p">%{</span><span class="ss">name:</span> <span class="s2">"Edward the Elf"</span><span class="p">,</span> <span class="ss">type:</span> <span class="ss">:elf</span><span class="p">,</span> <span class="ss">health:</span> <span class="mi">100</span><span class="p">},</span> <span class="p">]</span> <span class="p">}</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">save</span><span class="p">}</span> <span class="o">=</span> <span class="no">Core</span><span class="o">.</span><span class="no">GameSaves</span><span class="o">.</span><span class="n">create_game_save</span><span class="p">(</span><span class="n">player_account</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span> <span class="n">save</span> </code></pre></div><p>After inserting the data, our struct is returned looking like this:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="p">%</span><span class="no">GameSave</span><span class="p">{</span> <span class="ss">id:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">data:</span> <span class="p">%{</span> <span class="ss">turn:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">group_types:</span> <span class="p">[</span><span class="ss">:hero</span><span class="p">,</span> <span class="ss">:mage</span><span class="p">,</span> <span class="ss">:elf</span><span class="p">],</span> <span class="ss">characters:</span> <span class="p">[</span> <span class="p">%{</span><span class="ss">name:</span> <span class="s2">"Herman the Hero"</span><span class="p">,</span> <span class="ss">type:</span> <span class="ss">:hero</span><span class="p">,</span> <span class="ss">health:</span> <span class="mi">130</span><span class="p">},</span> <span class="p">%{</span><span class="ss">name:</span> <span class="s2">"Morgan the Mage"</span><span class="p">,</span> <span class="ss">type:</span> <span class="ss">:mage</span><span class="p">,</span> <span class="ss">health:</span> <span class="mi">100</span><span class="p">},</span> <span class="p">%{</span><span class="ss">name:</span> <span class="s2">"Edward the Elf"</span><span class="p">,</span> <span class="ss">type:</span> <span class="ss">:elf</span><span class="p">,</span> <span class="ss">health:</span> <span class="mi">100</span><span class="p">},</span> <span class="p">]</span> <span class="p">}</span> <span class="p">}</span> </code></pre></div><p>That&#39;s what we would expect. The <code>data</code> field has the Elixir map we assigned it.</p> <p>What happens when we load it from the database?</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="no">Core</span><span class="o">.</span><span class="no">GameSaves</span><span class="o">.</span><span class="n">get_game_save!</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">%</span><span class="no">GameSave</span><span class="p">{</span> <span class="ss">id:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">data:</span> <span class="p">%{</span> <span class="ss">turn:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">group_types:</span> <span class="p">[</span><span class="ss">:hero</span><span class="p">,</span> <span class="ss">:mage</span><span class="p">,</span> <span class="ss">:elf</span><span class="p">],</span> <span class="ss">characters:</span> <span class="p">[</span> <span class="p">%{</span><span class="ss">name:</span> <span class="s2">"Herman the Hero"</span><span class="p">,</span> <span class="ss">type:</span> <span class="ss">:hero</span><span class="p">,</span> <span class="ss">health:</span> <span class="mi">130</span><span class="p">},</span> <span class="p">%{</span><span class="ss">name:</span> <span class="s2">"Morgan the Mage"</span><span class="p">,</span> <span class="ss">type:</span> <span class="ss">:mage</span><span class="p">,</span> <span class="ss">health:</span> <span class="mi">100</span><span class="p">},</span> <span class="p">%{</span><span class="ss">name:</span> <span class="s2">"Edward the Elf"</span><span class="p">,</span> <span class="ss">type:</span> <span class="ss">:elf</span><span class="p">,</span> <span class="ss">health:</span> <span class="mi">100</span><span class="p">},</span> <span class="p">]</span> <span class="p">}</span> <span class="p">}</span> </code></pre></div><p>After reading back from the database, it stayed the same! Our atom keys stayed atoms and so did our atom values.</p> <h3 id='another-example' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#another-example' aria-label='Anchor'></a>Another Example</h3><p>For another concrete example, let&#39;s talk about modeling a standard card game with face cards. We start by creating the game logic. During the design of the game, we find it makes the most sense to model the cards like this:</p> <ul> <li><code>{:club, 4}</code> for a 4 of Clubs </li><li><code>{:heart, &quot;K&quot;}</code> for a King of Hearts </li><li><code>{:spade, &quot;A&quot;}</code> for an Ace of Spades </li></ul> <p>With this data structure, a players hand can be expressed as a simple keyword list!</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="n">player_1</span> <span class="o">=</span> <span class="p">[</span><span class="ss">club:</span> <span class="mi">2</span><span class="p">,</span> <span class="ss">club:</span> <span class="mi">8</span><span class="p">,</span> <span class="ss">spade:</span> <span class="mi">8</span><span class="p">,</span> <span class="ss">heart:</span> <span class="mi">4</span><span class="p">,</span> <span class="ss">heart:</span> <span class="s2">"J"</span><span class="p">]</span> </code></pre></div><p>For writing the game logic, a data structure like this makes pattern matching easy. After our game logic is implemented, we turn to serializing the data so it can be recovered when it crashes or a node is shutdown as part of a new deploy.</p> <p>If we store the data as a <code>map</code> in a <code>jsonb</code> field, then we can&#39;t serialize a keyword list. That doesn&#39;t translate automatically to JSON. We can convert it to a JSON friendly map like this:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="n">card</span> <span class="o">=</span> <span class="p">%{</span> <span class="s2">"suit"</span> <span class="o">=&gt;</span> <span class="s2">"spade"</span><span class="p">,</span> <span class="s2">"value"</span> <span class="o">=&gt;</span> <span class="mi">8</span> <span class="p">}</span> </code></pre></div><p>While this data structure works well for JSON, we have to handle transforming our data into this map for storage and then later transform it back to the keyword list format.</p> <p>If we store the data as a <code>binary</code> using <code>:erlang.term_to_binary</code>, we can directly store our keyword list.</p> <p>Storing our data in binary is a lot simpler!</p> <h3 id='security-considerations' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#security-considerations' aria-label='Anchor'></a>Security Considerations</h3><p>The Ecto <a href="https://hexdocs.pm/ecto/Ecto.Schema.html#module-the-map-type">documentation</a> explained that it goes through JSON for security reasons. It can be dangerous to deserialize malicious data back into Elixir code.</p> <p>It comes down to the risk of converting unknown strings into atoms and possibly exhausting the atom table and crashing the system. So we really need to think about where the stored data comes from. We don&#39;t want to store data returned from an external service or anything supplied by a user that we don&#39;t explicitly control.</p> <p>In this situation, the data is generated by our game code and we define what the values can be. With the current design, a user can&#39;t mess with the data stored in the system. However, it&#39;s still important to keep this potential risk in mind going forward!</p> <h3 id='don-t-store-that' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#don-t-store-that' aria-label='Anchor'></a>Don&#39;t Store That!</h3><p>Because it&#39;s now <em>possible</em> to store any Elixir data structure doesn&#39;t mean you should. It may be tempting to store a full Elixir struct in the database but that would be a mistake. The problem comes after we&#39;ve deployed new versions of our application and the struct in our project no longer looks like the struct stored in the database. This can create unexpected problems for our code!</p> <p>Imagine how much our data structures can change over 2 years of active development! What kinds of things can go wrong when restoring an old structure? Lots!</p> <p>Here are a few tips when deciding what to store:</p> <ul> <li>Instead of storing structs, define a map that stores only enough data to restore things later. </li><li>Instead of storing fully nested records, store IDs that can be used to reload current versions of those records. </li><li>Avoid storing extra <em>runtime</em> state that isn&#39;t needed for <em>restoring</em> a game. An example of this is something like a timer reference. </li></ul> <p>We don&#39;t want to just store the whole blob of game state as-is! We still want to be thoughtful and selective about what we store.</p> <h3 id='version-the-data' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#version-the-data' aria-label='Anchor'></a>Version the Data!</h3><p>This tip is also true when storing data as a <code>:map</code>. The key is to add this to our data from the very beginning so we can always count on it being there.</p> <p>The idea is, store a <code>version</code> along with our data. It might look like this:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="n">data</span> <span class="o">=</span> <span class="p">%{</span> <span class="ss">version:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">turn:</span> <span class="mi">10</span><span class="p">,</span> <span class="c1"># ...</span> <span class="p">}</span> </code></pre></div><p>This lets us do on-the-fly data migration from older versions.</p> <p>The <code>version: 1</code> data can easily be pattern matched when we are restoring old data in the future. Our code may now be on version 3, but when we see <code>version: 1</code>, we know how to migrate that data to <code>version: 2</code> and from <code>version: 2</code> we can migrate to <code>version: 3</code>.</p> <p>Let&#39;s review some of pros and cons we&#39;ve identified for storing our data as a binary field.</p> <h3 id='pros-to-the-binary-approach' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#pros-to-the-binary-approach' aria-label='Anchor'></a>Pros to the Binary Approach</h3> <ul> <li>Atoms stay atoms. </li><li>Whatever Elixir data we store is returned. This includes tuples, keyword lists, atoms, binaries, floats, etc. </li><li>More options on what we want to store and how to store it. </li><li>Once we add a custom Ecto type, it&#39;s very easy to do. </li></ul> <h3 id='cons-to-the-binary-approach' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#cons-to-the-binary-approach' aria-label='Anchor'></a>Cons to the Binary Approach</h3> <ul> <li>Postgres doesn&#39;t understand the binary format. Tools like <a href="https://www.pgadmin.org/">pgAdmin</a> show a meaningless binary blob. </li><li>Postgres is unable to search and query within the data. </li><li>Presents a potential security problem if you can&#39;t trust the source of the data. </li><li>May be tempted to store data we shouldn&#39;t. </li></ul> <figure class="post-cta"> <figcaption> <h1> Fly ❤️ Elixir</h1><p> Fly is an awesome place to run your Phoenix apps. It&#39;s really easy to get started. You can be running in minutes.</p><p><a class="button bg-white text-violet-600 hover:bg-opacity-75 hover:text-violet-700 transition-colors" href="https://fly.io/docs/elixir/"> Try Fly for free&nbsp;&nbsp;<span class='opacity-50'>&rarr;</span> </a></p> </figcaption><div class="image-container"> <img src="/static/images/cta-cat.webp" srcset="/static/images/cta-cat@2x.webp 2x" alt=""></div></figure><h2 id='closing-thoughts' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#closing-thoughts' aria-label='Anchor'></a>Closing Thoughts</h2><p>The longer we are in tech, the more we realize that the answer to a question like, &quot;Which is better, X or Y?&quot; is often, &quot;It depends.&quot;</p> <p>Here we explored two options for storing custom complex data on a our <code>Ecto.Schema</code>. It&#39;s like when &quot;Two paths diverged in a wood&quot;, the path you choose depends on things like:</p> <ul> <li>Where do you want to end up? </li><li>What features do you value? </li></ul> <p><strong class='font-semibold text-navy'>Path One</strong>: Use the fully supported <code>:map</code> data type. It&#39;s a great option. It&#39;s actually the recommended approach to take by default. It has some gotchas to be aware of but with a little extra work those can be handled.</p> <p><strong class='font-semibold text-navy'>Path Two</strong>: Encode Elixir data structures as <code>:binary</code> and store it on the record. This makes it easy to store anything we want with less work. This comes with a number of cautions and conditions.</p> <p>Together we&#39;ve peered down the two paths a bit and hopefully now we can quickly determine which path we want next time we come to this fork in the road.</p> <p>As for me, I chose the binary field approach. It fit my needs and had the features I valued. The path you choose to take is up to you!</p> <p>Safe travels!</p> <blockquote> <p>Two paths diverged in a project, and I— <br> I took the one less traveled by, <br> And that has made all the difference.</p> </blockquote> </content>
</entry>
<entry>
<title>Pushing Events: with and without JS.push</title>
<link rel="alternate" href="https://fly.io/phoenix-files/pushing-events-with-js-push/"/>
<id>https://fly.io/phoenix-files/pushing-events-with-js-push/</id>
<published>2022-03-31T00:00:00+00:00</published>
<updated>2023-04-06T14:48:02+00:00</updated>
<content type="html"><p>LiveView <a href="https://hexdocs.pm/phoenix_live_view/bindings.html">DOM element bindings</a> can be used to send events to the server, as well as issue <a href="https://hexdocs.pm/phoenix_live_view/bindings.html#js-commands">LiveView JS commands</a> on the client.</p> <p><a href="https://fly.io/phoenix-files/tabs-with-js-commands/">In another post</a>, we used client-side JS commands to show and hide content in a set of tabs, just by manipulating DOM element attributes.</p> <p><code>JS.push</code> is a bit different; it has one foot on the client side and one on the server side. On its own, <code>JS.push</code> provides a combined API for pushing events to the server, specifying targets and payloads, and customizing loading states. As a LiveView JS command, it&#39;s composable with the other JS commands to coordinate more complex, optimistic client-side effects.</p> <p>In its basic event-pushing functionality, <code>JS.push</code> provides an alternative syntax for some things you can already do with <code>phx-*</code> bindings alone.</p> <p>Let&#39;s take a closer look at how we can migrate between pure <code>phx-*</code> pushes and <code>JS.push</code>. Then we&#39;ll take it one step further and combine a push with an asynchronous transition effect, by composing <code>JS.push</code> with <code>JS.transition</code>.</p> <h2 id='sending-a-simple-click-event-to-the-server' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#sending-a-simple-click-event-to-the-server' aria-label='Anchor'></a>Sending a Simple Click Event to the Server</h2><p>If all you want to do is send an event called <code>clicked</code> to the server, you can use the <code>phx-click</code> binding and call it a day.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="o">&lt;</span><span class="n">button</span> <span class="n">phx</span><span class="o">-</span><span class="n">click</span><span class="o">=</span><span class="s2">"clicked"</span><span class="o">&gt;</span><span class="no">Don</span><span class="s1">'t panic!&lt;/button&gt; </span></code></pre></div><p>Here&#39;s how we can write the exact same thing using the <code>JS.push</code> API:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="o">&lt;</span><span class="n">button</span> <span class="n">phx</span><span class="o">-</span><span class="n">click</span><span class="o">=</span><span class="p">{</span><span class="no">JS</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="s2">"clicked"</span><span class="p">)}</span><span class="o">&gt;</span><span class="no">Don</span><span class="s1">'t panic!&lt;/button&gt; </span></code></pre></div><p>This looks a <em>little</em> bit silly. But it will work! Either way, we&#39;re sending the <code>clicked</code> event to the server, where we&#39;d have a <code>handle_event</code> callback defined that knows what to do with <code>clicked</code> events.</p> <p>Here&#39;s a super-simple callback that can receive our event and print the string <code>Handling clicked event</code> to the iex console.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">def</span> <span class="n">handle_event</span><span class="p">(</span><span class="s2">"clicked"</span><span class="p">,</span> <span class="n">_values</span><span class="p">,</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span> <span class="no">IO</span><span class="o">.</span><span class="n">inspect</span><span class="p">(</span><span class="s2">"Handling clicked event"</span><span class="p">)</span> <span class="p">{</span><span class="ss">:noreply</span><span class="p">,</span> <span class="n">socket</span><span class="p">}</span> <span class="k">end</span> </code></pre></div><h2 id='a-click-with-a-payload' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#a-click-with-a-payload' aria-label='Anchor'></a>A Click With a Payload</h2><p>Say we want to send an event called <code>clicked</code>, with a payload of parameter values: <code>val1</code>, <code>val2</code>, and <code>val3</code>. We can do it with <code>phx-click</code> and <code>phx-value-*</code>:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="o">&lt;</span><span class="n">button</span> <span class="n">phx</span><span class="o">-</span><span class="n">click</span><span class="o">=</span><span class="s2">"clicked"</span> <span class="n">phx</span><span class="o">-</span><span class="n">value</span><span class="o">-</span><span class="n">val1</span><span class="o">=</span><span class="s2">"At"</span> <span class="n">phx</span><span class="o">-</span><span class="n">value</span><span class="o">-</span><span class="n">val2</span><span class="o">=</span><span class="s2">"the"</span> <span class="n">phx</span><span class="o">-</span><span class="n">value</span><span class="o">-</span><span class="n">val3</span><span class="o">=</span><span class="s2">"disco!"</span><span class="o">&gt;</span> <span class="no">Panic</span><span class="n">!</span> <span class="o">&lt;/</span><span class="n">button</span><span class="o">&gt;</span> </code></pre></div><p>Or we can use <code>JS.push</code>, passing a map of values using its <code>value</code> option:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="o">&lt;</span><span class="n">button</span> <span class="n">phx</span><span class="o">-</span><span class="n">click</span><span class="o">=</span><span class="p">{</span> <span class="no">JS</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="s2">"clicked"</span><span class="p">,</span> <span class="ss">value:</span> <span class="p">%{</span><span class="ss">val1:</span> <span class="s2">"At"</span><span class="p">,</span> <span class="ss">val2:</span> <span class="s2">"the"</span><span class="p">,</span> <span class="ss">val3:</span> <span class="s2">"disco!"</span><span class="p">})</span> <span class="p">}</span> <span class="o">&gt;</span> <span class="no">Panic</span><span class="n">!</span> <span class="o">&lt;/</span><span class="n">button</span><span class="o">&gt;</span> </code></pre></div><p>Either way, our <code>handle_event</code> callback receives a map as its <code>values</code> parameter.</p> <p>The following example callback assigns values for variables <code>val1</code>, <code>val2</code>, and <code>val3</code> from the <code>values</code> map, and concatenates them into a string called <code>content</code>. Finally, it uses this string to update the value of the <code>content</code> <em>assign</em> and returns the updated socket.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="k">def</span> <span class="n">handle_event</span><span class="p">(</span><span class="s2">"clicked"</span><span class="p">,</span> <span class="n">values</span><span class="p">,</span> <span class="n">socket</span><span class="p">)</span> <span class="k">do</span> <span class="p">%{</span><span class="s2">"val1"</span> <span class="o">=&gt;</span> <span class="n">val1</span><span class="p">,</span> <span class="s2">"val2"</span> <span class="o">=&gt;</span> <span class="n">val2</span><span class="p">,</span> <span class="s2">"val3"</span> <span class="o">=&gt;</span> <span class="n">val3</span><span class="p">}</span> <span class="o">=</span> <span class="n">values</span> <span class="n">content</span> <span class="o">=</span> <span class="n">val1</span> <span class="o">&lt;&gt;</span> <span class="s2">" "</span> <span class="o">&lt;&gt;</span> <span class="n">val2</span> <span class="o">&lt;&gt;</span> <span class="s2">" "</span> <span class="o">&lt;&gt;</span> <span class="n">val3</span> <span class="p">{</span><span class="ss">:noreply</span><span class="p">,</span> <span class="n">assign</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="ss">:content</span><span class="p">,</span> <span class="n">content</span><span class="p">)}</span> <span class="k">end</span> </code></pre></div><p>Some part of our LiveComponent would render the contents of the <code>content</code> assign; for example:</p> <p><video title="When a user clicks on a button, the string &quot;At the disco!&quot; is rendered inside a div." src="/phoenix-files/2022-03-31/pushing-events-01.mp4?card?center" autoplay="autoplay" loop="loop" muted="muted" playsinline="" disablePictureInPicture="" /></p> <p>When the button is clicked, <code>content</code> gets updated and our concatenated string appears in the rectangle.</p> <h2 id='pushing-the-event-to-a-specific-target' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#pushing-the-event-to-a-specific-target' aria-label='Anchor'></a>Pushing the Event to a Specific Target</h2><p>We can send events to a particular LiveView or LiveComponent, by specifying a DOM selector that matches an element or elements inside it. The owner of each matching DOM element will automatically receive the event.</p> <p>Imagine we&#39;ve defined a LiveView named <code>ContentLive</code> and we render two <code>ContentLive</code>s with DOM IDs <code>content1</code> and <code>content2</code>.</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="o">&lt;%=</span> <span class="n">live_render</span><span class="p">(</span><span class="nv">@socket</span><span class="p">,</span> <span class="no">ContentLive</span><span class="p">,</span> <span class="ss">id:</span> <span class="s2">"content1"</span><span class="p">,</span> <span class="ss">session:</span> <span class="p">%{}})%</span><span class="o">&gt;</span> <span class="o">&lt;%=</span> <span class="n">live_render</span><span class="p">(</span><span class="nv">@socket</span><span class="p">,</span> <span class="no">ContentLive</span><span class="p">,</span> <span class="ss">id:</span> <span class="s2">"content2"</span><span class="p">,</span> <span class="ss">session:</span> <span class="p">%{}})%</span><span class="o">&gt;</span> </code></pre></div><p>And the HTML content rendered inside them is the following:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="sx">~H""</span><span class="s2">" &lt;div class="</span><span class="n">container_content</span><span class="s2">"&gt; &lt;h1&gt;&lt;%= @content %&gt;&lt;/h1&gt; &lt;/div&gt; """</span> </code></pre></div><p>Each <code>ContentLive</code> will render one div with the class <code>container_content</code>. We can target an event to both divs using the class selector as follows.</p> <p>With <code>phx-click</code> and <code>phx-target</code>:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="o">&lt;</span><span class="n">button</span> <span class="n">phx</span><span class="o">-</span><span class="n">target</span><span class="o">=</span><span class="s2">".container_content"</span> <span class="n">phx</span><span class="o">-</span><span class="n">click</span><span class="o">=</span><span class="s2">"clicked"</span><span class="o">&gt;</span> <span class="no">Panic</span><span class="n">!</span> <span class="o">&lt;/</span><span class="n">button</span><span class="o">&gt;</span> </code></pre></div><p>With <code>JS.push</code>:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="o">&lt;</span><span class="n">button</span> <span class="n">phx</span><span class="o">-</span><span class="n">click</span><span class="o">=</span><span class="p">{</span><span class="no">JS</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="s2">"clicked"</span><span class="p">,</span> <span class="ss">target:</span> <span class="s2">".container_content"</span><span class="p">)}</span><span class="o">&gt;</span> <span class="no">Panic</span><span class="n">!</span> <span class="o">&lt;/</span><span class="n">button</span><span class="o">&gt;</span> </code></pre></div><p>Either way, both of our <code>ContentLive</code> LiveViews will receive and handle the <code>clicked</code> event, because they each contain an element with class <code>container_content</code>. We didn&#39;t need to specify the <code>ContentLive</code>s by id.</p> <p><video title="When a user clicks on a button, the string &quot;At the disco!&quot; is rendered inside two different divs." src="/phoenix-files/2022-03-31/pushing-events-02.mp4?card?center" autoplay="autoplay" loop="loop" muted="muted" playsinline="" disablePictureInPicture="" /></p> <p>We <em>can</em> target a LiveView or LiveComponent directly by id if we want to:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="c1"># pure phx-bindings way</span> <span class="o">&lt;</span><span class="n">button</span> <span class="n">phx</span><span class="o">-</span><span class="n">target</span><span class="o">=</span><span class="s2">"#content1"</span> <span class="n">phx</span><span class="o">-</span><span class="n">click</span><span class="o">=</span><span class="s2">"clicked"</span><span class="o">&gt;</span> <span class="no">Panic</span><span class="n">!</span> <span class="o">&lt;/</span><span class="n">button</span><span class="o">&gt;</span> <span class="c1"># JS.push way</span> <span class="o">&lt;</span><span class="n">button</span> <span class="n">phx</span><span class="o">-</span><span class="n">click</span><span class="o">=</span><span class="p">{</span><span class="no">JS</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="s2">"clicked"</span><span class="p">,</span> <span class="ss">target:</span> <span class="s2">"#content1"</span><span class="p">)}</span><span class="o">&gt;</span> <span class="no">Panic</span><span class="n">!</span> <span class="o">&lt;/</span><span class="n">button</span><span class="o">&gt;</span> </code></pre></div><figure class="post-cta"> <figcaption> <h1> Fly ❤️ Elixir</h1><p> Fly is an awesome place to run your Elixir apps. It&#39;s really easy to get started. You can be running in minutes.</p><p><a class="button bg-white text-violet-600 hover:bg-opacity-75 hover:text-violet-700 transition-colors" href="https://fly.io/docs/elixir/"> Deploy your Elixir app today!&nbsp;&nbsp;<span class='opacity:50'>&rarr;</span> </a></p> </figcaption><div class="image-container"> <img src="/static/images/cta-rabbit.webp" srcset="/static/images/cta-rabbit@2x.webp 2x" alt=""></div></figure><h2 id='composing-js-push-with-other-js-commands' class='group flex items-center whitespace-pre-wrap relative mt-14 mb-6 text-navy font-heading'><a class='absolute ml-[-1em] pr-[0.5em] after:hash opacity-0 group-hover:opacity-50 transition-all' href='#composing-js-push-with-other-js-commands' aria-label='Anchor'></a>Composing JS.push With Other JS Commands</h2><p>In all the above scenarios, <code>JS.push</code> is doing nothing more than what the <code>phx-*</code> bindings are doing. We haven&#39;t seen any compelling reason to migrate to the <code>JS.push</code> syntax.</p> <aside class="right-sidenote"> For the moment, we&#39;re putting aside the loading-state tweaks that <code>JS.push</code> enables through its <code>loading</code> and <code>page_loading</code> options.</aside><p>But here&#39;s a cool trick! If we&#39;re using <code>JS.push</code> to send our event, we can orchestrate client-side transition effects along with our push, simply by composing it with other <a href="https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.JS.html">LiveView JS commands</a>!</p> <p>Let&#39;s try with the <code>JS.transition</code> command:</p> <div class='highlight relative group '><button class='group-hover:opacity-100 opacity-0 transition-all absolute right-0 top-0 z-20 w-12 h-12 p-4 text-gray-400 hover:text-white z-10 outline-none focus:outline-none' aria-label='Copy' data-copy-target='sibling' data-copy-success="%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg' stroke-linecap='round' stroke-width='2' stroke='white' fill='none' stroke='currentColor' %3E%3Cpath d='m16.376 7.924-6.043 8.095-2.895-3.354' /%3E%3Cpath d='M6 2h12c2.208 0 4 1.792 4 4v12c0 2.208-1.792 4-4 4H6c-2.208 0-4-1.792-4-4V6c0-2.208 1.792-4 4-4Z' /%3E%3C/svg%3E"><svg class='pointer-events-none' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'><path d='M15.79 10.869a2.66 2.66 0 0 0-2.659-2.659H5.154a2.66 2.66 0 0 0-2.659 2.659v7.977a2.66 2.66 0 0 0 2.659 2.659h7.977a2.66 2.66 0 0 0 2.659-2.659v-7.977Z' /><path d='M15.79 15.758h3.089a2.661 2.661 0 0 0 2.659-2.66V5.121a2.661 2.661 0 0 0-2.659-2.659h-7.977a2.661 2.661 0 0 0-2.66 2.659v2.368' /></svg></button><pre class='highlight elixir'><code><span class="o">&lt;</span><span class="n">button</span> <span class="n">phx</span><span class="o">-</span><span class="n">click</span><span class="o">=</span><span class="p">{</span> <span class="no">JS</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="s2">"clicked"</span><span class="p">,</span> <span class="ss">value:</span> <span class="p">%{</span><span class="ss">val1:</span> <span class="s2">"At"</span><span class="p">,</span> <span class="ss">val2:</span> <span class="s2">"the"</span><span class="p">,</span> <span class="ss">val3:</span> <span class="s2">"disco!"</span><span class="p">})</span> <span class="o">|&gt;</span> <span class="no">JS</span><span class="o">.</span><span class="n">transition</span><span class="p">(</span><span class="s2">"shake"</span><span class="p">,</span> <span class="ss">to:</span> <span class="s2">"#content"</span><span class="p">)</span> <span class="p">}</span> <span class="o">&gt;</span> <span class="no">Panic</span><span class="n">!</span> <span class="o">&lt;/</span><span class="n">button</span><span class="o">&gt;</span> </code></pre></div><p>This applies a transition named <code>shake</code> to the div with id <code>content</code>, totally client-side, at the same time the event is being processed and the <code>content</code> assign is changed.</p> <p><video title="When a user clicks on a button, the string &quot;At the disco!&quot; is rendered inside a div and a shake transition is executed" src="/phoenix-files/2022-03-31/pushing-events-03.mp4?card&amp;center" autoplay="autoplay" loop="loop" muted="muted" playsinline="" disablePictureInPicture="" /></p> <p>Even when <code>JS.push</code> <em>itself</em> is replicating push behavior that can be achieved with <code>phx-*</code> bindings alone, we&#39;ve found a use-case for preferring the <code>JS.push</code> syntax, and one of its <em>raisons d&#39;être</em> as a LiveView JS command.</p> </content>
</entry>
</feed>
